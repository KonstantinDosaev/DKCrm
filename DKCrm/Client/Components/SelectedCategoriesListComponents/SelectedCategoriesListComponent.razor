<MudPaper Width="100%">
    <MudList Style="" @bind-SelectedValue="SelectedItem" Color="Color.Primary">
        @if (Categories != null)
        {
            foreach (var category in Categories!.Where(w => w.ParentId == null).ToList())
            {
                <SelectedCategoriesListReqursion CloseCategoryDrawerCallback="CloseCategory"
                                           Category="category"
                                           RefreshCategoryListCallback="GetCategories"
                                           ChangeValue="ChangeValue"
                                           SelectedItem="SelectedItem"
                                           />
            }
        }
    </MudList>
</MudPaper>

@code {

    public MudListItem<Category>? _selectedItem;
    [Parameter]
    public MudListItem<Category>? SelectedItem
    {
        get => _selectedItem;
        set => _selectedItem = value;
    }
    [Parameter]
    public EventCallback<MudListItem<Category>> SelectedItemChanged { get; set; }
    [Parameter]
    public object? SelectedValue { get; set; } = 1;

    [Parameter]
    public List<Category>? Categories { get; set; }

    private List<Category>? CategoriesUpLevel { get; set; }
    [Parameter]
    public Category? SelectedCategory {
        get => (Category?)SelectedValue;
        set => SelectedValue = value;
    }
    [Parameter]
    public EventCallback<Category> SelectedCategoryChanged { get; set; }
    [Parameter]
    public EventCallback<Category> IsSetCategory { get; set; }

  

    protected override async Task OnInitializedAsync()
    {

        if (Categories==null)
        {
          await GetCategories();
        }
        
      
    }

    async Task ChangeValue()
    {
        SelectedCategory = (Category?)SelectedValue;
        SelectedItem = _selectedItem;
        await SelectedCategoryChanged.InvokeAsync((Category?)SelectedValue);
        await IsSetCategory.InvokeAsync((Category?)SelectedValue);
        await SelectedItemChanged.InvokeAsync(SelectedItem);
    }

    private async Task GetCategories()
    {
        Categories ??= await CategoryManager.GetAsync();
        CategoriesUpLevel ??= Categories.Where(w => w.ParentId == null).ToList();
        Categories = Categories!.OrderBy(o => o.Name).ToList();

    }
    private void CloseCategory()
    {
        //open = false; 
        //_selectedItem = null;
        StateHasChanged();
    }

}
