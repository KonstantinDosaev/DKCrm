@using DKCrm.Shared.Constants
@using DKCrm.Client.Components.SelectedCategoriesListComponents

<MudExpansionPanels Dense="false" Elevation="25" Style="background-color: #cbf0ee" MultiExpansion="false">
    <MudExpansionPanel Text="КАТЕГОРИИ">
        @if (Chapter != ProductFromChapterNames.Category)
        {
            <div class="d-flex flex-column w-100">
                <MudButton Variant="Variant.Text" Color="Color.Warning" OnClick="ClearSelectedCategory">Сбросить</MudButton>
                <SelectedCategoriesListComponent
                    @bind-SelectedCategory="@Category"
                    IsSetCategory="InitCategoryOptions"/>
                        
            </div>
        }
        else
        {
            <MudText>
                @if (Category != null){@Category.Name}
            </MudText>
        }
    </MudExpansionPanel>
    
    <MudExpansionPanel IsExpandedChanged="(async () => await InitBrands())" Text="ПРОИЗВОДИТЕЛИ">
        @if (Chapter != ProductFromChapterNames.Brand)
        {
            @if (Brands != null)
            {
                <div class="d-flex flex-column w-100">
                    <MudButton Variant="Variant.Text" Color="Color.Warning" OnClick="ClearSelectedBrands">Сбросить</MudButton>
                    <MudPaper Class="p-3">
                        @foreach (var brand in Brands)
                        {
                            BrandCheckBox = false;
                            @if (SelectedBrands != null && SelectedBrands.Contains(brand))
                            { BrandCheckBox = true;  } 
                            <div class="d-flex my-1">
                                <input type="checkbox" class="mr-2" checked="@BrandCheckBox"
                                       @onchange="eventArgs => { CheckboxBrandClicked(brand, eventArgs.Value!); }" />
                                <span>@brand.Name</span>
                            </div>
                        }
                    </MudPaper>
                </div>
            }
        }
        else
        {
            <MudText>@Brands?.FirstOrDefault(o => o.Id == ChapterId)</MudText>
        }
    </MudExpansionPanel>
    
    <MudExpansionPanel Text="ОПЦИИ ПРОДУКТА">
        @if (CategoryOptions != null)
        {
            <div class="d-flex flex-column w-100">
                <MudButton Variant="Variant.Text" Color="Color.Warning" OnClick="ClearSelectedProductOptions">Сбросить</MudButton>
                <p>@SelectedProductOptions.Count</p>
                <MudExpansionPanels Elevation="25" Style="background-color: #cbf0ee" MultiExpansion="true">
                    @foreach (var state in CategoryOptions)
                    {
                        <MudExpansionPanel  Text="@state.Name">
                            @if (state.ProductOption != null)
                            {
                                @foreach (var option in state.ProductOption.GroupBy(g => g.Value))
                                {
                                    ProductOptionsCheckBox = false;
                                    @if (SelectedProductOptions != null && SelectedProductOptions.Contains(option.FirstOrDefault()!.Id))
                                    {  
                                        ProductOptionsCheckBox = true;  
                                    }
                                    <div class="d-flex my-1">
                                        <input type="checkbox" class="mr-2" checked="@ProductOptionsCheckBox"
                                               @onchange="eventArgs => { CheckboxOptionClicked(option, eventArgs.Value!); }" />

                                        <span>@($"{option.Key} ({option.Count()})")</span>
                                    </div>
                                }

                            }
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>              
            
            </div>
        }
             
        else
        {
            <MudText>Выберите категорию</MudText>
        }
    </MudExpansionPanel>
</MudExpansionPanels>



 

@code {
    [Parameter]
    public object? SelectedValue { get; set; } = 1;
    public bool ProductOptionsCheckBox { get; set; } = false;
    public bool BrandCheckBox { get; set; } = false;

    [Parameter] public string? Chapter { get; set; }
    [Parameter] public Guid? ChapterId { get; set; }

    public Category? Category { get; set; }
    private ICollection<CategoryOption>? CategoryOptions { get; set; }

    [Parameter]public EventCallback<FilterProductTuple> IsSetOption { get; set; }
    public List<Guid>? ProductIdFromOptions { get; set; }
    public List<Guid> SelectedProductOptions { get; set; } = new ();
    private List<Category>? Categories { get; set; }
    private List<Brand>? Brands { get; set; }
    public List<Brand> SelectedBrands { get; set; } = new();

    private void CheckboxOptionClicked(IGrouping<string, ProductOption> aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedProductOptions.Contains(aSelectedId.FirstOrDefault()!.Id))
            {
                SelectedProductOptions.AddRange(aSelectedId.Select(s => s).Select(s => s.Id));
            }
        }
        else
        {
            if (SelectedProductOptions.Contains(aSelectedId.FirstOrDefault()!.Id))
            {
                foreach (var id in aSelectedId)
                {
                    SelectedProductOptions.Remove(id.Id);
                }
            }
        }
        InitC();
    }
    private void CheckboxBrandClicked(Brand aSelected, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedBrands.Contains(aSelected))
            {
                SelectedBrands.Add(aSelected);
            }
        }
        else
        {
            if (SelectedBrands.Contains(aSelected))
            {
                SelectedBrands.Remove(aSelected);
            }
        }
        InitC();
    }
   
    private void InitCategoryOptions()
    {
        if (Category != null) CategoryOptions = Category.CategoryOptions;
        InitC();
    }
    private async Task InitBrands()
    {
        Brands ??= await BrandManager.GetAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Chapter != null && ChapterId != null)
        {
            switch (Chapter)
            {
                case ProductFromChapterNames.Category:
                    Category = await CategoryManager.GetDetailsAsync((Guid)ChapterId);
                    CategoryOptions = Category.CategoryOptions;
                    break;
                case ProductFromChapterNames.Brand:
                    SelectedBrands = new List<Brand>() { Brands?.FirstOrDefault(o => o.Id == ChapterId)! };
                    break;

            }
        }
    }


    private async void InitC()
    {
        ProductIdFromOptions = SelectedProductOptions;
        await IsSetOption.InvokeAsync(new FilterProductTuple(){ProductOptions = SelectedProductOptions,
            CategoryId = Category?.Id,
            BrandIdList = SelectedBrands.Select(s=>s.Id).ToList()});
    }
    private void ClearSelectedProductOptions()
    {
        SelectedProductOptions.Clear();
        StateHasChanged();
        InitC();
    }
    private  void ClearSelectedBrands()
    {
        SelectedBrands.Clear();
        StateHasChanged();
        InitC();
    }
    private void ClearSelectedCategory()
    {
       Category=null;
        StateHasChanged();
        InitC();
    }

}

