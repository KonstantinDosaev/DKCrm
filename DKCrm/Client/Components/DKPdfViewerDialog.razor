@using Microsoft.AspNetCore.Components
@using DKCrm.Shared.Constants
@inject IDocumentManager Doc
@using BlazorBootstrap;
@using Size = MudBlazor.Size
@using Placement = MudBlazor.Placement
@using Orientation = BlazorBootstrap.Orientation
@using System.Reflection
@using DKCrm.Shared.Requests.FileService
@inject IConfiguration conf

<MudDialog @ref="_dialog" IsVisible="VisibleDialog" IsVisibleChanged="VisibleDialogChanged"
           DisableSidePadding="true" Style="height: 100VH" 
           Options="new DialogOptions() {DisableBackdropClick = true,FullWidth = true,FullScreen = true, NoHeader = true}" 
           ClassContent="myPdfViewerDialog">
    <DialogContent>
        <div class="pdfDialogButton">
            <MudTooltip Arrow="true" Text="Закрыть" Placement="Placement.Left">
            <MudIconButton
                Size="Size.Large" Class="pdfDialogButton__clear"
                OnClick="CloseClick"
                Color="Color.Info" Icon="@Icons.Material.Filled.Close"></MudIconButton>
            </MudTooltip>
            @if (StamperIsOn)
            {
                <div class="stamp__editButtons">
                    <div class="mb-2">
                        @if (_visibleStampPdf)
                        {
                            <MudTooltip Arrow="true" Text="Сохранить" Placement="Placement.Left">
                                <MudIconButton Icon="@Icons.Material.Filled.Check" Variant="Variant.Filled"
                                               OnClick="AddStampPosition"
                                               Size="Size.Large"
                                               Color="Color.Success" Class="mr-2"/></MudTooltip>
                            <MudTooltip Arrow="true" Text="Закрыть" Placement="Placement.Left">
                                <MudIconButton Icon="@Icons.Material.Filled.Close" Variant="Variant.Filled"
                                               OnClick="CloseStampGrid"
                                               Size="Size.Large"
                                               Color="Color.Info"/></MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Arrow="true" Text="Добавить печать" Placement="Placement.Left">
                                <MudIconButton Icon="@Icons.Material.Filled.AddToPhotos" Variant="Variant.Filled"
                                               OnClick="OpenStampGrid"
                                               Size="Size.Large"
                                               Color="Color.Info"/></MudTooltip>
                        }
                    </div>

                    @if (_visibleStampPdf)
                    {
                        <div>
                            <MudTooltip Arrow="true" Text="Сменить печать" Placement="Placement.Left">
                                <MudIconButton Icon="@Icons.Material.Filled.Image" Variant="Variant.Filled"
                                               OnClick="(() => _visibleStampImagesDialog = true)"
                                               Size="Size.Large"
                                               Color="Color.Info" Class="mb-2"/></MudTooltip>
                        </div>
                    }
                    <div>
                        <MudTooltip Arrow="true" Text="Список добавленных печатей" Placement="Placement.Left">
                            <MudIconButton Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.List" Color="Color.Primary" OnClick="OpenCloseListAddedStamps"/></MudTooltip>
                        <MudPopover Open="@_isOpenMenuAddedStamps" Fixed="true" Class="py-3 px-2">
                            <div class="d-flex flex-column">


                                @if (StampToPdfRequest.StampPositionList != null)
                                {
                                    @foreach (var r in StampToPdfRequest.StampPositionList)
                                    {
                                        <MudPaper Class="p-2 my-1">стр. @r.PageNumber (@r.StampImage) 
                                            <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleRight" OnClick="(() => GetToStampItem(r))"/>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="(() => RemoveStampItem(r))"/>
                                            </MudPaper>
                                    }
                                }
                                else
                                {
                                    <MudText Typo="Typo.button">не установлены печати</MudText>
                                }
                            </div>
                        </MudPopover>
                        <MudOverlay Style="z-index: 101;" @bind-Visible="_isOpenMenuAddedStamps" OnClick="OpenCloseListAddedStamps" DarkBackground="false" AutoClose="true"/>
                    </div>
                </div>
            }

        </div>
        @if (_loading)
        {<div style="width: 100%; height: 100%;" class="d-flex align-items-center justify-content-center">
             <MudText Typo="Typo.h4">Загрузка...</MudText>
         </div>
        }
        else
        {
            <div class="myPdfViwer__container" style="overflow: auto; height: 100VH; position: relative;">
                <div class="controll__toggler">
                <MudToggleIconButton Size="Size.Large" ToggledSize="Size.Large" Toggled="@VisiblePdfControl" ToggledChanged="OnToggledChanged" Class=""
                                     Icon="@Icons.Material.Filled.KeyboardDoubleArrowUp" Color="@Color.Info" Title="Off"
                                         ToggledIcon="@Icons.Material.Filled.KeyboardDoubleArrowDown" ToggledColor="@Color.Info" ToggledTitle="On" />
                </div>
                <PdfViewer @ref="_viwer" Class="myPdfViwer"
                           Url="@(string.Format("data:application/pdf;base64,{0}", _pdfContent))"
                           OnDocumentLoaded="OnDocumentLoaded"
                           OnPageChanged="OnPageChanged" Orientation="Orientation.Portrait"/>
                @if (StamperIsOn)
                {
                    @if (_visibleStampPdf)
                    {
                        <div class="stampGrid " style="@($" width: {_widthStampGrid}px;height: {_heightStampGrid}px;")">
                            <div class="stampGrid__container my-3" style="@($" width: {_widthStampGrid}px;height: {_heightStampGrid}px;")">
                                <MudSlider
                                    @bind-Value="CurrentStampPosition.PercentOfBottomEdge"
                                    Style="@($"height:{_heightStampGrid}px; position: absolute; bottom:-10px; left:0px;")"
                                    Class="mySlider__vertical mySlider"
                                    Max="_verticalLimit"
                                    Size="Size.Medium"
                                    Color="Color.Info"/>
                                <MudSlider @bind-Value="CurrentStampPosition.PercentOfLeftEdge"
                                           Style="@($"width: 100%;position: absolute;top:-12px;")"
                                           Size="Size.Medium"
                                           Class="mySlider"
                                           Max="@_horizontalLimit"
                                           Color="Color.Info"/>
                                @if (CurrentStampImage != null)
                                {
                                    <div class="stampItem" style="@($"bottom:{CurrentStampPosition.PercentOfBottomEdge}%;left: {CurrentStampPosition.PercentOfLeftEdge}%;") background: url(@($"data:image;base64,{Convert.ToBase64String(CurrentStampImage)}")); background-size: cover; background-position: center;"></div>
                                }
                            </div>
                        </div>
                        <MudOverlay Visible="_visibleStampPdf" DarkBackground="true" AutoClose="false"/>
                    }
                }
            </div>
        }
        @if (StamperIsOn)
        {
            <div class="getIndexPdfDialogButton">
               
                @if (_visibleStampPdf)
                {
                    <MudText>@CurrentStampPosition.PercentOfLeftEdge</MudText>
                    <MudText>@CurrentStampPosition.PercentOfBottomEdge</MudText>
                  
                    <MudButton OnClick="(() => _visibleStampImagesDialog = true)"></MudButton>
                   
                }
               
                   
                   
                
            </div>
        }
    </DialogContent>
</MudDialog>
@if (_visibleStampImagesDialog)
{
    <DKImageViewerDialog DirectoryType="DirectoryType.Private"
                         FileType="FileTypes.Stamps"
                         RelativePath="@PathsToDirectories.Stamps"
                         LoadMoreCount="5" @bind-VisibleDialog="_visibleStampImagesDialog" TitleText="Печати"
                         IsSelected="true" MultipleSelect="false"
                         SelectedImageCallback="SetStampImage"/>
}
@code {
    [Parameter] public bool VisibleDialog { get; set; }
    [Parameter] public bool StamperIsOn { get; set; }
    [Parameter] public EventCallback<bool> VisibleDialogChanged { get; set; }
    [Parameter] public string? DocumentName { get; set; }
    [Parameter] public FileTypes FileType { get; set; }
    [Parameter] public DirectoryType DirectoryType { get; set; }
    [Parameter] public string RelativePath { get; set; } = null!;
    private DKImageViewerDialog _imageViewer;
    private MudDialog _dialog;
    private PdfViewer _viwer;
    private bool _isOpenMenuAddedStamps;
    public bool VisiblePdfControl { get; set; }
    private bool _visibleStampImagesDialog;
    private bool _loading;
    bool _visibleStampPdf;
    // private double _valueX = 0;
    // private double _valueY =88;
   // private string? _currentStampName;
    //private int _currentPage;
    AddStampToPdfRequest StampToPdfRequest { get; set; } = new AddStampToPdfRequest();
    private StampPosition? CurrentStampPosition { get; set; } = new StampPosition();
    string _pdfContent = "";
    int _widthStampGrid;
    int _heightStampGrid;
    int _horizontalLimit;
    int _verticalLimit;
    byte[]? CurrentStampImage { get; set; }
    Orientation _tempOrientation;
    string positionControlPanel = "0px";
    string positionToggleButtonControlPanel = "200px";
    string displayControl = "100";
    string defaultSize = "";
   

    private void OpenCloseListAddedStamps()
    {
        _isOpenMenuAddedStamps = !_isOpenMenuAddedStamps;
    } 
    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        var bytFile = await FilesManager.GetFileInBytArrayAsync(new GetFileRequest()
        {
            DirectoryType = DirectoryType, Path = RelativePath
        });
        _pdfContent = Convert.ToBase64String(bytFile);
        _loading = false;
    }
    async Task CloseClick(MouseEventArgs eArgs)
    {
        VisibleDialog = false;
        _dialog.Close(DialogResult.Cancel());
        await VisibleDialogChanged.InvokeAsync(VisibleDialog);
    }
    private void OnDocumentLoaded(PdfViewerEventArgs args)
    {
        if (!StamperIsOn)
            return;
        _tempOrientation = _viwer.Orientation;
        var or = _viwer.Orientation;
        _heightStampGrid = or  == Orientation.Landscape ? 595 : 842;
        _widthStampGrid = or == Orientation.Landscape ? 842 : 595;
        _verticalLimit = or == Orientation.Landscape ? 83 : 88;
        if (or == Orientation.Landscape)
        {
            _heightStampGrid = 595;
            _widthStampGrid = 842;
            _verticalLimit = 83;
            _horizontalLimit = 88;
        }
        else
        {
            _heightStampGrid = 842;
            _widthStampGrid = 595;
            _verticalLimit = 88;
            _horizontalLimit = 83;
        }
        CurrentStampPosition.PageNumber = args.CurrentPage;
    } 

    private void OnPageChanged(PdfViewerEventArgs args)
    {
        if (!StamperIsOn)
            return;
        var or = _viwer.Orientation;
        if (_tempOrientation != or)
        {
            if (or == Orientation.Landscape)
            {
                _heightStampGrid = 595;
                _widthStampGrid = 842;
                _verticalLimit = 83;
                _horizontalLimit = 88;
            }
            else
            {
                _heightStampGrid = 842;
                _widthStampGrid = 595;
                _verticalLimit = 88;
                _horizontalLimit = 83;
            }
        }
        CurrentStampPosition.PageNumber = args.CurrentPage;
    }




    private async Task SetStampImage(string name)
    {
       CurrentStampPosition.StampImage = name;
        CurrentStampImage = await FilesManager.GetFileInBytArrayAsync(new GetFileRequest()
        {
            DirectoryType = DirectoryType, 
            Path = Path.Combine(PathsToDirectories.Stamps, name), 
            IsFullPath = false
        });
    }
    private void OpenStampGrid()
    {
        
        var methodInfo = typeof(PdfViewer).GetMethod("ResetZoomAsync", BindingFlags.NonPublic | BindingFlags.Instance);
        if (methodInfo != null) methodInfo.Invoke(_viwer, null);
        _visibleStampPdf = true;
        if (CurrentStampPosition.StampImage == null)
            _visibleStampImagesDialog = true;
        defaultSize =  _visibleStampPdf ?"myPdfViwer .bg-secondary-subtle canvas" : "";
        displayControl = _visibleStampPdf ? "0" : "100";
    }
    private void CloseStampGrid()
    {
        _visibleStampPdf = false;
        defaultSize = "";
        displayControl = "100";
        CurrentStampPosition = new StampPosition();

    }
    private void AddStampPosition(MouseEventArgs args)
    {
        StampToPdfRequest.StampPositionList ??= new List<StampPosition>();
        if (CurrentStampPosition.Id != Guid.Empty  || CurrentStampPosition.Id != null)
        {
            StampToPdfRequest.StampPositionList.Remove( StampToPdfRequest.StampPositionList.FirstOrDefault(f => f.Id == CurrentStampPosition.Id)!);
        }
        StampToPdfRequest.StampPositionList.Add(CurrentStampPosition);
        
        CloseStampGrid();
        OpenCloseListAddedStamps();
    }
    public void OnToggledChanged(bool toggled)
    {
    // Because variable is not two-way bound, we need to update it ourself
        VisiblePdfControl = toggled;

        positionControlPanel = !VisiblePdfControl ? "0" : "-200px";
        positionToggleButtonControlPanel = !VisiblePdfControl ? "200px" : "10px";
    }
    public async Task GetToStampItem(StampPosition position)
    {
        CurrentStampPosition = position;
        var methodInfo = typeof(PdfViewer).GetMethod("PageNumberChangedAsync", BindingFlags.NonPublic | BindingFlags.Instance);
        if (methodInfo != null) methodInfo.Invoke(_viwer, new object?[]{position.PageNumber});

        if (position.StampImage != null) await SetStampImage(position.StampImage);

        if (!_visibleStampPdf) 
            OpenStampGrid();
    }
    public async Task RemoveStampItem(StampPosition position)
    {

        StampToPdfRequest.StampPositionList.Remove(position);
    }
}
<style>
    myPdfViwer__container {
         
    }
    .myPdfViwer .bg-body-tertiary {
        position: absolute !important;
        top: @positionControlPanel;
        transition: top 1s 0s;
        width: 60px;
        flex-direction: column;
        border: 1px solid gray;
        z-index: @displayControl;
 
    }
    .myPdfViwer .bg-body-tertiary div {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    .myPdfViwer .bg-body-tertiary div .dropdown{
        display: none;
    }

    .myPdfViwer .bg-body-tertiary div span {
        margin-right: 0!important;
        margin-left: 0 !important;
    }
    .controll__toggler {
       
        position: absolute;
        top: @positionToggleButtonControlPanel;
        left: 0px;
        z-index: @displayControl;
        transition: top 1s;
    }

    .myPdfViwer .bg-secondary-subtle canvas {
        z-index: 98;
        position: relative;
       
    }
    .@defaultSize {
         height: @($"{_heightStampGrid}px");
        width: @($"{_widthStampGrid}px");
    }
    .pdfDialogButton {
       
        
        top: 5px;
        position: absolute;
        right: 10px;
        display: flex; flex-direction: column; align-items: center; justify-content: center;
    }
    .pdfDialogButton__clear {
        z-index: @displayControl;
    }

    .stamp__editButtons {
        position: relative;
        z-index: 100;
        display: flex;
        align-items: end;
        flex-direction: column;
    }
    .myPdfViewerDialog {
        padding: 0 !important;
        height: 100VH;
    }



    .getIndexPdfDialogButton {
        top: 400px;
        position: absolute;
        right: 10px;
    }

    .stampGrid {
        position: absolute;
        top: 0;
        left: 50%;
        margin-right: -50%;
        transform: translate(-50%, 0%);
        z-index: 100;
       
    
    }

    .stampGrid__block {
        display: flex;
        justify-content: center;
        width: 100VW;
   }

    .stampGrid__container {
        /*  display: flex;
        flex-wrap: wrap; */
        position: relative;
      

    }

    .mySlider {
        z-index: 100;
    }
    .mySlider__vertical .mud-slider-input {
        
        writing-mode: vertical-rl;
        height: 100%;
        transform:rotate(180deg);
    }

    .mySlider__vertical .mud-slider-container {
        
         height: @($"{_heightStampGrid}px");
    }
    .mySlider__vertical {

        width: 4px!important;
    }
    .stampItem {
        position: absolute;
        height: 100px;
        width: 100px;
        z-index: 99;
        opacity: 0.7;
        border: solid black 2px;
        border-radius: 50%;
        overflow: hidden;
    }

    .containerbackground {
        margin: 2rem;
        font-weight: bold;
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        width: 70px;
        z-index: -1;
        transform: rotate(300deg);
        -webkit-transform: rotate(300deg);
        color: black;
    }
    @@media (max-width: 1300px) {
        .myPdfViwer .bg-body-tertiary {
      
        }

        .myPdfViwer .bg-body-tertiary div {
           
        }
    }
    @@media (max-width: 717px) {
        .getIndexPdfDialogButton {
            display: none;
        }
        .stamp__editButtons {
            display: none;
        }
        .stampGrid {
            display: none;
        }
    }
</style>