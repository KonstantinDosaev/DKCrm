@using Microsoft.AspNetCore.Components
@using DKCrm.Shared.Constants
@inject IDocumentManager Doc
@using BlazorBootstrap;
@using Size = MudBlazor.Size
@using Placement = MudBlazor.Placement
@using Orientation = BlazorBootstrap.Orientation
@using System.Reflection
@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Shared.Requests
@using DKCrm.Shared.Requests.FileService
@using Microsoft.EntityFrameworkCore.Storage.Json
@inject IConfiguration Conf

<MudDialog @ref="_dialog" Visible="VisibleDialog" VisibleChanged="VisibleDialogChanged"
           Class="no-padding" Style="height: 100VH"
           Options="new DialogOptions() {BackdropClick = true,FullWidth = true,FullScreen = true, NoHeader = true,}"
           ContentClass="myPdfViewerDialog no-margin">
    <DialogContent>
        <div class="pdfDialogButton">
            <MudTooltip Arrow="true" Text="Закрыть" Placement="Placement.Left">
                <MudIconButton Size="Size.Large" Class="pdfDialogButton__clear"
                               OnClick="CloseClick"
                               Color="Color.Info" Icon="@Icons.Material.Filled.Close"></MudIconButton>
            </MudTooltip>
            @if (StamperIsOn)
            {
                <div class="stamp__editButtons">
                    <div class="mb-2 d-flex flex-column">
                        @if (_visibleStampPdf)
                        {
                            <MudTooltip Arrow="true" Text="Сохранить" Placement="Placement.Left">
                                <MudIconButton Icon="@Icons.Material.Filled.Check" Variant="Variant.Filled"
                                               OnClick="AddStampPosition"
                                               Size="Size.Large"
                                               Color="Color.Success" Class="mr-2 mb-2" />
                            </MudTooltip>
                            <MudTooltip Arrow="true" Text="Закрыть" Placement="Placement.Left">
                                <MudIconButton Icon="@Icons.Material.Filled.Close" Variant="Variant.Filled"
                                               OnClick="CloseStampGrid"
                                               Size="Size.Large"
                                               Color="Color.Info" />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Arrow="true" Text="Добавить печать" Placement="Placement.Left">
                                <MudIconButton Icon="@Icons.Material.Filled.AddToPhotos" Variant="Variant.Filled"
                                               OnClick="OpenStampGrid"
                                               Size="Size.Large"
                                               Color="Color.Info" Class="mb-2"  />
                            </MudTooltip>
                        @if (StampToPdfRequest.StampPositionList == null || (StampToPdfRequest.StampPositionList != null && !StampToPdfRequest.StampPositionList.Any()))
                            {
                                <MudTooltip Arrow="true" Text="Сохранить на ПК" Placement="Placement.Left">
                                    <MudIconButton Icon="@Icons.Material.Filled.GetApp" Variant="Variant.Filled"
                                                   OnClick="SaveDocumentToClientPc"
                                                   Size="Size.Large"
                                                   Color="Color.Info" Class="mr-2 mb-2"/>
                                </MudTooltip>
                                <div>
                                    <MudTooltip Arrow="true" Text="Отправить" Placement="Placement.Left">
                                        <MudIconButton Icon="@Icons.Material.Filled.Mail" Variant="Variant.Filled"
                                                       OnClick="@(() => _isOpen = _isOpen == false)"
                                                       Size="Size.Large"
                                                       Color="Color.Info" Class="mr-2 mb-2"/>
                                    </MudTooltip>
                                    <MudPopover Open="@_isOpen" Fixed="true" Class="px-4 pt-4" RelativeWidth="false">
                                        <div class="d-flex flex-column">
                                            <MudForm @bind-IsValid="@_successEmail">
                                                <MudTextField @bind-Value="email"
                                                              For="@(() => email)"
                                                              Immediate="true"
                                                              Label="Email"
                                                              Required="true" Class="mb-2"/>
                                                <MudTextField @bind-Value="emailSubject"
                                                              For="@(() => emailSubject)"
                                                              Immediate="true"
                                                              Label="Тема сообщения"
                                                              Required="true"/>
                                                <MudTextField @bind-Value="emailMessage"
                                                              For="@(() => emailMessage)"
                                                              Immediate="true" Required="true"
                                                              Label="Сообщение" Class="mb-2"/>
                                                <MudSwitch @bind-Value="sendByUser" Label="как пользователь" Color="Color.Success" />
                                                <MudButton OnClick="SendPdfToMessage"
                                                           Disabled="@(!_successEmail)" Class="ml-auto mr-n3 mb-1"
                                                           Variant="Variant.Filled"
                                                           Color="Color.Success">Отправить</MudButton>
                                            </MudForm>
                                            <MudButton OnClick="@(() => _isOpen = _isOpen == false)"
                                                       Class="ml-auto mr-n3 mb-1" Color="Color.Error">Закрыть</MudButton>
                                        </div>
                                    </MudPopover>
                                </div>
                            }
                        }
                    </div>
                    @if (_visibleStampPdf)
                    {
                        <div>
                            <MudTooltip Arrow="true" Text="Сменить печать" Placement="Placement.Left">
                                <MudIconButton Icon="@Icons.Material.Filled.Image" Variant="Variant.Filled"
                                               OnClick="(() => _visibleStampImagesDialog = true)"
                                               Size="Size.Large"
                                               Color="Color.Info" Class="mb-2" />
                            </MudTooltip>
                        </div>
                    }
                    <div>
                        <MudTooltip Arrow="true" Text="Список добавленных печатей" Placement="Placement.Left">
                            <MudIconButton Variant="Variant.Filled" Size="Size.Large" 
                                           Icon="@Icons.Material.Filled.List" 
                                           Color="Color.Primary" OnClick="OpenCloseListAddedStamps"
                                           Class="mr-2 mb-2" />
                        </MudTooltip>
                        <MudPopover Open="@_isOpenMenuAddedStamps" Fixed="true" Class="py-3 px-2">
                            <div class="d-flex flex-column">
                            @if (StampToPdfRequest.StampPositionList != null && StampToPdfRequest.StampPositionList.Any())
                                {
                                    var stampsToPage = StampToPdfRequest.StampPositionList
                                    .GroupBy(w => w.PageNumber);
                                    @foreach (var r in stampsToPage)
                                    {
                                        <MudPaper Class="p-2 my-1">
                                            стр. @r.Key (печатей: @r.Count())
                                            <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleRight" 
                                                           OnClick="(() => GetToPage(r.Key))" />

                                        </MudPaper>
                                    }
                                    <MudButton OnClick="GetDocumentToStamps"
                                               Class="mt-2"
                                               Variant="Variant.Filled"
                                               Color="Color.Success">применить печати</MudButton>
                                }
                                else
                                {
                                    <MudText Typo="Typo.button">не установлены печати</MudText>
                                }
                            </div>
                        </MudPopover>
                        @*  <MudOverlay Style="z-index: 999;" @bind-Visible="_isOpenMenuAddedStamps" OnClick="OpenCloseListAddedStamps" DarkBackground="true" /> *@
                    </div>
                </div>
            }
        </div>
        @if (_loading)
        {
            <div style="width: 100%; height: 100%;" class="d-flex align-items-center justify-content-center">
                <MudText Typo="Typo.h4">Загрузка...</MudText>
            </div>
        }
        else
        {
            <div class="myPdfViwer__container" style="overflow: auto; height: 100VH; position: relative;">
                <div class="myPdfControll  d-flex flex-column">
                    <MudTooltip Arrow="true" Text="Назад" Placement="Placement.Left">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Variant="Variant.Filled"
                                       OnClick="PreviousPage" Class="myPdfControll__button"
                                       Size="Size.Large"
                                       Color="Color.Info" />
                    </MudTooltip>
                    <div class="myPdfControll__button d-flex flex-column align-items-center"
                         style="border: 2px solid lightskyblue; border-radius: 5px;">
                        <MudNumericField Min="1" Max="_totalPages" Value="_currentPage"
                                         Variant="Variant.Text" Class="myPdfControll__field"
                                         HideSpinButtons="true" Style="max-width: 50px;background: white;" T="int" ValueChanged="(s)=>GetToPage(s)" />
                        <MudText Color="Color.Info" Typo="Typo.button">из</MudText>
                        <MudText Color="Color.Info" Typo="Typo.button" Style="font-size: 16px;">@_totalPages</MudText>
                    </div>
                    <MudTooltip Arrow="true" Text="Вперед" Placement="Placement.Left">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowForward" Variant="Variant.Filled"
                                       OnClick="NextPage" Class="myPdfControll__button mb-2"
                                       Size="Size.Large"
                                       Color="Color.Info" />
                    </MudTooltip>
                    <MudTooltip Arrow="true" Text="Увеличить" Placement="Placement.Left">
                        <MudIconButton Icon="@Icons.Material.Filled.ZoomIn" Variant="Variant.Filled"
                                       Class="myPdfControll__button"
                                       OnClick="ZoomIn"
                                       Size="Size.Large"
                                       Color="Color.Info" />
                    </MudTooltip>
                    <MudTooltip Arrow="true" Text="Сбросить" Placement="Placement.Left">
                        <MudIconButton Variant="Variant.Outlined"
                                       OnClick="ResetZoom" Class="myPdfControll__button"
                                       Size="Size.Large"
                                       Color="Color.Info">@zoomPercentage%</MudIconButton>
                    </MudTooltip>
                    <MudTooltip Arrow="true" Text="Уменьшить" Placement="Placement.Left">
                        <MudIconButton Icon="@Icons.Material.Filled.ZoomOut" Variant="Variant.Filled"
                                       OnClick="ZoomOut" Class="myPdfControll__button mb-2"
                                       Size="Size.Large"
                                       Color="Color.Info" />
                    </MudTooltip>

                </div>
                <div class="controll__toggler">
                    <MudToggleIconButton Size="Size.Large" ToggledSize="Size.Large"
                                         Toggled="@VisiblePdfControl"
                                         ToggledChanged="OnToggledChanged" Class=""
                                         Icon="@Icons.Material.Filled.KeyboardDoubleArrowUp"
                                         Color="@Color.Info"
                                         ToggledIcon="@Icons.Material.Filled.KeyboardDoubleArrowDown"
                                         ToggledColor="@Color.Info" />
                </div>
                <PdfViewer @ref="_viewer" Class="myPdfViwer"
                           Url="@($"data:application/pdf;base64,{_pdfContent}")"
                           OnDocumentLoaded="OnDocumentLoaded"
                           OnPageChanged="OnPageChanged" Orientation="Orientation.Portrait" />
                @if (StamperIsOn)
                {
                    @if (_visibleStampPdf)
                    {
                        <div class="stampGrid " style="@($" width: {(int)(_widthStampGrid * _scale)}px;height: {(int)(_heightStampGrid * _scale)}px;")">
                            <div class="stampGrid__container my-3"
                                 style="@($" width: {(int)(_widthStampGrid * _scale)}px;height: {(int)(_heightStampGrid * _scale)}px;")">
                                <MudSlider @bind-Value="CurrentStampPosition.PercentOfBottomEdge"
                                           Style="@($"height:{(int)(_heightStampGrid * _scale)}px; position: absolute; bottom:-10px; left:0px;")"
                                           Class="mySlider__vertical mySlider"
                                           Max="_verticalLimit"
                                           Size="Size.Medium"
                                           Color="Color.Info" />
                                <MudSlider @bind-Value="CurrentStampPosition.PercentOfLeftEdge"
                                           Style="@($"width: 100%;position: absolute;top:-12px;")"
                                           Size="Size.Medium"
                                           Class="mySlider"
                                           Max="@_horizontalLimit"
                                           Color="Color.Info" />
                                @if (CurrentStampImage != null)
                                {
                                    <div class="stampItem" style="@($"width: {(int)(100 * _scale)}px; height: {(int)(100 * _scale)}px; bottom:{CurrentStampPosition.PercentOfBottomEdge}%;left: {CurrentStampPosition.PercentOfLeftEdge}%;") background: url(@($"data:image;base64,{Convert.ToBase64String(CurrentStampImage)}")); background-size:contain; background-position: bottom,left; background-repeat: no-repeat"></div>
                                }
                            </div>
                        </div>
                        <MudOverlay Visible="_visibleStampPdf" DarkBackground="true" AutoClose="false" />
                    }
                    @if (StampToPdfRequest.StampPositionList != null && StampToPdfRequest.StampPositionList.Any() && !_visibleStampPdf)
                    {
                        var stampInPages = StampToPdfRequest.StampPositionList.Where(s => s.PageNumber == _currentPage).ToArray();
                        if (stampInPages.Any())
                        {
                            <div class="stampGrid " style="@($" width: {(int)(_widthStampGrid * _scale)}px;height: {(int)(_heightStampGrid * _scale)}px;")">
                                <div class="stampGrid__container my-3"
                                     style="@($" width: {(int)(_widthStampGrid * _scale)}px;height: {(int)(_heightStampGrid * _scale)}px;")">

                                    @foreach (var stamp in stampInPages)
                                    {

                                        <div class="stampItem" style="@($" width: {(int)(100 * _scale)}px; height: {(int)(100 * _scale)}px;bottom:{stamp.PercentOfBottomEdge}%;left: {stamp.PercentOfLeftEdge}%;") background: url(@($"data:image;base64,{Convert.ToBase64String(stamp.StampImage)}")); background-size:contain; background-position: bottom,left; background-repeat: no-repeat">
                                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                           OnClick="(() => RemoveStampItem(stamp))" Variant="Variant.Filled"
                                                           Style="position: absolute; z-index: 102; top:0;left: 0;" />
                                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" Color="Color.Info"
                                                           OnClick="(() => GetToStampItem(stamp))" Variant="Variant.Filled"
                                                           Style="position: absolute; z-index: 102; top:0;right: 0;" />
                                        </div>
                                    }
                                </div>
                            </div>

                        }
                    }
                }
            </div>
        }
        @if (StamperIsOn)
        {
            <div class="getIndexPdfDialogButton" style="">
                @if (_visibleStampPdf)
                {
                    <MudText>@CurrentStampPosition.PercentOfLeftEdge</MudText>
                    <MudText>@CurrentStampPosition.PercentOfBottomEdge</MudText>
                    <MudButton OnClick="(() => _visibleStampImagesDialog = true)"></MudButton>
                }
            </div>
        }
    </DialogContent>
</MudDialog>
@if (_visibleStampImagesDialog)
{
    <DKImageViewerDialog DirectoryType="DirectoryType.PrivateFolder"
                         FileType="FileTypes.Stamps"
                         RelativePath="@(Path.Combine(PathsToDirectories.FileContainer, PathsToDirectories.Stamps))"
                         LoadMoreCount="5" @bind-VisibleDialog="_visibleStampImagesDialog" TitleText="Печати"
                         IsSelected="true" MultipleSelect="false"
                         SelectedImageCallback="SetStampImage" SelectImageName="@CurrentStampPosition.StampImageId"
                         OwnerId="@OurCompanyId" ImageType="ImageTypes.Stamp" IsPreviewImage="@true" />
}

@code {
    [Parameter] public bool VisibleDialog { get; set; }
    [Parameter] public bool StamperIsOn { get; set; }
    [Parameter] public EventCallback<bool> VisibleDialogChanged { get; set; }
    [Parameter] public string? DocumentName { get; set; }
    [Parameter] public FileTypes FileType { get; set; }
    [Parameter] public DirectoryType DirectoryType { get; set; }
    [Parameter] public string? RelativePath { get; set; } = null!;
    [Parameter] public InfoSetFromDocumentToOrder InfoSet { get; set; }
    [Parameter] public EventCallback<byte[]>StampedFileChanged { get; set; }
 public Guid OurCompanyId { get; set; }
    [Parameter] public Guid OrderId { get; set; }
    private DKImageViewerDialog? _imageViewer;
    private MudDialog? _dialog;
    private PdfViewer? _viewer;
    string _pdfContent = "";
    string email;
    string emailSubject;
    string emailMessage;
    bool sendByUser;
    Orientation _tempOrientation;
    [Parameter] public byte[]? PdfDocument { get; set; }
    private bool _isOpenMenuAddedStamps;
    public bool VisiblePdfControl { get; set; }
    private bool _visibleStampImagesDialog;
    private bool _loading;
    private bool _visibleStampPdf;
    private bool _isOpen;
    private bool _successEmail;
    private bool _visibleViewStampedPdfDialog;

    AddStampToPdfRequest StampToPdfRequest { get; set; } = new AddStampToPdfRequest();
    private StampPosition CurrentStampPosition { get; set; } = new StampPosition();
    private byte[]? CurrentStampImage { get; set; }
    private Guid? CurrentStampImageName { get; set; }
    private int _currentPage;
    private int _totalPages;

    int _widthStampGrid;
    int _heightStampGrid;
    int _horizontalLimit;
    int _verticalLimit;

    private string _positionControlPanel = "5px";
    private string _positionToggleButtonControlPanel = "300px";
    private string _displayControl = "100";


    protected override async Task OnInitializedAsync()
    {
        await LoadPdfDocument();
        
       
        emailSubject = $"{InfoSet.Name}";
        var order = await ExportedOrderManager.GetDetailsAsync(OrderId);
        if (order.OurCompanyId != null) OurCompanyId = (Guid)order.OurCompanyId;
        var partnerCompany = order.CompanyBuyer;
        email = order.EmployeeBuyer?.Email;
    }
    private void OpenCloseListAddedStamps()
    {
        _isOpenMenuAddedStamps = !_isOpenMenuAddedStamps;
    }
    private async Task LoadPdfDocument()
    {
        _loading = true;
        if (!string.IsNullOrEmpty(RelativePath))
        {
            PdfDocument = await FilesManager.GetFileInBytArrayAsync(new GetFileRequest()
            {
                DirectoryType = DirectoryType,
                Path = RelativePath
            });
        }
        _pdfContent = Convert.ToBase64String(PdfDocument);
        _loading = false;
    }
    async Task CloseClick(MouseEventArgs eArgs)
    {
        VisibleDialog = false;
        await _dialog!.CloseAsync(DialogResult.Cancel());
        await VisibleDialogChanged.InvokeAsync(VisibleDialog);
    }
    private void OnDocumentLoaded(PdfViewerEventArgs args)
    {
        if (!StamperIsOn)
            return;
        _tempOrientation = _viewer!.Orientation;
        var or = _viewer.Orientation;
        if (or == Orientation.Landscape)
        {
            _heightStampGrid = 595;
            _widthStampGrid = 842;
            _verticalLimit = 83;
            _horizontalLimit = 88;
        }
        else
        {
            _heightStampGrid = 842;
            _widthStampGrid = 595;
            _verticalLimit = 88;
            _horizontalLimit = 83;
        }
        CurrentStampPosition.PageNumber = args.CurrentPage;
        _currentPage = args.CurrentPage;
        _totalPages = args.TotalPages;
    }

    private void OnPageChanged(PdfViewerEventArgs args)
    {
        if (!StamperIsOn)
            return;
        var or = _viewer!.Orientation;
        if (_tempOrientation != or)
        {
            if (or == Orientation.Landscape)
            {
                _heightStampGrid = 595;
                _widthStampGrid = 842;
                _verticalLimit = 83;
                _horizontalLimit = 88;
            }
            else
            {
                _heightStampGrid = 842;
                _widthStampGrid = 595;
                _verticalLimit = 88;
                _horizontalLimit = 83;
            }
        }
        CurrentStampPosition.PageNumber = args.CurrentPage;
        _currentPage = args.CurrentPage;
    }

    private void NextPage()
    {
        var methodInfo = typeof(PdfViewer).GetMethod("NextPageAsync", BindingFlags.NonPublic | BindingFlags.Instance);
        if (methodInfo != null) methodInfo.Invoke(_viewer, null);
    }
    private void PreviousPage()
    {
        var methodInfo = typeof(PdfViewer).GetMethod("PreviousPageAsync", BindingFlags.NonPublic | BindingFlags.Instance);
        if (methodInfo != null) methodInfo.Invoke(_viewer, null);
    }
    private void GetToPage(int cp)
    {
        var methodInfo = typeof(PdfViewer).GetMethod("PageNumberChangedAsync", BindingFlags.NonPublic | BindingFlags.Instance);
        if (methodInfo != null) methodInfo.Invoke(_viewer, new object?[] { cp });
    }
    private double _scale = 1.0;
    private string _scaleString = "1.0";
    private int zoomLevel = 8;
    private int zoomPercentage = 100;
    private void SetZoomPercentage()
    {
        switch (zoomLevel)
        {
            case 1:
                zoomPercentage = 25;
                break;
            case 2:
                zoomPercentage = 33;
                break;
            case 3:
                zoomPercentage = 50;
                break;
            case 4:
                zoomPercentage = 67;
                break;
            case 5:
                zoomPercentage = 75;
                break;
            case 6:
                zoomPercentage = 80;
                break;
            case 7:
                zoomPercentage = 90;
                break;
            case 8:
                zoomPercentage = 100;
                break;
            case 9:
                zoomPercentage = 110;
                break;
            case 10:
                zoomPercentage = 125;
                break;
            case 11:
                zoomPercentage = 150;
                break;
            case 12:
                zoomPercentage = 175;
                break;
            case 13:
                zoomPercentage = 200;
                break;
            case 14:
                zoomPercentage = 250;
                break;
            case 15:
                zoomPercentage = 300;
                break;
            case 16:
                zoomPercentage = 400;
                break;
            case 17:
                zoomPercentage = 500;
                break;
            default:
                zoomPercentage = 100;
                break;
        }
    }
    private void ZoomIn()
    {
        if (zoomLevel >= 14) return;
        var methodInfo = typeof(PdfViewer).GetMethod("ZoomInAsync", BindingFlags.NonPublic | BindingFlags.Instance);
        if (methodInfo != null) methodInfo.Invoke(_viewer, null);
        zoomLevel += 1;
        SetZoomPercentage();
        _scale = ((double)0.01 * (double)zoomPercentage);
        _scaleString = _scale.ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
    }
    private void ZoomOut()
    {
        if (zoomLevel <= 5) return;
        var methodInfo = typeof(PdfViewer).GetMethod("ZoomOutAsync", BindingFlags.NonPublic | BindingFlags.Instance);
        if (methodInfo != null) methodInfo.Invoke(_viewer, null);
        zoomLevel -= 1;
        SetZoomPercentage();
        _scale = 0.01 * (double)zoomPercentage;
        _scaleString = _scale.ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
    }
    private async Task SetStampImage(Guid id)
    {
        CurrentStampImageName = id;

        CurrentStampImage = await ImageManager.GetOneImageInByteArrAsync(id);
        if (!_visibleStampPdf) OpenStampGrid();
    }

    private void ResetZoom()
    {
        var methodInfo = typeof(PdfViewer).GetMethod("ResetZoomAsync", BindingFlags.NonPublic | BindingFlags.Instance);
        if (methodInfo != null) methodInfo.Invoke(_viewer, null);
        _scale = 1.0;
        zoomLevel = 8;
        zoomPercentage = 100;
    }
    private void OpenStampGrid()
    {
        if (CurrentStampImage == null)
        {
            _visibleStampImagesDialog = true;
            return;
        }

        //ResetZoom();
        _visibleStampPdf = true;
        _displayControl = _visibleStampPdf ? "0" : "100";
    }
    private void CloseStampGrid()
    {
        _visibleStampPdf = false;
        //_defaultSize = "";
        _displayControl = "100";
        CurrentStampPosition = new StampPosition();

    }
    private void AddStampPosition(MouseEventArgs args)
    {
        StampToPdfRequest.StampPositionList ??= new List<StampPosition>();
        if (CurrentStampPosition.Id != Guid.Empty)
        {
            StampToPdfRequest.StampPositionList.Remove(StampToPdfRequest.StampPositionList.FirstOrDefault(f => f.Id == CurrentStampPosition.Id)!);
        }
        CurrentStampPosition.StampImageId = CurrentStampImageName;
        CurrentStampPosition.StampImage = CurrentStampImage;
        CurrentStampPosition.PageNumber = _currentPage;
        CurrentStampPosition.Id = Guid.NewGuid();
        StampToPdfRequest.StampPositionList.Add(CurrentStampPosition);

        CloseStampGrid();
        OpenCloseListAddedStamps();
    }
    public void OnToggledChanged(bool toggled)
    {
        // Because variable is not two-way bound, we need to update it ourself
        VisiblePdfControl = toggled;

        _positionControlPanel = !VisiblePdfControl ? "5px" : "-300px";
        _positionToggleButtonControlPanel = !VisiblePdfControl ? "300px" : "10px";
    }
    public async Task GetToStampItem(StampPosition position)
    {
        CurrentStampPosition = position;
        var methodInfo = typeof(PdfViewer).GetMethod("PageNumberChangedAsync", BindingFlags.NonPublic | BindingFlags.Instance);
        if (methodInfo != null) methodInfo.Invoke(_viewer, new object?[] { position.PageNumber });

        if (position.StampImageId != null) await SetStampImage((Guid)position.StampImageId);

        if (!_visibleStampPdf)
            OpenStampGrid();
    }
    public async Task RemoveStampItem(StampPosition position)
    {
        if (!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите удаление")) return;
        StampToPdfRequest.StampPositionList.Remove(position);
    }
    private async void GetDocumentToStamps()
    {
        StampToPdfRequest.InfoSetId = InfoSet.Id;
    // CurrentInfoSet = InfoSets?.FirstOrDefault(f => f.Id == infoSetId);
    // if (CurrentInfoSet == null)return;
        var pdf =  await DocumentManager.AddStampToPdfAsync(StampToPdfRequest);
        OpenCloseListAddedStamps();
        await StampedFileChanged.InvokeAsync(pdf);
    }
    public async Task SendPdfToMessage()
    {
        if (!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите отправку сообщения")) return;
        await MailManager.SendEmail(new SendEmailRequest()
        {
                Emails = [email],
                Message = emailMessage,
                Subject = emailSubject, 
                SendByUser = sendByUser,
                
                Attachments = new Dictionary<string, byte[]>() { { InfoSet.Name, PdfDocument! } }
        });
    }
    private async void SaveDocumentToClientPc()
    {
        if(!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите скачивание"))
            return;
            await _jsRuntime.InvokeVoidAsync
            ("BlazorDownloadFile",  InfoSet.Name + ".pdf", "application/octet-stream", PdfDocument);
    }
}
<style>
    myPdfViwer__container {
    }

    .myPdfControll {
        position: absolute !important;
        top: @_positionControlPanel;
        left: 5px;
        transition: top 1s 0s;
        width: 60px;
        flex-direction: column;
        z-index: @_displayControl;
    }

    .myPdfControll__button {
        width: 50px;
    }

    .myPdfControll__field input {
        text-align: center;
    }

    .myPdfViwer .bg-body-tertiary {
        /*         position: absolute !important;
            top: @_positionControlPanel;
            transition: top 1s 0s;
            width: 60px;
            flex-direction: column;
            border: 1px solid gray;
            z-index: @_displayControl; */
        display: none !important;
    }

        .myPdfViwer .bg-body-tertiary div {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

            .myPdfViwer .bg-body-tertiary div .dropdown {
                display: none;
            }

            .myPdfViwer .bg-body-tertiary div span {
                margin-right: 0 !important;
                margin-left: 0 !important;
            }

    .controll__toggler {
        position: absolute;
        top: @_positionToggleButtonControlPanel;
        left: 0px;
        z-index: @_displayControl;
        transition: top 1s;
    }

    .myPdfViwer .bg-secondary-subtle canvas {
        z-index: 98;
        position: relative;
        height: @($"{(int)(_heightStampGrid * _scale)}px");
        width: @($"{(int)(_widthStampGrid * _scale)}px");
    }

    .pdfDialogButton {
        top: 5px;
        position: absolute;
        right: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .pdfDialogButton__clear {
        z-index: @_displayControl;
    }

    .stamp__editButtons {
        position: relative;
        z-index: 100;
        display: flex;
        align-items: end;
        flex-direction: column;
    }

    .myPdfViewerDialog {
        padding: 0 !important;
        height: 100VH;
    }



    .getIndexPdfDialogButton {
        top: 400px;
        position: absolute;
        right: 10px;
    }

    .stampGrid {
        position: absolute;
        top: 0;
        left: 50%;
        margin-right: -50%;
        transform: translate(-50%, 0%);
        z-index: 100;
    }

    .stampGrid__block {
        display: flex;
        justify-content: center;
        width: 100VW;
    }

    .stampGrid__container {
        /*  display: flex;
            flex-wrap: wrap; */
        position: relative;
    }

    .mySlider {
        z-index: 100;
    }

    .mySlider__vertical .mud-slider-input {
        writing-mode: vertical-rl;
        height: 100%;
        transform: rotate(180deg);
    }

    .mySlider__vertical .mud-slider-container {
        height: @($"{(int)(_heightStampGrid * _scale)}px");
    }

    .mySlider__vertical {
        width: 4px !important;
    }

    .stampItem {
        position: absolute;
        z-index: 99;
        opacity: 0.7;
/*         border: solid black 2px;
        border-radius: 50%; */

    }

    .containerbackground {
        margin: 2rem;
        font-weight: bold;
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        width: 70px;
        z-index: -1;
        transform: rotate(300deg);
        -webkit-transform: rotate(300deg);
        color: black;
    }

    @@media (max-width: 1300px) {
        .myPdfViwer .bg-body-tertiary {
        }

            .myPdfViwer .bg-body-tertiary div {
            }
    }

    @@media (max-width: 717px) {
        .getIndexPdfDialogButton {
            display: none;
        }

        .stamp__editButtons {
            display: none;
        }

        .stampGrid {
            display: none;
        }
    }
</style>