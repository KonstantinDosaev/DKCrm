@using DKCrm.Shared.Constants
@using Microsoft.AspNetCore.SignalR.Client
@using MudBlazor.Services
@inherits LayoutComponentBase
@implements IBrowserViewportObserver
@implements IAsyncDisposable
@inject IBrowserViewportService BrowserViewportService
@inject NavigationManager NavigationManager
@inject CustomStateProvider AuthStateProvider
<audio id="notification" src="/media/notification.mp3"></audio>
<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<div class="page">
    <main>
        <NavMenu UserProfileIsValid="_userProfileIsValid" OnGlobalFilter="@OnGlobalFilter"
                 ResetGlobalFilter="@ResetGlobalFilter"/>
        <CascadingValue Value="_hubConnection">
            <CascadingValue Value="@WindowHeight" Name="WindowHeight">
                <CascadingValue Value="@WindowWidth" Name="WindowWidth">
                    <CascadingValue Value="@GlobalFilterType" Name="GlobalFilterType">
                        <CascadingValue Value="@GlobalFilterValue" Name="GlobalFilterValue">
                            @Body
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </main>
</div>
@functions{
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; } = null!;
    private readonly ApplicationUserModelFluentValidator _applicationUserValidator = new ApplicationUserModelFluentValidator();
    private HubConnection _hubConnection = null!;
    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;
    private string? CurrentUserId { get; set; }
    private List<Guid>? CurrentUserChatGroupsIds { get; set; }
    private bool _userProfileIsValid = true;
    private int WindowWidth { get; set; }
    private int WindowHeight { get; set; }
    private string? GlobalFilterValue { get; set;}
    private int GlobalFilterType { get; set;}
    protected override async Task OnInitializedAsync()
    {
        await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        var state = await _stateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        CurrentUserId = user.Claims.Where(a => a.Type.Contains("nameidentifier")).Select(a => a.Value).FirstOrDefault();
        if (!string.IsNullOrEmpty(CurrentUserId))
        {
            var currentUser = await UserManagerCustom.GetUserDetailsAsync(CurrentUserId);
  
            _userProfileIsValid =  (await _applicationUserValidator.ValidateAsync(currentUser)).IsValid;
            _hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/signalRHub")).WithAutomaticReconnect().Build();
            await _hubConnection.StartAsync();
            _hubConnection.On<string, Guid, string>("ReceiveChatNotification", async (message, chatId, senderUserId) =>
            {
                if (CurrentUserId != senderUserId
                    && CurrentUserChatGroupsIds != null && CurrentUserChatGroupsIds.Contains(chatId))
                {
                    await _jsRuntime.InvokeAsync<string>("PlayAudio", "notification");
                    _snackBar.Add(message, MudBlazor.Severity.Info, config =>
                    {
                        config.VisibleStateDuration = 100000;
                        config.HideTransitionDuration = 500;
                        config.ShowTransitionDuration = 500;
                        config.Action = "Перейти в чат?";
                        config.ActionColor = Color.Info;
                        config.Onclick = snackbar =>
                        {
                            _navigationManager.NavigateTo($"chat/{senderUserId}");
                            return Task.CompletedTask;
                        };
                    });

                    if (currentUser.AreThereNewMessages == false)
                    {
                        currentUser.AreThereNewMessages = true;
                        await UserManagerCustom.UpdateUser(currentUser);
                    }
                }
            });
            // var state = await _stateProvider.GetAuthenticationStateAsync();
            // if (state == null) throw new ArgumentNullException(nameof(state));
            // var user = state.User;
            CurrentUserId = user.Claims.Where(a => a.Type.Contains("nameidentifier")).Select(a => a.Value).FirstOrDefault();
            if (!string.IsNullOrEmpty(CurrentUserId))
            {
                var currentUserChatGroups = await _chatManager.GetAllChatsToUser();
                CurrentUserChatGroupsIds = currentUserChatGroups.Select(s => s.Id).ToList();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!(await AuthenticationState).User.Identity!.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
    }
    async Task LogoutClick()
    {
        await AuthStateProvider.Logout();
        NavigationManager.NavigateTo("/login");
    }
    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 50,
        NotifyOnBreakpointOnly = false
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        WindowWidth = browserViewportEventArgs.BrowserWindowSize.Width;
        WindowHeight = browserViewportEventArgs.BrowserWindowSize.Height;
        return InvokeAsync(StateHasChanged);
    }

    private void OnGlobalFilter((int, string) globalFilter)
    {
        GlobalFilterType = globalFilter.Item1;
        GlobalFilterValue = globalFilter.Item2;
        //var nawUri = "";
        /*switch (GlobalFilterType)
        {
            case (int)GlobalFilterTypes.Product : nawUri = "/product";
                break;
            case (int)GlobalFilterTypes.ExportedOrder : nawUri = "/export_orders";
                break;
            case (int)GlobalFilterTypes.ImportedOrder : nawUri = "/imported_orders";
                break;
            case (int)GlobalFilterTypes.Company : nawUri = "/companies";
                break;
        }*/
        
        _navigationManager.NavigateTo(_navigationManager.Uri, false);
    }
    private void ResetGlobalFilter()
    {
        GlobalFilterValue = null;
        _navigationManager.NavigateTo(_navigationManager.Uri, false);
    }
}