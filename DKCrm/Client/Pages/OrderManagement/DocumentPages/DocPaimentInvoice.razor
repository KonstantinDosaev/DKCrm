@page "/ddd"
@using System.Diagnostics
@using System.Reflection.Metadata.Ecma335
@using DKCrm.Shared.Constants
@using DKCrm.Shared.Models.OrderModels
@inject IDocumentManager Doc

<MudMenu>
    <ActivatorContent>
        <MudButton EndIcon="@Icons.Material.Filled.Add" Color="Color.Success" Variant="Variant.Filled">Создать</MudButton>
    </ActivatorContent>
    <ChildContent>
        <MudButton OnClick="CreateDocument">Счет на оплату</MudButton>
        <MudButton OnClick="OpenCreateSpecificationDialog">Спецификацию</MudButton>
        <MudMenuItem>Armory</MudMenuItem>
    </ChildContent>
</MudMenu>

@if (GroupInfoSet != null)
{
    @foreach (var setList in GroupInfoSet)
    {
        <MudPaper Square="true" Style="background-color: rgba(0, 0, 0, 0.1);" class="d-flex flex-column my-2 p-2">
            @foreach (var set in setList)
            { 
                <MudPaper Elevation="2" class="d-flex align-items-center justify-content-between p-1 my-1">
                    <MudText Class="mr-2">@set.Name</MudText>
                    <div>
                        <MudTooltip Text="Скачать с печатью">
                            <MudIconButton Class="mr-2" Icon="@Icons.Material.Filled.AddTask" Variant="Variant.Outlined"/>
                        </MudTooltip>
                        <MudTooltip Text="Скачать">
                            <MudIconButton Class="mr-2" Icon="@Icons.Material.Filled.Download"
                                           OnClick="() => ClickToSave(set.Id)"
                                           Variant="Variant.Outlined"/>
                        </MudTooltip>
                        <MudTooltip Text="Удалить">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveDocument(set.Id)" Variant="Variant.Outlined"/>
                        </MudTooltip>
                    </div>
                </MudPaper>
            }
        </MudPaper>
    }
}
<MudDialog @bind-IsVisible="_visibleCreateSpecificationDialog" Options="new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium }">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="(() => _visibleCreateSpecificationDialog = false)" Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <MudCard>
    

        </MudCard>
    </DialogContent>
</MudDialog>
@code {

    [Parameter] public Guid OrderId { get; set; } = new Guid("f41f77b1-0b1d-4025-b972-d985d742d772");
    IEnumerable<InfoSetFromDocumentToOrder>? InfoSets { get; set; }
    IGrouping<int,InfoSetFromDocumentToOrder>[]? GroupInfoSet { get; set; }
    InfoSetFromDocumentToOrder? CurrentInfoSet { get; set; }
    CreateOrderSpecificationRequest? CreateOrderSpecificationRequest { get; set; }
    
    private bool _visibleCreateSpecificationDialog;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocInfoList();
    }
    private async Task LoadDocInfoList()
    {
        InfoSets = await DocumentManager.GetAllInfoSetsForOrderAsync(OrderId);
       GroupInfoSet = InfoSets.GroupBy(g => g.DocumentType).ToArray();
        
    }

    private void OpenCreateSpecificationDialog()
    {
        CreateOrderSpecificationRequest = new CreateOrderSpecificationRequest()
        {
            OrderId = OrderId, 
            Conditions = new List<string>(){
                "Базис поставки - франко-склад Покупателя.",
                "Срок поставки с момента подписания настоящей Спецификации Сторонами.",
                "Порядок расчетов: Покупатель производит 100% оплату стоимости Товара надлежащего качества на расчетный" +
                " счет Поставщика в течении ______ банковских дней с момента приемки Товара и подписания обеими сторонами" +
                " товарной накладной (универсального передаточного документа).",
                "Настоящяя Спецификация вступает в силу с момента её подписания Сторонами."
            }, NamingCondition = ""
        };
    }
    private async Task CreateDocument()
    {
        var result = await DocumentManager.CreatePaymentInvoicePdfAsync(OrderId);
       

        await LoadDocInfoList();
    }
    private async Task RemoveDocument(Guid infoSetId)
    {
        if(!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите удаление!!!"))
            return;
        await DocumentManager.RemoveDocumentAsync(infoSetId);
        await LoadDocInfoList();
    }
    private async Task ClickToSave(Guid infoSetId)
    {
       if(!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите скачивание"))
              return;
        CurrentInfoSet = InfoSets?.FirstOrDefault(f => f.Id == infoSetId);
        if (CurrentInfoSet == null)return;
        var bytFile = await DocumentManager.GetDocumentBytArrayAsync(CurrentInfoSet.Id);
            await _jsRuntime.InvokeVoidAsync
                ("BlazorDownloadFile", CurrentInfoSet.Name, "application/octet-stream", bytFile);
    }
    private async Task SaveAsFile()
    {
       
    }

}
