@using DKCrm.Shared.Models.OfferModels
@using DKCrm.Shared.Models.OrderModels
@inject IConfirmationActionService ConfirmationActionService
@if (ImportedProduct != null)
{
    <div class="d-flex flex-column">
        @if (!_editTotalQuantity)
        {
            <div class="d-flex align-items-center">
                <MudText Typo="Typo.button" Class="fw-bold mr-1" Style="color: darkgray">
                    Заказано всего:
                    <span style="color: black">@ImportedProduct.Quantity</span>
                </MudText>
                <MudIconButton Size="@Size.Small" 
                               Disabled="OrderIsLock"
                               OnClick="() => _editTotalQuantity = true" 
                               Icon="@Icons.Material.Outlined.Edit"/> 
            </div>
        }
        else
        {
            <div class="d-flex">
                <MudNumericField T="int" Variant="Variant.Outlined"
                         For="@(() => ImportedProduct.Quantity)"
                         Immediate="true"
                         FullWidth="false"
                         Margin="Margin.Dense"
                         Min="QuantityInReserveAll"
                         Max="@_freeQuantityOffer"
                         @bind-Value="ImportedProduct.Quantity" />
                <MudButton OnClick="UpdateTotalQuantity">Сохранить</MudButton>
                <MudButton OnClick="ResetEditTotalQuantity">Отменить</MudButton>
            </div>
        }
        @if (PriceForImportOffer != null)
        {
	        <div class="p-2">
		        <MudText Typo="Typo.button" Class="fw-bold mr-1" Style="color: darkgray">
			        Предложение:
		        </MudText>
		        <div class="mb-1 border-bottom">
			        <MudText Class="px-3" style="background-color: rgba(18, 9, 62, 0.18)">
				        @($"{PriceForImportOffer.DateTimeCreate.ToShortDateString()} - {PriceForImportOffer.DateTimeOver?.ToShortDateString()}")
			        </MudText>
			        <MudText Class="px-3" style="background-color: rgba(18, 9, 62, 0.18)">
				        @($"Колю-во: {PriceForImportOffer.Quantity} шт. / Своб.: {PriceForImportOffer.Quantity - (PriceForImportOffer.ImportedProducts?.Select(s => s.Quantity).Sum() ?? 0)}")
			        </MudText>
			        <div class="d-flex justify-content-between px-2">
				        <MudText>@($"{decimal.Round(PriceForImportOffer.Value, 4)}")</MudText>
				        <MudText>@($"{PriceForImportOffer.Currency}")</MudText>
			        </div>
			        <div class="d-flex justify-content-between px-2">
				        <MudText>@($"{decimal.Round(PriceForImportOffer.ValueLocal, 4)}")</MudText>
				        <MudText>@($"{PriceForImportOffer.CurrencyLocal}")</MudText>
			        </div>
		        </div>
	        </div>
        }
        <MudText Typo="Typo.button" Class="fw-bold" Style="color: darkgray">
            Зарезервировано:
            <span style="color: black; margin-right: 1rem">@QuantityInReserveAll</span>
            @if (MissingQuantity != 0)
            {
                <span style="color: green">(Свободно: @MissingQuantity)</span>
            }
            else
            {
                <span style="color: darkgray">(Свободно: @MissingQuantity)</span>
            }
        </MudText>
    </div>
    <MudText Typo="Typo.h6">Наличие:</MudText>
    @if (StorageList != null && StorageList.Any())
    {
        <table class="table table-bordered table-striped table-sm">
            <thead>
                <tr style="background-color: rgba(0, 169, 255, 0.388)">
                    <th scope="col">Склад</th>
                    <th scope="col" style="width: 150px">Количество в наличии</th>
                    <th scope="col" style="width: 150px">Зарезервировано</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in StorageList)
                {

                    <tr>
                        <td>@item.Storage?.Name</td>
                        <td>@item.Quantity</td>
                        <td class="d-flex align-items-center justify-content-center">
                            @if (ImportedProduct.PurchaseAtStorageList != null 
                                 && ImportedProduct.PurchaseAtStorageList.Select(s => s.StorageId)
                                     .Contains((Guid)item.StorageId!))
                            {
                                var quantitySoldFromStorage = ImportedProduct!.PurchaseAtStorageList!
                                    .FirstOrDefault(f => f.ImportedProductId == ImportedProduct.Id 
                                                         && f.StorageId == item.StorageId)!.Quantity;
                                <MudNumericField T="int" Variant="Variant.Outlined"
                                 For="@(() => item.Quantity)"
                                 Immediate="true"
                                 FullWidth="false"
                                 Margin="Margin.Dense"
                                 Min="0"
                                 Max="@((MissingQuantity > item.Quantity ? item.Quantity : MissingQuantity) + quantitySoldFromStorage)"
                                 ValueChanged="@(v => SetFromStorageQuantity(v, (Guid)item.StorageId!))"
                                 Value="quantitySoldFromStorage" Clearable="true" />
                            }
                            else
                            {
                                <MudIconButton Disabled="MissingQuantity <= 0 || OrderIsLock"
                                               Color="Color.Primary"
                                               Style="width: 100%; height: 100%"
                                               OnClick="@(() => SetFromStorageQuantity((MissingQuantity > item.Quantity ? item.Quantity : MissingQuantity), (Guid)item.StorageId!))"
                                               Variant="Variant.Outlined" Icon="@Icons.Material.Filled.ArrowCircleDown"/>
                            }
                            @if (EditedQuantity.Contains((Guid)item.StorageId!) & _errorUpdate)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Error" />
                            }

                        </td>
                    </tr>
                }
                <tr style="background-color: rgba(100, 255, 0, 0.388)">
                    <th colspan="3" style="text-align: end">
                        ВСЕГО:
                        @if (ImportedProduct.PurchaseAtStorageList != null)
                        {
                            @ImportedProduct.PurchaseAtStorageList.Select(s => s.Quantity).Sum()
                        }
                    </th>
                </tr>
            </tbody>
        </table>
    }
    else
    {
        <MudText Typo="Typo.body1">продукт отсутствует</MudText>
    }
    @if (NotEquippedExportedProducts != null && NotEquippedExportedProducts.Any())
    {
        <MudText Typo="Typo.h6">Экспорт:</MudText>
        <table class="table table-bordered table-striped table-sm">
            <thead>
                <tr style="background-color: rgba(0, 169, 255, 0.388)">
                    <th>№ заказа</th>
                    <th style="width: 150px">Требуется</th>
                    <th style="width: 150px">Зарезервировано</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var exportedProduct in NotEquippedExportedProducts)
                {
                    var notEquippedQuantity = exportedProduct.Quantity - (exportedProduct.PurchaseAtExports?.Select(s => s.Quantity).Sum() + exportedProduct.SoldFromStorage?.Select(s => s.Quantity).Sum()) ?? 0;
                    <tr>
                        <td>@exportedProduct.ExportedOrder?.Number
                            @if (@exportedProduct.ExportedOrderId != null && !IsDoubleNested)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Info"
                                               Size='Size.Small'
                                               OnClick="@(() => OpenExportedOrderPopover((Guid)exportedProduct.ExportedOrderId))"/>
                            }</td>
                        <td>@notEquippedQuantity</td>
                        <td class="d-flex align-items-center">
                            @if (ImportedProduct.PurchaseAtExportList != null 
                                 && ImportedProduct.PurchaseAtExportList.Select(s => s.ExportedProductId)
                                     .Contains(exportedProduct.Id))
                            {
                                var quantityPurchaseAtExport = ImportedProduct.PurchaseAtExportList
                                    .FirstOrDefault(f => f.ImportedProductId == ImportedProduct.Id && f.ExportedProductId == exportedProduct.Id)!.Quantity;
                                <MudNumericField T="int" Variant="Variant.Outlined"
	                                 For="@(() => quantityPurchaseAtExport)"
	                                 Immediate="true"
	                                 Margin="Margin.Dense"
	                                 Min="0"
	                                 Max="@((MissingQuantity > notEquippedQuantity ? notEquippedQuantity : MissingQuantity) + quantityPurchaseAtExport)"
	                                 ValueChanged="@(v => SetPurchaseAtExportQuantity(v, exportedProduct.Id))"
	                                 Value="quantityPurchaseAtExport" Clearable="true" />
                            }
                            else
                            {
	                            <MudIconButton Disabled="MissingQuantity <= 0 || OrderIsLock"
	                                           Color="Color.Primary"
	                                           Style="width: 100%; height: 100%"
	                                           OnClick="() => SetPurchaseAtExportQuantity((MissingQuantity > notEquippedQuantity ? notEquippedQuantity : MissingQuantity), exportedProduct.Id)"
	                                           Variant="Variant.Outlined" Icon="@Icons.Material.Filled.ArrowCircleDown"/>
                            }
                            @if (EditedQuantity.Contains(exportedProduct.Id) & _errorUpdate)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Error" />
                            }

                        </td>
                    </tr>
                }
                @if (ImportedProduct.PurchaseAtExportList != null)
                {
                    <tr style="background-color: rgba(100, 255, 0, 0.388)">
                        <th colspan="3" style="text-align: end">
                            ВСЕГО:
                            @ImportedProduct.PurchaseAtExportList.Select(s => s.Quantity).Sum()
                        </th>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <MudText Typo="Typo.body1">заказы с данным продуктом отсутствуют</MudText>
    }


}
<div class="d-flex justify-content-end mb-3">
	@if (_errorUpdate)
	{
		<MudText Color="Color.Error">Возникла ошибка при обновлении</MudText>
	}
	@if (EditedQuantity != null && EditedQuantity.Any())
	{
		<MudButton Color="Color.Primary"
		           OnClick="() => UpdateSources()"
		           Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Check">Сохранить</MudButton>
	}
	@*    @if (EditedQuantity!.Any())
    {
    <MudButton OnClick="(async () => await CancelEditCallback.InvokeAsync())" Color="Color.Info">отменить</MudButton>
    }*@
</div>
@if (_visibleExportedOrder)
{
	<MudDialog @bind-Visible="_visibleExportedOrder" Style="padding: 0"
	           Options="new DialogOptions(){CloseButton = true, FullScreen = true,}" Class="no-padding">
		<DialogContent>
            <ExportOrderDetailsComponent Id="ShowingExportOrderId"
                                         CurrencyDisplay="@(new[] { "Сделки" })" 
			                             ShowCompanyInfo="true"
			                             IsDoubleNested="true"/>
		</DialogContent>
	</MudDialog>
}
@code
{
    [Parameter] public bool IsDoubleNested { get; set; }
    [Parameter] public EventCallback CancelEditCallback { get; set; }
    [Parameter] public EventCallback RefreshParentCallback { get; set; }
    [Parameter] public ImportedProduct? ImportedProduct { get; set; }
    [Parameter] public Guid? ActualExportOrderId { get; set; }
    [Parameter] public bool OrderIsLock { get; set; }
    private List<PurchaseAtStorage>? BackupPurchaseAtStorage { get; set; }
    private List<PurchaseAtExport>? BackupPurchaseAtExport { get; set; }
    public List<ProductsInStorage>? StorageList { get; set; }
    private List<ExportedProduct>? NotEquippedExportedProducts { get; set; }
    private ImportedProduct? CreatedImportedProduct { get; set; }
    private Guid ShowingExportOrderId { get; set; }
    private int MissingQuantity { get; set; }
    private int QuantityInReserveAll { get; set; }
    private List<Guid> EditedQuantity { get; set; } = new();

    private List<ImportOffer>? ImportOfferList { get; set; }
    private List<PriceForImportOffer>? ImportOfferCurrentPriceList { get; set; }
    private PriceForImportOffer? PriceForImportOffer { get; set; }
    private Guid? editedPriceId;
    private ImportProductPriceImportOffer? editedPrice;
    private double? _backupOfferQuantity;
    private double? _allSelectedFromOffers;
    private int _freeQuantityOffer = Int32.MaxValue;

    private bool _errorUpdate;
    private bool _soldFromStorageIsEdit;
    private bool _loadProduct;
    private bool _editTotalQuantity;
    private int _backupTotalQuantity;
    private bool _visibleAddImportedProductDialog;
    private bool _visibleExportedOrder;

    protected override void OnInitialized()
    {
        SetBackup();
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && !_loadProduct && ImportedProduct != null)
        {
            _loadProduct = true;
            CalculateQuantity();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!_loadProduct && ImportedProduct is { Product.ProductsInStorage: { } })
            StorageList = ImportedProduct.Product.ProductsInStorage.ToList();

        NotEquippedExportedProducts ??= await ExportedProductManager.GetNotEquippedAsync((Guid)ImportedProduct?.ProductId!);
        if (ActualExportOrderId != null)
        {
            NotEquippedExportedProducts = NotEquippedExportedProducts.Where(w => w.ExportedOrderId == ActualExportOrderId).ToList();
        }
        if (ImportedProduct.PriceForImportOffer != null)
        {
	        var offer = await ImportOfferManager.GetDetailsAsync((Guid)ImportedProduct.PriceForImportOffer.ImportOfferId);

	        PriceForImportOffer = offer.PricesForImportOffer.FirstOrDefault(f=>f.Id == ImportedProduct.PriceForImportOfferId);

	       _freeQuantityOffer = ImportedProduct.Quantity +
	                           ((int)PriceForImportOffer.Quantity - (PriceForImportOffer.ImportedProducts?.Select(s => s.Quantity).Sum() ?? 0));

        }
        CalculateQuantity();
        // var response = await ImportOfferManager.GetBySortFilterPaginationAsync(new SortPagedRequest<FilterOfferTuple>()
        // {
	       //  PageIndex = 0,
	       //  PageSize = Int32.MaxValue,
	       //  FilterTuple = new FilterOfferTuple()
	       //  {
		      //   ProductId = (Guid)ImportedProduct?.ProductId!,
	       //  },
        // }, new CancellationToken(false));
        // ImportOfferList = (List<ImportOffer>?)response.Items;
        // if (ImportOfferList != null) 
	       //  ImportOfferCurrentPriceList = ImportOfferList.Where(w=>w.PricesForImportOffer!= null)
		      //   .Select(s => s.PricesForImportOffer!.MaxBy(o => o.DateTimeOver)!).ToList();
    }

    private void SetBackup()
    {
        _backupTotalQuantity = ImportedProduct!.Quantity;
        if (ImportedProduct is { PurchaseAtStorageList: { } })
            BackupPurchaseAtStorage = ImportedProduct.PurchaseAtStorageList.Select(s => new PurchaseAtStorage()
                {
                    StorageId = s.StorageId,
                     ImportedProductId= s.ImportedProductId,
                    Quantity = s.Quantity
                }).ToList();
        if (ImportedProduct is { PurchaseAtExportList: { } })
            BackupPurchaseAtExport = ImportedProduct.PurchaseAtExportList.Select(s => new PurchaseAtExport()
                {
                    ImportedProductId = s.ImportedProductId,
                    ExportedProductId = s.ExportedProductId,
                    Quantity = s.Quantity
                }).ToList();
    }
    private async Task UpdateTotalQuantity()
    {
        if (!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите сохранение"))
            return;
        if (ImportedProduct != null)
        {

            if (await ImportedProductManager.UpdateAsync(ImportedProduct))
            {
                SetBackup();
                CalculateQuantity();
                await RefreshParentCallback.InvokeAsync();
            }
            else
            {
                ResetEditTotalQuantity();
            }
            _editTotalQuantity = false;
        }

    }
    private void ResetEditTotalQuantity()
    {
        if (ImportedProduct == null) return;
        ImportedProduct.Quantity = _backupTotalQuantity;
        _editTotalQuantity = false;
    }

    private async Task ReloadExportedProduct()
    {
        ImportedProduct = await ImportedProductManager.GetDetailsAsync(ImportedProduct!.Id);
        if (ImportedProduct is { Product.ProductsInStorage: { } })
            StorageList = ImportedProduct.Product.ProductsInStorage.ToList();
        SetBackup();
        await InvokeAsync(StateHasChanged);
    }

    private void SetFromStorageQuantity(int quantity, Guid storageId)
    {
        var purchaseAtStorageInDb = ImportedProduct!.PurchaseAtStorageList?.FirstOrDefault(f => f.StorageId == storageId);
        var quantityInBackup = 0;
        if (BackupPurchaseAtStorage != null && BackupPurchaseAtStorage.Any())
        {
            var backupPurchaseAtStorage = BackupPurchaseAtStorage.FirstOrDefault(f => f.StorageId == storageId);
            quantityInBackup = backupPurchaseAtStorage?.Quantity ?? quantityInBackup;
        }
        if (purchaseAtStorageInDb != null)
        {
            if (purchaseAtStorageInDb.Quantity == quantity)
            {
                EditedQuantity.Remove(storageId);
                return;
            }
            purchaseAtStorageInDb.Quantity = quantity;
        }
        else
        {
            if (quantity < 0)
                return;
            ImportedProduct!.PurchaseAtStorageList ??= new List<PurchaseAtStorage>();
            ImportedProduct!.PurchaseAtStorageList.Add(new PurchaseAtStorage()
            {
                StorageId = storageId,
                ImportedProductId = ImportedProduct.Id,
                Quantity = quantity
            });
        }

        CalculateQuantity();
        if (!EditedQuantity.Contains(storageId) && quantityInBackup != quantity)
            EditedQuantity.Add(storageId);
        if (quantityInBackup == quantity)
            EditedQuantity.Remove(storageId);
        StateHasChanged();
    }
    private void SetPurchaseAtExportQuantity(int quantity, Guid exportedProductId)
    {
        var exportedProduct = NotEquippedExportedProducts?.FirstOrDefault(f => f.Id == exportedProductId);
        var quantityInBackup = 0;
        if (BackupPurchaseAtExport != null)
        {
            var backupPurchase = BackupPurchaseAtExport.FirstOrDefault(f => f.ExportedProductId == exportedProductId);
            quantityInBackup = backupPurchase?.Quantity ?? 0;
        }
        if (exportedProduct != null)
        {
            var purchaseInDb = ImportedProduct!.PurchaseAtExportList?.FirstOrDefault(f => f.ExportedProductId == exportedProductId);
           
            if (purchaseInDb != null)
            {
                if (purchaseInDb.Quantity == quantity)
                {
                    EditedQuantity.Remove(exportedProductId);
                    return;
                }
                purchaseInDb.Quantity = quantity;
                exportedProduct!.PurchaseAtExports!.FirstOrDefault(f => f.ExportedProductId == exportedProductId)!.Quantity = quantity;
            }
            else
            {
                var tempPurchase = new PurchaseAtExport()
                    {
                        ExportedProductId = exportedProductId,
                        ImportedProductId = ImportedProduct!.Id,
                        Quantity = quantity
                    };
                exportedProduct.PurchaseAtExports ??= new List<PurchaseAtExport>();
                exportedProduct.PurchaseAtExports.Add(tempPurchase);
                ImportedProduct.PurchaseAtExportList ??= new List<PurchaseAtExport>();
                ImportedProduct.PurchaseAtExportList.Add(tempPurchase);
            }
        }

        CalculateQuantity();
        if (!EditedQuantity.Contains(exportedProductId) && quantityInBackup != quantity)
            EditedQuantity.Add(exportedProductId);
        if (quantityInBackup == quantity)
            EditedQuantity.Remove(exportedProductId);
        StateHasChanged();
    }
    private async Task UpdateSources()
    {
        var confirm = await ConfirmationActionService.ConfirmationActionAsync("Подтвердите сохранение");
        if (!confirm) return;
        if (await ImportedProductManager.UpdateSourcesOrderItems(ImportedProduct!))
        {
            _snackBar.Add($"Изменения сохранены");
            EditedQuantity.Clear();
            await ReloadExportedProduct();
            await RefreshParentCallback.InvokeAsync();
        }
        else
            _errorUpdate = true;
    }
    private void SaveSoldFromStorage(Guid storageId)
    {
        //var soldFromStorage = ImportedProduct!.SoldFromStorage!.FirstOrDefault(f => f.StorageId == storageId);
        //soldFromStorage!.ExportedProduct = ExportedProduct;
        //if (await StorageManager.ReserveAProductAsync(soldFromStorage!))
        //{
        //    _snackBar.Add($"Зарезервировано {soldFromStorage!.Quantity} шт.");
        //    _soldFromStorageIsEdit = false;
        //}
    }

    private void CalculateQuantity()
    {
        QuantityInReserveAll = 0;
        if (ImportedProduct!.PurchaseAtStorageList != null)
            QuantityInReserveAll += ImportedProduct.PurchaseAtStorageList.Select(s => s.Quantity).Sum();

        if (ImportedProduct.PurchaseAtExportList != null)
            QuantityInReserveAll += ImportedProduct.PurchaseAtExportList.Select(s => s.Quantity).Sum();

        MissingQuantity = ImportedProduct.Quantity - QuantityInReserveAll;
    }         
    private void OpenExportedOrderPopover(Guid exportedOrderId)
    {
    //CloseAllPopover();
        ShowingExportOrderId = exportedOrderId;
        _visibleExportedOrder = true;
    }
    
    @*private void SetOfferToImportedProduct(double quantity, PriceForImportOffer price)
    {
        if (editedPriceId != null && editedPriceId != price.Id) return;
        if (_backupOfferQuantity == null)
        {
            if (price.ImportProductPriceImportOffers != null)
            {
                var o = price.ImportProductPriceImportOffers.
                    FirstOrDefault(f => f.ImportedProductId == ImportedProduct!.Id)!.Quantity;
                _backupOfferQuantity = o != null ? o : 0;
            }
            else
            {
                _backupOfferQuantity = 0;
            }
        }
        if (editedPrice == null)
        {

            var pr = price.ImportProductPriceImportOffers != null ? price.ImportProductPriceImportOffers
                    .FirstOrDefault(f => f.ImportedProductId == ImportedProduct!.Id) : null;


            if (pr != null)
            {
                editedPriceId = price.Id;
                editedPrice = pr;

                if (editedPrice.Quantity > quantity)
                    _allSelectedFromOffers -= editedPrice.Quantity - quantity;
                else
                {
                    var tempAll = _allSelectedFromOffers + quantity - editedPrice.Quantity;
                    if (_allSelectedFromOffers >= MissingQuantity)
                        return;
                    _allSelectedFromOffers = tempAll;
                }

                editedPrice!.Quantity = quantity;
            }
            else
            {
                editedPriceId = price.Id;
                editedPrice = new ImportProductPriceImportOffer()
                    {
                        ImportedProductId = ImportedProduct!.Id,
                        Quantity = quantity,
                        PriceId = price.Id
                    };
                if (_allSelectedFromOffers + quantity >= MissingQuantity)
                    return;

                _allSelectedFromOffers += quantity;
                price.ImportProductPriceImportOffers ??= new List<ImportProductPriceImportOffer>();
                price.ImportProductPriceImportOffers.Add(editedPrice);
            }
        }
        else
        {
            if (editedPrice.Quantity > quantity)
                _allSelectedFromOffers -= editedPrice.Quantity - quantity;
            else
            {
                var tempAll = _allSelectedFromOffers + quantity - editedPrice.Quantity;

                if (_allSelectedFromOffers >= MissingQuantity)
                    return;
                _allSelectedFromOffers = tempAll;
            }

            editedPrice!.Quantity = quantity;
            /*if (quantity == 0)
            {
                editedPrice = null;
                editedPriceId = null;
                _backupOfferQuantity = null;
                }*/
        }


    }
    private async Task AddOfferToImportedProduct()
    {
        if (editedPrice == null) return;

        if (await ConfirmationActionService.ConfirmationActionAsync("Подтвердите изменение"))
        {
            await ImportOfferManager.AddOfferToImportOrderAsync(editedPrice);
            editedPrice = null;
            editedPriceId = null;
            _backupOfferQuantity = null;
        }
    }
    private void ResetEditPrice(PriceForImportOffer price)
    {
	    editedPrice = null;
	    editedPriceId = null;
	    var old = ImportOfferCurrentPriceList!.FirstOrDefault(s => s.Id == price.Id);

	    if (old != null)
	    {
		    if (old.ImportProductPriceImportOffers != null) old.ImportProductPriceImportOffers
			    .FirstOrDefault(f => f.ImportedProductId == ImportedProduct!.Id)!.Quantity = _backupOfferQuantity ?? 0;

	    }
	    _backupOfferQuantity = null;
	    CalculateQuantity();
    }*@



    private  void CreateImportedProduct()
    {
        //CreatedImportedProduct = new ImportedProduct()
        //    {
        //        Product = ExportedProduct!.Product,
        //        ProductId = ExportedProduct.ProductId,
        //        ExportedProducts = new List<ExportedProduct>() { ExportedProduct! },
        //        Quantity = MissingQuantity
        //    };
        //CreatedImportedProduct.PurchaseAtExportList = new List<PurchaseAtExport>()
        //{
        //    new()
        //    {
        //        ExportedProduct = ExportedProduct,
        //        ExportedProductId = ExportedProduct!.Id,
        //        Quantity = MissingQuantity,
        //        ImportedProduct = CreatedImportedProduct,
        //        ImportedProductId = CreatedImportedProduct.Id
        //    }
        //};
        //if (await ImportedProductManager.AddAsync(CreatedImportedProduct))
        //{
        //    _snackBar.Add($"Шаблон на импорт создан");
        //    await ReloadExportedProduct();
        //    CalculateQuantity();
        //}
    }

    //private async void RemoveSoldFromStorage(SoldFromStorage soldFromStorage)
    //{
    //    if (ExportedProduct == null) return;
    //    if (await StorageManager.CancelReserveAProductAsync(soldFromStorage))
    //    {
    //        _snackBar.Add($"Отменена резервация {soldFromStorage.Quantity} шт.");

    //    }
    //    ExportedProduct.StorageList!.Remove(soldFromStorage.Storage!);
    //    ExportedProduct.SoldFromStorage!.Remove(soldFromStorage);
    //    await InvokeAsync(StateHasChanged);
    //}

    //private async void AddPurchaseAtExport(ImportedProduct importedProduct)
    //{
    //    if (ExportedProduct != null)
    //    {
    //        ExportedProduct.PurchaseAtExports ??= new List<PurchaseAtExport>();
    //        ExportedProduct.ImportedProducts ??= new List<ImportedProduct>();
    //        ExportedProduct.ImportedProducts.Add(importedProduct);
    //        ExportedProduct.PurchaseAtExports.Add(new PurchaseAtExport()
    //            {
    //                ExportedProduct = ExportedProduct,
    //                ExportedProductId = ExportedProduct.Id,
    //                ImportedProduct = importedProduct,
    //                ImportedProductId = importedProduct.Id
    //            });
    //    }
    //    await InvokeAsync(StateHasChanged);
    //}
    //private async void RemovePurchaseAtExport(PurchaseAtExport purchaseAtExport)
    //{
    //    if (ExportedProduct != null)
    //    {
    //        ExportedProduct.ImportedProducts!.Remove(purchaseAtExport.ImportedProduct!);
    //        ExportedProduct.PurchaseAtExports!.Remove(purchaseAtExport);
    //    }
    //    await InvokeAsync(StateHasChanged);
    //}
}
