@using Microsoft.AspNetCore.SignalR.Client
@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Shared.Requests
@using DKCrm.Shared.Requests.OrderService
@page "/comments/{CurrentOrderId:guid}"
<div  Class="pb-4 d-flex flex-column" Style="height: 95vh">
    <MudToolBar Dense="true" Class="d-flex justify-content-between">
    @*       <div class="d-flex align-items-center">
            @if (CurrentChatGroup != null)
            {
                <MudText>@(CurrentChatGroup.IsPrivateGroup ? CurrentChatGroup.ApplicationUsers?.FirstOrDefault(f => f.Id != CurrentUser!.Id)?.UserName : CurrentChatGroup.Name)</MudText>
            }
        </div>*@
    <div class="d-flex align-items-center">
        <MudSwitch T="bool"  ValueChanged="SetMultiSelect" 
                   Size="Size.Medium" ThumbIcon="@Icons.Material.Filled.Check" Label=""
                   Color="Color.Info" UncheckedColor="Color.Default" Class="mr-2" />
       
        @if (SelectedValues.Any())
        {
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
                       OnClick="() => OnButtonDeleteClicked(SelectedValues)" Style="margin-right: 1rem;">Удалить</MudButton>
        }
        
        <MudMenu Icon="@Icons.Material.Filled.MoreVert">
            <MudMenuItem>
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Delete"
                           Color="Color.Error"
                           OnClick="() => OnButtonDeleteClicked(_comments.Select(s => s.Id))"
                           Style="justify-self: flex-start">Очистить переписку</MudButton>
            </MudMenuItem>
        </MudMenu>
    </div>
    <MudTooltip Text="Показать только важные">
        <MudToggleIconButton ToggledChanged="FilterWarningComments" Toggled="_isShowOnlyWarningComment"
                             Icon="@Icons.Material.Filled.WarningAmber" Color="@Color.Surface" Title="Off"
                             ToggledIcon="@Icons.Material.Filled.WarningAmber" ToggledColor="@Color.Error" 
                             ToggledTitle="On"/>
    </MudTooltip>
    </MudToolBar>
    <div class="d-flex flex-column px-4 pt-4 flex-grow-1" style="overflow-y: scroll;" id="commentOrderContainer">
        <MudLink  Color="Color.Dark" Underline="Underline.None"
                   OnClick="LoadMoreComments" 
                   Size="Size.Small" Class="link_loadMoreComment"
                   Disabled="@(_comments.Count >= _totalItems)">загрузить ещё</MudLink>
        @foreach (var message in _comments)
        {
            var borderColor = message.IsWarningComment ? "solid red" : "solid 1px rgba(181, 181, 181, 0.361)";
            var user = ChatUsers.FirstOrDefault(f => f.Id == message.FromUserId);

            <div class="my-2" style="@($"padding: 5px 15px; background-color: whitesmoke;border-radius: 5px; border: {borderColor}; overflow-wrap: break-word")">
                <div class="d-flex justify-content-between">
                    <MudText Class="px-1" Typo="Typo.body2" Style="font-weight: bold; color: gray; background-color: lightsalmon; border-radius: 5px; width: max-content">@user?.UserName</MudText>
                    <div>
                        @if (message.IsWarningComment)
                        {
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.WarningAmber"
                                     Color="@Color.Error" ToggledTitle="On"/>
                        }
                        <MudMenu Dense="true" FullWidth="false">
                            <ActivatorContent>
                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.MoreVert"></MudIconButton>
                            </ActivatorContent>
                            <ChildContent>
                                <div class="px-4 py-2">
                                    <MudToggleIconButton
                                        Size="Size.Medium" Toggled="@message.IsWarningComment" 
                                        ToggledChanged="(s) => SetWarningFlagToComment(s, message)"
                                        Icon="@Icons.Material.Filled.WarningAmber" Color="@Color.Surface"
                                        ToggledIcon="@Icons.Material.Filled.WarningAmber" ToggledColor="@Color.Error" 
                                        нToggledTitle="On"/>
                                </div>
                            </ChildContent>
                        </MudMenu>
                    </div>
                </div>
                <MudText Typo="Typo.body2" Style="">@message.Value</MudText>
                <MudText Typo="Typo.caption" Style="font-size: xx-small !important; margin-right: 1rem;">
                    @($"доб. {message.DateTimeCreated.ToString("dd MMM, yyyy HH:mm")} / ред. {message.DateTimeUpdate.ToString("dd MMM, yyyy HH:mm")}")
                </MudText>
                @if (_multiSelect && message.FromUserId == CurrentUser?.Id)
                {
                    <input disabled="@message.IsWarningComment" type="checkbox" @onchange="eventArgs => { CheckboxClicked(message.Id, eventArgs.Value!); }"/>
                }
            </div>

        }
    </div>

    <div class="d-flex align-items-center justify-content-between">
        <MudTextField T="string" Placeholder="Введите сообщение..." Variant="Variant.Outlined" Lines="3" MaxLines="3" AutoGrow="true" Class="field-item mx-4"
                      @bind-Value="CurrentMessage" For="@(() => CurrentMessage)" />
        <MudToggleIconButton @bind-Toggled="@_isWarningComment"
                             Icon="@Icons.Material.Filled.OutlinedFlag" Color="@Color.Surface" Title="Off"
                             ToggledIcon="@Icons.Material.Filled.Flag" ToggledColor="@Color.Error" ToggledTitle="On"/>
        <MudIconButton Variant="Variant.Filled" OnClick="SubmitAsync" Icon="@Icons.Material.Outlined.Send"
                       Color="Color.Dark"
                       ButtonType="ButtonType.Button"
                       Class="h-50 mr-3"></MudIconButton>
    </div>
</div>

@code {
    [Parameter] public Guid CurrentOrderId { get; set; }
    [CascadingParameter] public HubConnection? HubConnection { get; set; }
    [Parameter] public string CurrentMessage { get; set; } = null!;
    [Parameter] public string OrderType { get; set; } = null;
    public ApplicationUser? CurrentUser { get; set; }
    private List<CommentOrder> _comments = new();
    private List<CommentOrder> _tempComments = new();
    public List<ApplicationUser> ChatUsers = new();
    public List<Guid> SelectedValues = new();
    private int _pageIndex = 0;
    private int _totalItems;  
    private int _pageSize = 3;
    private bool _multiSelect;
    private bool _isWarningComment; 
    private bool _isShowOnlyWarningComment;
    private bool _renderNotScroll;

    protected override async Task OnInitializedAsync()
    {
        var state = await _stateProvider.GetAuthenticationStateAsync();
        var user = state.User.Claims.Where(a => a.Type.Contains("nameidentifier")).Select(a => a.Value).FirstOrDefault()!;
        CurrentUser = await UserManagerCustom.GetUserDetailsAsync(user);

        HubConnection ??= new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/orderCommentHub")).Build();
        if (HubConnection.State == HubConnectionState.Disconnected)
            await HubConnection.StartAsync();
        
        HubConnection.On<CommentOrder, string>("ReceiveComment", async (comment, userName) =>
        {
            if (CurrentOrderId == comment.OrderId)
            {
                _comments.Add(comment); 
                StateHasChanged();
                await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "commentOrderContainer");
              
            }
            //else if (CurrentUserChatGroupsIds != null && CurrentUserChatGroupsIds.Contains(message.ToChatGroupId))
            //{
            //    await GetChatGroupsAsync();
            //    await HubConnection.SendAsync("ChatNotificationAsync", $"Новое сообщение от {userName}", message.ToChatGroupId, message.FromUserId);
            //    StateHasChanged();
           // }
        });
        HubConnection.On<Guid>("ReceiveCommandToReloadCommentList", async (orderId) =>
        {
            if (CurrentOrderId == orderId)
            {
                await LoadComments(orderId);
                await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "commentOrderContainer");
                _snackBar.Add("Изменения в комментариях");
                 StateHasChanged();
            }
        });
        await GetUsersAsync();
        await LoadComments(CurrentOrderId);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (CurrentOrderId != Guid.Empty && !SelectedValues.Any() && _renderNotScroll == false)
        {
            await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "commentOrderContainer");
            _renderNotScroll = false;
        }
    }

    private async Task SubmitAsync()
    {
        if (!string.IsNullOrEmpty(CurrentMessage))
        {
            var chatHistory = new CommentOrder ()
                {
                    Value = CurrentMessage,
                    OrderId = CurrentOrderId,
                    FromUserId = CurrentUser!.Id,
                    DateTimeCreated = DateTime.Now, 
                    IsWarningComment = _isWarningComment, 
                    OrderType = OrderType
                };
            await CommentOrderManager.SaveCommentAsync(chatHistory);
            if (HubConnection != null)
                await HubConnection.SendAsync("SendCommentAsync", chatHistory, CurrentUser.UserName);
            CurrentMessage = string.Empty;
            _isWarningComment = false;
        }
    }

    private async Task LoadComments(Guid orderId)
    {
        CurrentOrderId = orderId;
        _pageIndex = 0;
        _totalItems = 0;  
        var response = await CommentOrderManager.GetAllForOrderAsync(new GetCommentsForPaginationRequest()
        {
            ComponentOwnerId = orderId, PageIndex = 0, PageSize = _pageSize, GetOnlyWarningComments = _isShowOnlyWarningComment
        });
        if (response.Items != null)
        {
            _comments = response.Items.ToList();
            _totalItems = response.TotalItems;
            if (CurrentUser != null)
                await CommentOrderManager.SetLogUsersVisitAsync(new LogUsersVisitToOrderComments()
                {
                    OrderOwnerCommentsId = orderId,
                    DateTimeVisit = DateTime.Now,
                    UserId = CurrentUser.Id
                });
        }
    }
    private async Task LoadMoreComments()
    {
        if (_comments.Count >= _totalItems)
            return;
        _pageIndex += 1;
        _renderNotScroll = true;
        var response = await CommentOrderManager.GetAllForOrderAsync(new GetCommentsForPaginationRequest()
        {
            ComponentOwnerId = CurrentOrderId, PageIndex = _pageIndex, PageSize = _pageSize, GetOnlyWarningComments = _isShowOnlyWarningComment
        });
        if (response.Items != null)
        {
            _comments.InsertRange(0 ,response.Items.ToArray());
            _totalItems = response.TotalItems;
        }
    }
    private async Task FilterWarningComments(bool toggle)
    {
        _isShowOnlyWarningComment = toggle;

            await LoadComments(CurrentOrderId);
    }
    private async Task SetWarningFlagToComment(bool toggle, CommentOrder comment)
    {
        _renderNotScroll = true;
        if (!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите смену флага"))
            return;
       
        comment.IsWarningComment = toggle;
        await CommentOrderManager.SaveCommentAsync(comment);
    }
    private async Task GetUsersAsync()
    {
        ChatUsers = await UserManagerCustom.GetUsersAsync();
    }

    [Inject] private IDialogService DialogService { get; set; } = null!;
    private async void OnButtonDeleteClicked(IEnumerable<Guid> listId)
    {
        var result = await DialogService.ShowMessageBox(
            "Внимание",
            "Подтвердите удаление!",
            yesText: "Удалить!  ", cancelText: "  Отменить");

        if (result != null && (bool)result)
        {
            await RemoveMessage(listId);
        }
        StateHasChanged();
    }
    private async Task RemoveMessage(IEnumerable<Guid> listId)
    {
        await CommentOrderManager.RemoveRangeAsync(listId);
        SetMultiSelect();
       
        if (HubConnection != null)
            await HubConnection.SendAsync("ReloadCommentList", CurrentOrderId);
    }
    private void  SetMultiSelect()
    {
        _multiSelect = !_multiSelect;
        if (!_multiSelect)
        {
            SelectedValues.Clear();
        }
    }
    private void CheckboxClicked(Guid aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
    }
}
<style>
    .link_loadMoreComment{
        margin: 5px auto;
        border: solid 1px lightskyblue;
        border-radius: 5px;
        padding: 3px;
        
    }
    .link_loadMoreComment:hover{

        margin: 4px auto;
        border-width: 2px;
    }
</style>