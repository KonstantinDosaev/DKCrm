@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Client.Pages.OrderManagement.Dialogs

@if (Order != null)
{
    if (ShowCompanyInfo)
    {
        <div class="p-3 d-flex">
            <MudIconButton Size="@Size.Large"
                           OnClick="@(() => OpenOrderComments(Order.Id))"
                           Color="Color.Default"
                           Icon="@Icons.Material.Sharp.Comment"
                           Class="pa-0 mr-8" />
            <div class="mr-8">
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">№:</span>
                    @Order.Number
                </MudText>
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">Дата создания:</span>
                    @Order.DateTimeCreated
                </MudText>
            </div>
            <div class="mr-8">
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">Компания покупатель:</span>
                    @Order.SellersCompany?.Name
                </MudText>
                <MudMenu>
                    <ActivatorContent>
                        <MudLink Underline="Underline.Hover" Color="Color.Dark">
                            <MudText Typo="Typo.body1">
                                <span class="mr-2 fw-bold">Агент:</span>
                                @Order.EmployeeSeller?.LastName @Order.EmployeeSeller?.FirstName @Order.EmployeeSeller?.MiddleName
                            </MudText>
                        </MudLink>
                    </ActivatorContent>
                    <ChildContent>
                        <div class="d-flex flex-column p-2">
                            <MudText Typo="Typo.button">
                                <span class="text-decoration-underline">Телефон: </span> @Order.EmployeeSeller.Phone
                            </MudText>
                            <MudText Typo="Typo.button">
                                <span class="text-decoration-underline">E-mail: </span> @Order.EmployeeSeller.Email
                            </MudText>
                        </div>
                    </ChildContent>
                </MudMenu>
            </div>
            <div class="mr-8">
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">Наша компания:</span>
                    @Order.OurCompany?.Name
                </MudText>
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">Агент:</span>
                    @Order.OurEmployee?.LastName @Order.OurEmployee?.FirstName @Order.OurEmployee?.MiddleName
                </MudText>
            </div>
        </div>
    }
    <div class="d-flex px-3 align-items-center">
        <MudText Typo="Typo.h6">Список продуктов поставки</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => _visibleAddImportedProductDialog=true" Style="margin-left: 1rem;" Color="Color.Tertiary">
            Добавить продукт <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2" />
        </MudButton>
    </div>

    <MudTable Class="m-2" Items="@ImportedProducts" Hover="true" SortLabel="Sort By" T="ImportedProduct"
              Striped="true"
          Bordered="true"
          HeaderClass="mud-table-orderD-header table-head-bordered"
          CustomHeader="true"
          Dense="true">

        <HeaderContent>
            <MudTHeadRow Class="header-centered">

                <MudTh><MudTableSortLabel SortBy="new Func<ImportedProduct, object>(x => x.Product!.PartNumber!)">Парт-номер</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ImportedProduct, object>(x => x.Product!.Name!)">Наименование</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ImportedProduct, object>(x => x.Product!.Brand?.Name!)">Производитель</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<ImportedProduct, object>(x => x.Quantity)">Количество / Свободно</MudTableSortLabel></MudTh>

                <MudTh Style="text-align: center">
                    <MudTableSortLabel Enabled="true" SortBy="new Func<ImportedProduct, object?>(x => x.PriceInTransactionCurrency)">Цена в валюте/ </MudTableSortLabel>
                    <div class="d-flex justify-content-center align-items-center">
                        <span class="mr-2 fs-6">ед.</span>
                        <MudSwitch T="bool" 
                                   ValueChanged="() =>  _oneQuantityPrice = _oneQuantityPrice != true"
                                   Size="Size.Medium" Label="все"
                                   Color="Color.Success" UncheckedColor="Color.Info" />
                    </div>
                </MudTh>
                <MudTh Style="text-align: center">Edit</MudTh>
            </MudTHeadRow>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Парт-номер">
                @if (context.Product != null)
                {
                    @context.Product.PartNumber
                }
            </MudTd>
            <MudTd DataLabel="Наименование">
                @if (context.Product != null)
                {
                    @context.Product.Name
                }
            </MudTd>
            <MudTd DataLabel="Наименование">
                @if (context.Product?.Brand != null)
                {
                    @context.Product.Brand.Name
                }
            </MudTd>
            <MudTd DataLabel="Количество">
                <div class="d-flex justify-content-between align-items-center">
                    
                    @{
                        var freeQuantity = GetFreeQuantity(context);
                    }
                    <MudText> @context.Quantity
                        <span style="@(freeQuantity > 0 ? "color: green" : "color: rgba(0,0,0,0.2)")">/ @freeQuantity</span>
                    </MudText>
           
                    <div style="margin: 0 -0.5rem 0 1rem">
                        <MudIconButton Size="Size.Small" OnClick="(() => OpenEditCompletePopover(context.Id))" Icon="@Icons.Material.Filled.Edit" Color="@Color.Primary"/>
                    </div>
                </div>
                @if (ImportedProductId == context.Id && _isOpenCompletePopover)
                {
                    <MudPopover Open="@_isOpenCompletePopover"
                                Style="min-width: 550px;"
                                AnchorOrigin="Origin.BottomRight"
                        TransformOrigin="Origin.BottomRight" Fixed="true" Class="px-4 pt-4" OverflowBehavior="OverflowBehavior.FlipAlways">
                        <CompleteImportedProductComponent ImportedProduct="EditedImportedProduct"
                                                          CancelEditCallback="() => _isOpenCompletePopover = false"
                                                          RefreshParentCallback="OnInitializedAsync"
                                                          IsDoubleNested="IsDoubleNested"/>
                        <div class="text-end mb-2">
                            <MudButton OnClick="(() => _isOpenCompletePopover = false)" Color="Color.Info">закрыть</MudButton>
                        </div>
                    </MudPopover>
                }
            </MudTd>
            <MudTd DataLabel="Цена">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="flex-grow-1">
                        @if (context.PriceInSupplierCurrency != null && CurrencyDisplay.Contains("Продавца"))
                        {
                            <div class="d-flex justify-content-between">
                                <span style="color: darkgray">продавца: </span>
                                <MudText>
                                    @(decimal.Round((decimal)context.PriceInSupplierCurrency, 4) * (!_oneQuantityPrice ? context.Quantity : 1))
                                    <span style="color: darkgray; margin-left: 5px">@Order.SupplierCurrency</span>
                                </MudText>

                            </div>
                        }
                        @if (context.PriceInTransactionCurrency != null && CurrencyDisplay.Contains("Сделки"))
                        {
                            <div class="d-flex justify-content-between">
                                <span style="color: darkgray">сделки:</span>
                                <MudText>
                                    @(decimal.Round((decimal)context.PriceInTransactionCurrency, 4) * (!_oneQuantityPrice ? context.Quantity : 1))
                                    <span style="color: darkgray; margin-left: 5px">@Order.TransactionCurrency</span>
                                </MudText>
                            </div>
                        }
                        @if (context.PriceLocal != null && CurrencyDisplay.Contains("Локальная"))
                        {
                            <div class="d-flex justify-content-between">
                                <span style="color: darkgray">локальной:</span>
                                <MudText>
                                    @(decimal.Round((decimal)context.PriceLocal, 4) * (!_oneQuantityPrice ? context.Quantity : 1))
                                    <span style="color: darkgray; margin-left: 5px">@Order.LocalCurrency</span>
                                </MudText>
                            </div>
                        }
                    </div>
                    <div style="margin: 0 -0.5rem 0 1rem">
                        <MudIconButton Size="Size.Small" OnClick="(() => OpenEditCurrencyPopover(context.Id))" Icon="@Icons.Material.Filled.Edit" Color="@Color.Primary" />
                    </div>
                    @if (ImportedProductId == context.Id && _isOpenPricePopover)
                    {
                        <MudPopover Open="@_isOpenPricePopover"
                            Style="min-width: 320px"
                            AnchorOrigin="Origin.BottomLeft"
                            TransformOrigin="Origin.BottomLeft" Fixed="true" Class="px-4 pt-4" OverflowBehavior="OverflowBehavior.FlipAlways">
                            <CurrencyImportedProductComponent ImportedProduct="context"
                                                      Order="Order"
                                                      CancelEditCallback="() => _isOpenPricePopover = false" />
                        </MudPopover>
                    }
                </div>
            </MudTd>
           <MudTd DataLabel="Редактировать">
                <MudIconButton Size="@Size.Small"
                           OnClick="() => OpenEditImportProductDialog(context)"
                           Style=" background-color: rgba(217, 214, 81, 0.431);"
                           Icon="@Icons.Material.Sharp.Edit" Class="pa-0 ml-2" />
            </MudTd>
        </RowTemplate>
    </MudTable>

    <CreateImportedProductDialog @bind-VisibleDialog="_visibleAddImportedProductDialog"
                             RefreshProductList="OnInitializedAsync"
                             Order="Order" />

    <EditImportedProductDialog @bind-VisibleDialog="@_visibleEditImportedProductDialog"
                               RefreshProductList="@OnInitializedAsync"
                               Id="@ImportedProductId" />
    @if (_visibleOrderComments)
    {
        <MudDialog @bind-Visible="_visibleOrderComments" Style="max-width: 700px;padding: 0" 
                   Options="new DialogOptions(){CloseButton = true, FullScreen = true,}" Class="no-padding">
            <DialogContent>
                <OrderCommentComponent CurrentOrderId="Order.Id"
                                       OrderType="@typeof(ImportedOrder).ToString()"/>
            </DialogContent>
        </MudDialog>
    }
}
@code {
    [Parameter] public bool IsDoubleNested { get; set; }
    [Parameter] public Guid Id { get; set; }
    [Parameter]public bool ShowCompanyInfo { get; set; }
    [Parameter] public IEnumerable<string> CurrencyDisplay { get; set; } = null!;
    public ImportedOrder? Order { get; set; }
    private List<ImportedProduct>? ImportedProducts { get; set; }
    public ImportedProduct? ImportedProduct { get; set; }
    public Guid ImportedProductId { get; set; }
    public ImportedProduct? EditedImportedProduct { get; set; }
    public bool VisibleCompanySettingsDrawer { get; set; }
    object _selectedValue = 1;

    private bool _visibleAddImportedProductDialog;
    private bool _visibleEditImportedProductDialog;
 

    private bool _oneQuantityPrice = true;
    private bool _isOpenPricePopover;
    private bool _isOpenCompletePopover;
    private bool _visibleOrderComments;

    protected override async Task OnInitializedAsync()
    {
        Order = await ImportedOrderManager.GetDetailsAsync(Id);
        if (Order.ImportedProducts != null)
        {
            ImportedProducts = Order.ImportedProducts.ToList();
            foreach (var item in ImportedProducts)
            {
                item.ImportedOrder = Order;
            }
        }
    }
    private int GetFreeQuantity(ImportedProduct importedProduct)
    {  
       var result = importedProduct.Quantity;
        if (importedProduct!.PurchaseAtStorageList != null)
            result -= importedProduct.PurchaseAtStorageList.Select(s => s.Quantity).Sum();

        if (importedProduct.PurchaseAtExportList != null)
            result -= importedProduct.PurchaseAtExportList.Select(s => s.Quantity).Sum();

        return result;
    }     
    private void OpenEditImportProductDialog(ImportedProduct importedProduct)
    {
        ImportedProductId = importedProduct.Id;
        _visibleEditImportedProductDialog = true;
    }
    private void OpenEditCurrencyPopover(Guid importedProductId)
    {
        CloseAllPopover();
        ImportedProductId = importedProductId;
        _isOpenPricePopover = true;
    }
    private async Task OpenEditCompletePopover(Guid importedProductId)
    {
        CloseAllPopover();
        if (EditedImportedProduct == null || EditedImportedProduct.Id != importedProductId)
            ImportedProductId = importedProductId;
        EditedImportedProduct = await ImportedProductManager.GetDetailsAsync(importedProductId);
        
        _isOpenCompletePopover = true;
    }
    private void CloseAllPopover()
    {
        _isOpenPricePopover = false;
        _isOpenCompletePopover = false;
    }
    private void OpenOrderComments(Guid orderId)
    {
        _visibleOrderComments = !_visibleOrderComments;
    }
}
<style>
    .mud-table-orderD-header {
        background-color: rgba(217, 214, 81, 0.431);
        color: white !important;
        font-weight: bold;
    }
</style>

