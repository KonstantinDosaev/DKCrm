@using DKCrm.Shared.Models.OrderModels

<div class="flex-column">
    @if (ParentStatusList != null)
    {
        if (CurrentOrder.ImportedOrderStatus != null && CurrentOrder.ImportedOrderStatusImportedOrders!.Any())
        {
            <MudMenu Label="@CurrentStatus.Value">
                @foreach (var status in ParentStatusList)
                {
                    if (status.Position == CurrentStatus.Position)
                    {
                        <MudMenuItem Disabled="true" OnClick="() => UpdateStatusInOrderClicked(CurrentOrder,status)" Class="p-0">
                            <MudPaper Class="pa-3 d-flex" Style="background: green">
                                <MudText>@status.Value @status.Position</MudText>
                            </MudPaper>
                        </MudMenuItem>
                    }
                    if (status.Position > CurrentStatus.Position)
                    {
                        <MudMenuItem Disabled="false" OnClick="() => UpdateStatusInOrderClicked(CurrentOrder,status)" Class="p-0">
                            <MudPaper Class="pa-3 d-flex" Style="background: none">
                                <MudText>@status.Value @status.Position</MudText>
                            </MudPaper>
                        </MudMenuItem>
                    }
                    if (status.Position < CurrentStatus.Position)
                    {
                        <MudMenuItem Disabled="true" OnClick="() => UpdateStatusInOrderClicked(CurrentOrder,status)" Class="p-0">
                            <MudPaper Class="pa-3 d-flex" Style="background:lightblue">
                                <MudText>@status.Value @status.Position</MudText>
                            </MudPaper>
                        </MudMenuItem>
                    }
                }
            </MudMenu>
        }
        else
        {
            <MudMenu Label="Выбрать статус">
                @foreach (var status in ParentStatusList)
                {
                    <MudMenuItem  OnClick="() => UpdateStatusInOrderClicked(CurrentOrder,status)" Class="p-0">
                        <MudPaper Class="pa-3 d-flex">
                            <MudText>@status.Value @status.Position</MudText>
                        </MudPaper>
                    </MudMenuItem>
                }
            </MudMenu>
        }
        
    }
</div>

@code {

    [Parameter] public List<ImportedOrderStatus>? StatusList { get; set; }
    [Parameter] public List<ImportedOrderStatus>? ParentStatusList { get; set; }
    [Parameter] public ImportedOrder CurrentOrder { get; set; } = null!;
    [Parameter] public EventCallback RefreshParentCallback { get; set; }
    private ImportedOrderStatus CurrentStatus { get; set; } = null!;
    private ExportedOrderStatus CurrentChildStatus { get; set; } = null!;

    private string _statusBackground = "green";
    private string _statusBackgroundNone = "blue";
    private bool _IsDisableStatus;
    MudListItem selectedItem;
    ExportedOrderStatus selectedValue;

    protected override async Task OnInitializedAsync()
    {
        StatusList ??= await ImportedOrderStatusManager.GetAsync();
        ParentStatusList = StatusList.Where(w => w.ParentId == null || w.ParentId == Guid.Empty).ToList();
        StatusList = StatusList.Where(w => w.Children == null || !w.Children.Any()).ToList();
        if (CurrentOrder.ImportedOrderStatusImportedOrders != null && CurrentOrder.ImportedOrderStatusImportedOrders.Any())
            CurrentStatus = CurrentOrder.ImportedOrderStatusImportedOrders.MaxBy(o => o.DateTimeCreate)!.ImportedOrderStatus!;

    }
    [Inject] private IDialogService DialogService { get; set; } = null!;
    private async void UpdateStatusInOrderClicked(ImportedOrder order, ImportedOrderStatus status)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Внимание",
            "Подтвердите изменение статуса заказа!",
            yesText: "Подтвердить!  ", cancelText: "  Отменить");

        if (result != null && (bool)result)
        {
            await UpdateStatusInOrder(order, status);
        }
        StateHasChanged();
    }
    private async Task UpdateStatusInOrder(ImportedOrder order, ImportedOrderStatus status)
    {
        var statusToOrder = new ImportedOrderStatusImportedOrder()
            {
                ImportedOrderId = order.Id,
                ImportedOrderStatusId = status.Id,
                DateTimeCreate = DateTime.Now
            };
        if (await ImportedOrderManager.AddStatusToOrderAsync(statusToOrder))
        {
            _snackBar.Add("Статус заказа изменен");
            await RefreshParentCallback.InvokeAsync();
            CurrentStatus = status;
        }

    }


    
}
