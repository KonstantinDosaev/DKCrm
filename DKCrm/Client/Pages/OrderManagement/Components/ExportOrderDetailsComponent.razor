@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Client.Pages.OrderManagement.Dialogs
@using DKCrm.Shared.Constants

@if (Order != null)
{
    if (ShowCompanyInfo)
    {
        <div class="p-3 d-flex">
            <MudIconButton Size="@Size.Large"
                           OnClick="() => OpenOrderComments(Order.Id)"
                           Color="Color.Default"
                           Icon="@Icons.Material.Sharp.Comment"
                           Class="pa-0 mr-8"/>
            <div class="mr-8">
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">№:</span>
                    @Order.Number
                </MudText>
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">Дата создания:</span>
                    @Order.DateTimeCreated
                </MudText>
            </div>
            <div class="mr-8">
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">Компания покупатель:</span>
                    @Order.CompanyBuyer?.Name
                </MudText>
                <MudMenu>
                    <ActivatorContent>
                        <MudLink Underline="Underline.Hover" Color="Color.Dark" >
                            <MudText Typo="Typo.body1">
                                <span class="mr-2 fw-bold">Агент:</span>
                                @Order.EmployeeBuyer?.LastName @Order.EmployeeBuyer?.FirstName @Order.EmployeeBuyer?.MiddleName
                            </MudText>
                        </MudLink>
                    </ActivatorContent>
                    <ChildContent>
                        <div class="d-flex flex-column p-2">
                            <MudText Typo="Typo.button">
                                <span class="text-decoration-underline">Телефон: </span> @Order.EmployeeBuyer?.Phone
                            </MudText>
                            <MudText Typo="Typo.button">
                                <span class="text-decoration-underline">E-mail: </span> @Order.EmployeeBuyer?.Email
                            </MudText>
                        </div>
                    </ChildContent>
                </MudMenu>
            </div>
            <div class="mr-8">
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">Наша компания:</span>
                    @Order.OurCompany?.Name
                </MudText>
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">Агент:</span>
                    @Order.OurEmployee?.LastName @Order.OurEmployee?.FirstName @Order.OurEmployee?.MiddleName
                </MudText>
            </div>
        </div>
    }
    <div class="d-flex px-3 align-items-center">
        <MudText Typo="Typo.h6">Список продуктов поставки</MudText>
        <MudSpacer/>
        <MudMenu>
            <ActivatorContent>
                <MudTooltip Text="Изображения">
                    <MudIconButton Size="@Size.Medium"
                                   Color="Color.Tertiary"
                                   Icon="@Icons.Material.Sharp.Image"
                                   Variant="Variant.Filled"
                                   Class="pa-1 mr-2" />
                </MudTooltip>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="(() => VisibleImageDialogToggle(true))">Приемка</MudMenuItem>
                <MudMenuItem OnClick="(() => VisibleDefaultImageDialogToggle(true))">Другие</MudMenuItem>
            </ChildContent>
        </MudMenu>
        <MudTooltip Text="Редактировать заказ">
            <MudIconButton Size="@Size.Medium"
                           OnClick="@(() =>  _visibleUpdateOrderDialog = true)"
                           Color="Color.Tertiary"
                           Icon="@Icons.Material.Sharp.Edit"
                           Variant="Variant.Filled"
                           Class="pa-1 mr-2" Disabled="_itemNotChange" />
        </MudTooltip>
        <MudButton Variant="Variant.Filled"
                   Size="Size.Small" OnClick="() => _visibleAddExportedProductDialog = true" Style=""
                   Color="Color.Tertiary" Disabled="_itemNotChange">
            Добавить продукт<MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2"/>
        </MudButton>
    </div>

    <MudTable Class="m-2" Items="@ExportedProducts" Hover="true" SortLabel="Sort By" T="ExportedProduct"
              Striped="true"
              Bordered="true"
              HeaderClass="mud-table-orderD-header table-head-bordered"
              CustomHeader="true"
              Dense="true"
              ApplyButtonPosition="TableApplyButtonPosition.Start"
              EditButtonPosition="@TableEditButtonPosition.Start"
              CanCancelEdit="true">
        <ToolBarContent>

            @if (Order.ApplicationOrderingProducts != null)
            {
                <MudText Class="mr-2">№ связанной заявки: @Order.ApplicationOrderingProducts.Number</MudText>
            }
            @if (Order.ApplicationOrderingProducts is {MissingProductsInCatalog: { } } && Order.ApplicationOrderingProducts.MissingProductsInCatalog.Any())
            {
                <MudText Color="Color.Warning">Не все продукты добавлены из заявки!!!</MudText>
            }
            @if (!Order.IsAllProductsAreCollected && (ImportIsCompleted != null && !ImportIsCompleted.Contains(false) && ImportIsCompleted.Any()))
            {
                <MudText Class="mr-2">Недостающие продукты пришли на склад, подтвердите изменение статуса заказа на: "УКОМПЛЕКТОВАН"</MudText>
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTHeadRow Class="header-centered">
                <MudTh><MudTableSortLabel SortBy="new Func<ExportedProduct, object?>(x => x.Product!.PartNumber!)">Парт-номер</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ExportedProduct, object?>(x => x.Product!.Name)">Наименование</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ExportedProduct, object?>(x => x.Product!.Brand?.Name!)">Производитель</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<ExportedProduct, object?>(x => x.Quantity)">Количество</MudTableSortLabel>/ требуется</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ExportedProduct, object?>(x => x.MinDaysForDeliveryPlaned)">Мин. дней на доставку</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ExportedProduct, object?>(x => x.MaxDaysForDeliveryPlaned)">Макс. дней на доставку</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center">
                    <MudTableSortLabel Enabled="true" SortBy="new Func<ExportedProduct, object?>(x => x.PriceInBuyerCurrency)">Цена</MudTableSortLabel>
                    <div class="d-flex justify-content-center align-items-center">
                        <span class="mr-2 fs-6">ед.</span>
                        <MudSwitch T="bool" ValueChanged="() =>  _oneQuantityPrice = _oneQuantityPrice != true" Size="Size.Medium" Label="все"
                                                                Color="Color.Success" UncheckedColor="Color.Info" />
                    </div>
                </MudTh>
                <MudTh Style="text-align: center"></MudTh>
            </MudTHeadRow>
        </HeaderContent>
        <RowTemplate>

            <MudTd DataLabel="Парт-номер">
                @if (context.Product != null)
                {
                    @context.Product.PartNumber
                }
            </MudTd>
            <MudTd DataLabel="Наименование">
                @if (context.Product != null)
                {
                    @context.Product.Name
                }
            </MudTd>
            <MudTd DataLabel="Наименование">
                @if (context.Product?.Brand != null)
                {
                    @context.Product.Brand.Name
                }
            </MudTd>
            @{
                var allReserve = GetAllReserveQuantity(context);
              
            }
            <MudTd DataLabel="Количество" 
                   Style="@(context.Quantity == allReserve ? "background: lightgreen" : "background:none")">
                <div class="d-flex justify-content-between align-items-center">

                    <MudText>
                        @context.Quantity
                        <span style="@(context.Quantity == allReserve ? "color: black" : "color: red")">/ @(context.Quantity - allReserve)</span>
                        </MudText>

                    <div style="margin: 0 -0.5rem 0 1rem">
                        <MudIconButton Size="Size.Small" 
                                       OnClick="(() => OpenEditCompletePopover(context.Id))" 
                                       Icon="@Icons.Material.Filled.Edit" Color="@Color.Primary"
                                       Disabled="_itemNotChange"/>
                    </div>
                    @if (ExportedProductId == context.Id && _isOpenCompletePopover)
                    {
                        @*<MudPopover Open="@_isOpenCompletePopover"
                                    Style="min-width: 550px;"
                                    Fixed="true" Class="px-4 pt-4" OverflowBehavior="OverflowBehavior.FlipAlways">
                            <CompleteExportedProductComponent ExportedProduct="EditedExportedProduct"
                                                              CancelEditCallback="() => _isOpenCompletePopover = false"
                                                              RefreshParentCallback="GetOrder"
                                                              IsDoubleNested="IsDoubleNested"/>
                            <div class="text-end mb-2">
                                <MudButton OnClick="(() => _isOpenCompletePopover = false)" Color="Color.Info">закрыть</MudButton>
                            </div>
                        </MudPopover>*@
                        <MudDialog @bind-Visible="_isOpenCompletePopover" Style="max-width: 700px;padding: 0"
                                   Options="new DialogOptions(){CloseButton = true, FullScreen = true,}" Class="no-padding">
                            <DialogContent>
                                <CompleteExportedProductComponent ExportedProduct="EditedExportedProduct"
                                                                  CancelEditCallback="() => _isOpenCompletePopover = false"
                                                                  RefreshParentCallback="GetOrder"
                                                                  IsDoubleNested="IsDoubleNested"/>
                            </DialogContent>
                        </MudDialog>
                    }
                </div>
            </MudTd>
            <MudTd DataLabel="Мин. дней на доставку">
                @if (_editDaysForDeliveryIsOn && ExportedProductId == context.Id)
                {
                        <MudNumericField @bind-Value="context.MinDaysForDeliveryPlaned"
                                         For="@(() => context.MinDaysForDeliveryPlaned)"
                                         Variant="Variant.Outlined"
                                         RequiredError="Введите количество"
                                         Class="mr-2" Min="1" Margin="Margin.Dense"/>
                }
                else
                {
                   
                        @context.MinDaysForDeliveryPlaned
                }
            </MudTd>
            <MudTd DataLabel="Макс. дней на доставку">
                @if (_editDaysForDeliveryIsOn && ExportedProductId == context.Id)
                {
                    <div class="d-flex justify-content-between">
                        <MudNumericField @bind-Value="context.MaxDaysForDeliveryPlaned"
                                         For="@(() => context.MaxDaysForDeliveryPlaned)"
                                         Variant="Variant.Outlined"
                                         RequiredError="Введите количество"
                                         Class="mr-2" Min="1" Margin="Margin.Dense"/>
                        <div>
                            <MudIconButton Size="Size.Small" Class="mb-1 d-block"
                                           OnClick="(() => SaveExportedProduct())"
                                           Icon="@Icons.Material.Filled.Check" Color="@Color.Secondary"/>
                            <MudIconButton Size="Size.Small"
                                           OnClick="(() => CloseEditDaysForDelivery())"
                                           Icon="@Icons.Material.Filled.Close" Color="@Color.Default"/>
                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex justify-content-between">
                        @context.MaxDaysForDeliveryPlaned
                        <MudIconButton Size="Size.Small"
                                       OnClick="(() => OnEditDaysForDelivery(context.Id))"
                                       Icon="@Icons.Material.Filled.Edit" Color="@Color.Primary"/>
                    </div>
                }
            </MudTd>
            <MudTd DataLabel="Цена">
	            <div class="d-flex justify-content-between align-items-center">
		            <div class="flex-grow-1">
			            @if (context.PriceInBuyerCurrency != null && CurrencyDisplay.Contains("Покупателя"))
			            {
				            <div class="d-flex justify-content-between">
					            <span style="color: darkgray">покупателя: </span>
					            <MudText>
						            @(decimal.Round((decimal)context.PriceInBuyerCurrency, 4) * (!_oneQuantityPrice ? context.Quantity : 1))
						            <span style="color: darkgray; margin-left: 5px">@Order.BuyerCurrency</span>
					            </MudText>
				            </div>
			            }
			            @if (context.PriceInTransactionCurrency != null && CurrencyDisplay.Contains("Сделки"))
			            {
				            <div class="d-flex justify-content-between">
					            <span style="color: darkgray">сделки:</span>
					            <MudText>
						            @(decimal.Round((decimal)context.PriceInTransactionCurrency, 4) * (!_oneQuantityPrice ? context.Quantity : 1))
						            <span style="color: darkgray; margin-left: 5px">@Order.TransactionCurrency</span>
					            </MudText>
				            </div>
			            }
			            @if (context.PriceLocal != null && CurrencyDisplay.Contains("Локальная"))
			            {
				            <div class="d-flex justify-content-between">
					            <span style="color: darkgray">локальной:</span>
					            <MudText>
						            @(decimal.Round((decimal)context.PriceLocal, 4) * (!_oneQuantityPrice ? context.Quantity : 1))
						            <span style="color: darkgray; margin-left: 5px">@Order.LocalCurrency</span>
					            </MudText>
				            </div>
			            }
		            </div>
		            <div style="margin: 0 -0.5rem 0 1rem">
                        <MudIconButton Size="Size.Small" 
                                       OnClick="(() => OpenEditCurrencyPopover(context.Id))"
                                       Icon="@Icons.Material.Filled.Edit" Color="@Color.Primary" 
                                       Disabled="_itemNotChange" />
		            </div>
		            @if (ExportedProductId == context.Id && _isOpenPricePopover)
		            {
			            <MudPopover Open="@_isOpenPricePopover"
			                        Style="min-width: 320px; background: lightcyan"
			                        AnchorOrigin="Origin.BottomLeft"
			                        TransformOrigin="Origin.BottomLeft" Fixed="true" Class="px-4 pt-4" OverflowBehavior="OverflowBehavior.FlipAlways">
				            <CurrencyExportedProductComponent
					            ExportedProduct="context"
					            Order="Order"
					            CancelEditCallback="() => _isOpenPricePopover = false" />
			            </MudPopover>
		            }
	            </div>
            </MudTd>
            <MudTd DataLabel="Редактировать">
	            @*  <MudIconButton Size="@Size.Small"
	                          OnClick="() => OpenEditImportProductDialog(context)"
	                          Style=" background-color: rgba(217, 214, 81, 0.431);"
	                          Icon="@Icons.Material.Sharp.Edit" Class="pa-0 ml-2" /> *@
	            <MudIconButton Size="@Size.Small"
	                           OnClick="() => RemoveExportedProduct(context.Id)"
	                           Style="@(context.IsDeleted == false ? " background-color: rgba(217, 214, 81, 0.431;" : $" background-color: rgba(245, 39, 39, 0.5);")"
                               Icon="@Icons.Material.Sharp.Delete" Class="pa-0"
                               Disabled="_itemNotChange" />
            </MudTd>
        </RowTemplate>
       
        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
        </EditButtonContent>
    </MudTable>

        <CreateExportedProductDialog @bind-VisibleDialog="_visibleAddExportedProductDialog"
                                     RefreshProductList="OnInitializedAsync"
                                     Order="Order"/>
    
    @if (ExportedProductId!=Guid.Empty && ExportedProductId !=null)
    {
        <EditExportedProductDialog @bind-VisibleDialog="@_visibleEditExportedProductDialog"
                                   RefreshProductList="@OnInitializedAsync"
                                   Id="@ExportedProductId"/>
    }
    @if (_visibleOrderComments)
    {
        <MudDialog @bind-Visible="_visibleOrderComments" Style="max-width: 700px;padding: 0" 
                   Options="new DialogOptions(){CloseButton = true, FullScreen = true,}" Class="no-padding">
            <DialogContent>
                <OrderCommentComponent CurrentOrderId="Order.Id"
                                       OrderType="@typeof(ExportedOrder).ToString()"/>
            </DialogContent>
        </MudDialog>
    }
    <EditExportedOrderDialog 
        Id="Order.Id"
        RefreshParentItem="RefreshParentItem"
        @bind-VisibleDialog="_visibleUpdateOrderDialog"
        ApplicationOrderingProduct="Order.ApplicationOrderingProducts" />
    @if (_visibleImageDialog)
    {
        <DKImageManagerDialog DirectoryType="@DirectoryType.PrivateFolder"
                              FileType="FileTypes.Images"
                              RelativePath="@(Path.Combine(PathsToDirectories.FileContainer,PathsToDirectories.Images))"
                              LoadMoreCount="5"
                              TitleText="Изображения"
                              @bind-VisibleDialog="_visibleImageDialog"
                              ImageType="@ImageTypes.OrderRecipientImage"
                              IsPreviewImage="true"
                              OwnerId="@Id" />
    }
    @if (_visibleDefaultImageDialog)
    {
        <DKImageManagerDialog DirectoryType="@DirectoryType.PrivateFolder"
                              FileType="FileTypes.Images"
                              RelativePath="@(Path.Combine(PathsToDirectories.FileContainer,PathsToDirectories.Images))"
                              LoadMoreCount="5"
                              TitleText="Изображения"
                              @bind-VisibleDialog="_visibleDefaultImageDialog"
                              ImageType="@ImageTypes.OrderImage"
                              IsPreviewImage="true"
                              OwnerId="@Id" />
    }
}
@code {
    [Parameter] public bool IsDoubleNested { get; set; }
    [Parameter] public Guid Id { get; set; }
    [Parameter]public bool ShowCompanyInfo { get; set; }
    [Parameter] public IEnumerable<string> CurrencyDisplay { get; set; } = null!;
    [Parameter]public ExportedOrder? Order { get; set; }
    [Parameter] public EventCallback RefreshParentItem { get; set; }
    private List<ExportedProduct>? ExportedProducts { get; set; }
    public ExportedProduct? EditedExportedProduct { get; set; }
    public Guid ExportedProductId { get; set; }
    public IEnumerable<bool>? ImportIsCompleted { get; set; }

    public ExportedProduct? BackupExportedProduct { get; set; }
    private int MissingQuantity { get; set; }
    private int QuantityInReserveAll { get; set; }
    object _selectedValue = 1;
    private int _quantityToPrice;

    private bool _visibleAddExportedProductDialog;
    private bool _visibleEditExportedProductDialog;
    private bool _oneQuantityPrice= true;
    private bool _isOpenPricePopover;
    private bool _isOpenCompletePopover;
    private bool _visibleOrderComments;
    private bool _itemNotChange;
    private bool _editDaysForDeliveryIsOn;
    private bool _visibleUpdateOrderDialog;

    private bool _visibleImageDialog;
    private bool _visibleDefaultImageDialog;

    protected override async Task OnInitializedAsync()
    {
        await GetOrder();
    }
    public async Task GetOrder()
    {
        Order ??= await ExportedOrderManager.GetDetailsAsync(Id);
        if (Order.ExportedOrderStatusExported != null)
        {
            var currentStatusId = Order.ExportedOrderStatusExported.MaxBy(o => o.DateTimeCreate)!.ExportedOrderStatusId;
            var currentStatus = Order.ExportedOrderStatus?.FirstOrDefault(f => f.Id == currentStatusId);
            _itemNotChange = currentStatus!.LimitPositionToEditOrder;
        }

        if (Order.ExportedProducts != null)
        {
            ExportedProducts = Order.ExportedProducts.ToList();
            foreach (var item in ExportedProducts)
            {
                item.ExportedOrder = Order;
            }
        }
        if (Order.ExportedProducts != null)
        {
            ImportIsCompleted = Order.ExportedProducts.Where(w=>w.ImportedProducts!=null)
                .Select(s => s.ImportedProducts!.Select(sip => sip.ImportedOrder!.IsAllProductsAreCollected).FirstOrDefault());
        }
    }
    private int GetAllReserveQuantity(ExportedProduct exportedProduct)
    {
        var quantityInReserveAll = 0;
        if (exportedProduct.SoldFromStorage != null)
            quantityInReserveAll += exportedProduct.SoldFromStorage.Select(s => s.Quantity).Sum();

        if (exportedProduct.PurchaseAtExports != null)
            quantityInReserveAll += exportedProduct.PurchaseAtExports.Select(s => s.Quantity).Sum();

        return quantityInReserveAll;
    }

    private void OpenEditExportedProductDialog(ExportedProduct exportedProduct)
    {
        ExportedProductId = exportedProduct.Id;
        _visibleEditExportedProductDialog = true;
    }
    private void OpenEditCurrencyPopover(Guid exportedProductId)
    {
        CloseAllPopover();
        ExportedProductId = exportedProductId;
        _isOpenPricePopover = true;
    }

    private async Task OpenEditCompletePopover(Guid exportedProductId)
    {
        CloseAllPopover();
        if(EditedExportedProduct == null || EditedExportedProduct.Id != exportedProductId)
            ExportedProductId = exportedProductId;
            EditedExportedProduct = await ExportedProductManager.GetDetailsAsync(exportedProductId);
        
        _isOpenCompletePopover = true;
    }
    private void CloseAllPopover()
    {
        _isOpenPricePopover = false;
        _isOpenCompletePopover = false;
        _editDaysForDeliveryIsOn = false;
       
    }
    private void OpenOrderComments(Guid orderId)
    {
        _visibleOrderComments = !_visibleOrderComments;
    }
    private void OnEditDaysForDelivery(Guid exportedProductId)
    {
        CloseAllPopover();
        _editDaysForDeliveryIsOn = true;
        ExportedProductId = exportedProductId;
    }
    private void CloseEditDaysForDelivery()
    {
        _editDaysForDeliveryIsOn = false;
        ExportedProductId = Guid.Empty;
    }
    private async Task SaveExportedProduct()
    {
        if (ExportedProducts != null)
        {
            var currentExportedProduct = ExportedProducts.FirstOrDefault(f => f.Id == ExportedProductId);
            if (currentExportedProduct != null)
                if (await ConfirmationActionService.ConfirmationActionAsync("Подтвердите сохранение!"))
                    if (await ExportedProductManager.UpdateAsync(currentExportedProduct))
                        _snackBar.Add("Изменения сохранены");
            CloseAllPopover();
        }
    }
    void VisibleImageDialogToggle(bool toggle)
    {
        _visibleImageDialog = toggle;
    }   
    void VisibleDefaultImageDialogToggle(bool toggle)
    {
        _visibleDefaultImageDialog = toggle;
    }
    private async Task RemoveExportedProduct(Guid id)
    {
	    if (await ConfirmationActionService.ConfirmationActionAsync("Подтвердите удалени!!!"))
	    {
		    var item = ExportedProducts?.FirstOrDefault(f=>f.Id== id);
		    if (item == null)
			    return;
		    var res = (item.PurchaseAtExports?.Select(s => s.Quantity).Sum() ?? 0)
		              + (item.SoldFromStorage?.Select(s => s.Quantity).Sum() ?? 0);
		    if (res > 0)
		    {
			    _snackBar.Add("Данный продукт ссылается на склад или импорт, удаление не возможно!!!");
                return;
		    }
		     await ExportedProductManager.RemoveAsync(id);
	    }
    }
}
<style>
    .mud-table-sticky-header * .mud-table-root .mud-table-orderD-header  * .mud-table-cell
    {
        background-color: #1861ac;
        color: white !important;
        font-weight: bold;
    }
</style>


