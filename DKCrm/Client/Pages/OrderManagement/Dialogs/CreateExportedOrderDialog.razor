@using DKCrm.Client.Pages.OrderManagement.Forms
@using DKCrm.Shared.Models.OrderModels
<MudDialog VisibleChanged="VisibleDialogChanged" Visible="VisibleDialog" Options="new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium }">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="CloseClick" Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <MudCard>
            <FormExportedOrder
                OnValidSubmit="Create"
                ExportedOrder="Order"
                ButtonText="Сохранить"
                TitleText="Создание заказа на продажу" 
                ApplicationOrderingProduct="ApplicationOrderingProduct"/>
                
        </MudCard>
    </DialogContent>
</MudDialog>


@code {
    [Parameter] public bool VisibleDialog { get; set; }
    [Parameter] public EventCallback RefreshParentItem { get; set; }
    [Parameter] public EventCallback Close { get; set; }
    [Parameter] public ApplicationOrderingProducts? ApplicationOrderingProduct { get; set; }
    public ExportedOrder Order { get; set; } = null!;
    private InternalCompanyData? InternalData { get; set; }
    protected override async Task OnInitializedAsync()
    {
        InternalData ??= await InternalCompanyDataManager.GetAsync();
        Order = new ExportedOrder { LocalCurrency = InternalData.LocalCurrency, CurrencyPercent = InternalData.CurrencyPercent, Nds = InternalData.Nds};
    }
    async Task Create()
    {
        if (!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите сохранение"))
            return;
        Order.OurCompanyId = Order.OurCompany!.Id;
        Order.CompanyBuyerId = Order.CompanyBuyer!.Id;
       
        if (Order.ApplicationOrderingProducts is {ApplicationOrderingProductProduct: { } } && Order.ApplicationOrderingProducts.ApplicationOrderingProductProduct.Any())
        {
            Order.ExportedProducts ??= new List<ExportedProduct>();
            foreach (var item in Order.ApplicationOrderingProducts.ApplicationOrderingProductProduct)
            {
                var newExportedProduct = new ExportedProduct()
                {
                    Product = item.Product,
                    Quantity = item.Quantity,
                    ExportedOrderId = Order.Id
                };
                Order.ExportedProducts.Add(newExportedProduct);
            }
            Order.ApplicationOrderingProducts.InWork = true;
            await ApplicationOrderingManager.UpdateAsync(Order.ApplicationOrderingProducts);
        }
        if(await ExportedOrderManager.AddAsync(Order))
        {
            await RefreshParentItem.InvokeAsync();
            _snackBar.Add("Заказ создан");
            await CloseClick();
        }
    }

    
    [Parameter]public EventCallback<bool> VisibleDialogChanged { get; set; }
    async Task CloseClick()
    {
        VisibleDialog = false;
        await VisibleDialogChanged.InvokeAsync(VisibleDialog);
    }
}