@using DKCrm.Client.Pages.OrderManagement.Forms
@using DKCrm.Shared.Models.OrderModels
<MudDialog IsVisibleChanged="VisibleDialogChanged" IsVisible="VisibleDialog" Options="new DialogOptions() { FullWidth = true }">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="CloseClick" Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <MudCard>
            <FormExportedOrder
                OnValidSubmit="Create"
                ExportedOrder="Order"
                ButtonText="Сохранить"
                TitleText="Создание заказа на продажу"/>

        </MudCard>
    </DialogContent>
</MudDialog>


@code {
    [Parameter] public bool VisibleDialog { get; set; }
    [Parameter] public EventCallback RefreshProductList { get; set; }
    [Parameter] public EventCallback Close { get; set; }
    public ExportedOrder Order { get; set; } = null!;
    private InternalCompanyData? InternalData { get; set; }
    protected override async Task OnInitializedAsync()
    {
        InternalData ??= await InternalCompanyDataManager.GetAsync();
        Order = new ExportedOrder { LocalCurrency = InternalData.LocalCurrency, CurrencyPercent = InternalData.CurrencyPercent};
    }
    async Task Create()
    {
        Order.OurCompanyId = Order.OurCompany!.Id;
        Order.CompanyBuyerId = Order.CompanyBuyer!.Id;
        await ExportedOrderManager.AddAsync(Order);
        await RefreshProductList.InvokeAsync();
        _snackBar.Add("Заказ создан");
        await CloseClick();
    }

    
    [Parameter]public EventCallback<bool> VisibleDialogChanged { get; set; }
    async Task CloseClick()
    {
        VisibleDialog = false;
        await VisibleDialogChanged.InvokeAsync(VisibleDialog);
    }
}