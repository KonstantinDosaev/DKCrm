@using DKCrm.Client.Pages.OrderManagement.Forms
@using DKCrm.Shared.Models.OrderModels
<MudDialog VisibleChanged="VisibleDialogChanged" Visible="VisibleDialog" Options="new DialogOptions() { FullWidth = true }">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined"  Size="Size.Small" OnClick="CloseClick" Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <MudCard>
            <FormImportedOrder OnValidSubmit="Create"
                               ImportedOrder="Order"
                               ButtonText="Сохранить"
                               TitleText="Создание заказа на поставку" />

        </MudCard>
    </DialogContent>
</MudDialog>


@code {
    [Parameter] public List<ImportedProduct>? ImportedProducts { get; set; }
    [Parameter] public bool VisibleDialog { get; set; }
    [Parameter] public EventCallback RefreshProductList { get; set; }
    [Parameter] public EventCallback Close { get; set; }
    public ImportedOrder? Order { get; set; } 
    private InternalCompanyData? InternalData { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (VisibleDialog)
        {
            InternalData ??= await InternalCompanyDataManager.GetAsync();
            Order = new ImportedOrder
            {
                LocalCurrency = InternalData.LocalCurrency, 
                CurrencyPercent = InternalData.CurrencyPercent, 
                Nds = InternalData.Nds,
                ImportedProducts = ImportedProducts
            };
        }
    }

    async Task Create()
    {       
        if (!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите сохранение"))
            return;
        Order!.OurCompanyId = Order.OurCompany!.Id;
        Order.SellersCompanyId = Order.SellersCompany!.Id;
        await ImportedOrderManager.AddAsync(Order);
        await RefreshProductList.InvokeAsync();
        await CloseClick();
        _snackBar.Add("Заказ создан");
    }
 
    [Parameter]public EventCallback<bool> VisibleDialogChanged { get; set; }
    async Task CloseClick()
    {
        VisibleDialog = false;
        await VisibleDialogChanged.InvokeAsync(VisibleDialog);
    }
}