@using DKCrm.Client.Pages.OrderManagement.Forms
@using DKCrm.Shared.Models.OrderModels

<MudDialog IsVisibleChanged="VisibleDialogChanged" IsVisible="VisibleDialog" Options="new DialogOptions() { FullWidth = true }">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="CloseClick" Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <MudCard>
            <FormExportedOrder
                OnValidSubmit="Edit"
                ExportedOrder="Order"
                ButtonText="Сохранить"
                TitleText="Изменение заказа на продажу"/>
        </MudCard>
    </DialogContent>
</MudDialog>


@code {
    [Parameter]public bool VisibleDialog { get; set; }
    [Parameter]public ExportedOrder? Order { get; set; }
    [Parameter]public Guid? Id { get; set; }
    [Parameter] public EventCallback RefreshProductList { get; set; }
    [Parameter] public EventCallback Close { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null && Id!=Guid.Empty) Order = await ExportedOrderManager.GetDetailsAsync((Guid)Id);
    }
    
    async Task Edit()
    {
        if (await ExportedOrderManager.UpdateAsync(Order!))
        {
            Order!.OurCompanyId = Order.OurCompany!.Id;
            Order.CompanyBuyerId = Order.CompanyBuyer!.Id;
            _snackBar.Add("Данные обновлены");
            await RefreshProductList.InvokeAsync();
            await CloseClick();
            VisibleDialog = false;
        }
        

    }

    [Parameter]public EventCallback<bool> VisibleDialogChanged { get; set; }
    async Task CloseClick()
    {
        VisibleDialog = false;
        await VisibleDialogChanged.InvokeAsync(VisibleDialog);
    }
}