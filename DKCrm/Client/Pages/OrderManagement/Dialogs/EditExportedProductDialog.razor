@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Client.Pages.OrderManagement.Forms


<MudDialog VisibleChanged="VisibleDialogChanged" Visible="VisibleDialog" ContentClass="no-padding"
           Options="new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium, NoHeader = true}" OnBackdropClick="HandleBackdropClick">
        <TitleContent>
           
        </TitleContent>
    <DialogContent>
        <div style="height: 3rem"></div>
        <div style="text-align: right; position:absolute; top: 1rem; right: 1rem">
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="CloseClick" Color="Color.Info">Закрыть</MudButton>
        </div>
        
        <FormExportedProduct OnValidSubmit="EditProduct"
                             ExportedProduct="ExportedProduct"
                             ButtonText="Сохранить"
                             TitleText="Изменение единицы на продажу"
                             IsEditForm="true"/>

    </DialogContent>
    </MudDialog>


@code {
    [Parameter] public EventCallback<bool> VisibleDialogChanged { get; set; }
    [Parameter] public bool VisibleDialog { get; set; }
    public ExportedProduct? ExportedProduct { get; set; }
    [Parameter] public Guid? Id { get; set; }
    [Parameter] public EventCallback RefreshProductList { get; set; }
    [Parameter] public EventCallback Close { get; set; }
 
    async Task HandleBackdropClick(MouseEventArgs eArgs)
    {
        await CloseClick();
        StateHasChanged();
    }
    protected override async Task OnParametersSetAsync()
    {
        if (VisibleDialog && Id != null && Id != Guid.Empty)
            ExportedProduct = await ExportedProductManager.GetDetailsAsync((Guid)Id);
    }

    async Task EditProduct()
    {
        if (!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите сохранение"))
            return;
        if (ExportedProduct != null)
        {
            ExportedProduct.ProductId = ExportedProduct.Product?.Id;

            if (await ExportedProductManager.UpdateAsync(ExportedProduct))
            {
                _snackBar.Add("Продукт обновлен");
                await RefreshProductList.InvokeAsync();
                await CloseClick();
            }
        }
    }



    async Task CloseClick()
    {
        ExportedProduct = null;
        VisibleDialog = false;
        await VisibleDialogChanged.InvokeAsync(VisibleDialog);
        
    }

}