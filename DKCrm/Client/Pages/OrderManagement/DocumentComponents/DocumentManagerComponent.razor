@using DKCrm.Shared.Models.OrderModels
@using Microsoft.AspNetCore.Components
@inject IDocumentManager Doc
@using BlazorBootstrap;
@using Size = MudBlazor.Size
@using Placement = MudBlazor.Placement
@using Orientation = BlazorBootstrap.Orientation
@using System.Reflection
@using DKCrm.Shared.Requests.FileService
@using System.Buffers.Text
@using DKCrm.Shared.Constants
@inject IConfiguration conf
<MudMenu>
    <ActivatorContent>
        <MudButton EndIcon="@Icons.Material.Filled.Add" Color="Color.Success" Variant="Variant.Filled">Создать</MudButton>
    </ActivatorContent>
    <ChildContent>
        <MudButton OnClick="CreateDocument">Счет на оплату</MudButton>
        <MudButton OnClick="(() => _visibleCreateSpecificationDialog = true)">Спецификацию</MudButton>
        <MudMenuItem>Armory</MudMenuItem>
    </ChildContent>
</MudMenu>
@if (ImageToOrder!=null && ImageToOrder.Any() && ImageToOrder.Length > 0)
{
    <img width="100" height="100" src="data:image;base64, @Convert.ToBase64String(ImageToOrder)" />
}
else
{
    <img width="100" height="100" src="/default.jpg" />
}
@if (GroupInfoSet != null && GroupInfoSet.Any())
{
   
    @foreach (var set in GroupInfoSet)
    {
        <MudPaper Square="true" Style="background-color: rgba(0, 0, 0, 0.1);" class="d-flex flex-column my-2 p-2">
           
                <MudPaper Elevation="2" class="d-flex align-items-center justify-content-between p-1 my-1">
                    <MudLink Class="mr-4 flex-grow-1" OnClick="(() => OpenDocument(set))">@set.FileName</MudLink>
                    <div>
                        @* <MudTooltip Text="Откырть">
                            <MudButton Class="mr-2" 
                                           EndIcon="@Icons.Material.Filled.OpenInBrowser"
                                           Variant="Variant.Outlined"
                                           IconSize="Size.Large">открыть</MudButton>
                        </MudTooltip> *@
                        <MudTooltip Text="Скачать с печатью">
                            <MudIconButton Class="mr-2" Icon="@Icons.Material.Filled.AddTask" Variant="Variant.Outlined"/>
                        </MudTooltip>
                        <MudTooltip Text="Скачать">
                            <MudIconButton Class="mr-2" Icon="@Icons.Material.Filled.Download"
                                           OnClick="() => ClickToSave(set.Path, set.FileName)"
                                           Variant="Variant.Outlined"/>
                        </MudTooltip>
                        <MudTooltip Text="Удалить">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           OnClick="() => RemoveDocument(new Guid())"
                                           Variant="Variant.Outlined"/>
                        </MudTooltip>
                    </div>
                </MudPaper>
            
        </MudPaper>
    }
}
else
{
    <MudText Class="m-4">Документы не обнаружены</MudText>
}
<MudDialog @bind-IsVisible="_visibleCreateSpecificationDialog" @ref="_createSpecificationDialog"
           Options="new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium,DisableBackdropClick = true}">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined" 
                       Size="Size.Small"
                       OnClick="(() => _createSpecificationDialog.Close())"
                       Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <CreateOrderSpecificationComponent OrderId="OrderId" RefreshParent="EndCreateSpecification" />
    </DialogContent>
</MudDialog>
@if (CurrentInfoSet != null && _visibleViewPdfDialog)
{
    <DKPdfViewerDialog @bind-VisibleDialog="_visibleViewPdfDialog" 
                       RelativePath="@CurrentInfoSet.Path" 
                       DirectoryType="DirectoryType.Private" 
                       StamperIsOn="true"></DKPdfViewerDialog>
}
@* <MudDialog @bind-IsVisible="_visibleStampPdfDialog" Style="height: 100VH"
           Options="new DialogOptions() {DisableBackdropClick = true,FullWidth = true,FullScreen = true, NoHeader = true}"  ClassContent="myPdfViewerDialog">
    <TitleContent>
        
    </TitleContent>
    <DialogContent>
        <div class="clearPdfDialogButton">
            <MudIconButton 
                Size="Size.Large"
                OnClick="() => _visibleViewPdfDialog = false"
                Color="Color.Info" Icon="@Icons.Material.Filled.Close"></MudIconButton>
        </div>
        <MudTooltip Text="Delete">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" />
        </MudTooltip>
      
        
    </DialogContent>
</MudDialog>
 *@
@code {
    
    byte[]? ImageToOrder { get; set; }



    [Parameter] public Guid OrderId { get; set; }
    IEnumerable<GetFileInfoResponse>? InfoSets { get; set; }
    IEnumerable<GetFileInfoResponse>? GroupInfoSet { get; set; }
    GetFileInfoResponse? CurrentInfoSet { get; set; }
    private bool _visibleViewPdfDialog;
 
    
    MudDialog? _createSpecificationDialog;
    private bool _visibleCreateSpecificationDialog;


    private async Task GetImage(Guid id)
    {
        ImageToOrder = await FilesManager.GetFirstOrDefaultFileInBytArrayAsync( new GetFileRequest(){Path= $"{PathsToDirectories.OrdersImages}\\{id}", DirectoryType = DirectoryType.Private});
        var t = $"data:image;base64, @Convert.ToBase64String(item.Value)";
    }
   
    protected override async Task OnInitializedAsync()
    {
        await GetImage(OrderId);
        //imageBytes = await FilesManager.GetFileInBytArrayAsync(new GetFileRequest() { Path = $"{PathsToDirectories.OrdersImages}\\{OrderId}\\1.jpg" });
        await LoadDocInfoList();
        
    }

    private async Task LoadDocInfoList()
    {
        InfoSets = await FilesManager.GetAllFileInfoInDirectoryAsync(new GetFileRequest(){DirectoryType = DirectoryType.Private,Path = Path.Combine(PathsToDirectories.OrdersDocuments,OrderId.ToString())});
        GroupInfoSet = InfoSets;

    }
    private async Task EndCreateSpecification()
    {
        _createSpecificationDialog!.Close();
        await LoadDocInfoList();
    }
    private async Task CreateDocument()
    {
        var result = await DocumentManager.CreatePaymentInvoicePdfAsync(OrderId);
       

        await LoadDocInfoList();
    }
    private async Task RemoveDocument(Guid infoSetId)
    {
        if(!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите удаление!!!"))
            return;
        await DocumentManager.RemoveDocumentAsync(infoSetId);
        await LoadDocInfoList();
    }
    private async Task OpenDocument(GetFileInfoResponse response)
    {
        CurrentInfoSet = response;
        _visibleViewPdfDialog = true;
      
    }
    private async Task ClickToSave(string path, string name)
    {
       if(!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите скачивание"))
              return;
        // CurrentInfoSet = InfoSets?.FirstOrDefault(f => f.Id == infoSetId);
        // if (CurrentInfoSet == null)return;
        var bytFile = await FilesManager.GetFileInBytArrayAsync(new GetFileRequest(){Path = path, IsFullPath = true});
        await _jsRuntime.InvokeVoidAsync
                ("BlazorDownloadFile",  name, "application/octet-stream", bytFile);
    } 
    private async Task GetIndexPage()
    {
       string tu =  await _jsRuntime.InvokeAsync<string>
                 ("ReturnIndexPdfFile");
    }
}
<style>
  
</style>