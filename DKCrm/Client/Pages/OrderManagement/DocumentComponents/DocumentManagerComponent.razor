@using DKCrm.Shared.Models.OrderModels
@using Microsoft.AspNetCore.Components
@inject IDocumentManager Doc
@using BlazorBootstrap;
@using Size = MudBlazor.Size
@using Placement = MudBlazor.Placement
@using Orientation = BlazorBootstrap.Orientation
@using System.Reflection
<MudMenu>
    <ActivatorContent>
        <MudButton EndIcon="@Icons.Material.Filled.Add" Color="Color.Success" Variant="Variant.Filled">Создать</MudButton>
    </ActivatorContent>
    <ChildContent>
        <MudButton OnClick="CreateDocument">Счет на оплату</MudButton>
        <MudButton OnClick="(() => _visibleCreateSpecificationDialog = true)">Спецификацию</MudButton>
        <MudMenuItem>Armory</MudMenuItem>
    </ChildContent>
</MudMenu>

@if (GroupInfoSet != null && GroupInfoSet.Any())
{
    @foreach (var setList in GroupInfoSet)
    {
        <MudPaper Square="true" Style="background-color: rgba(0, 0, 0, 0.1);" class="d-flex flex-column my-2 p-2">
            @foreach (var set in setList)
            { 
                <MudPaper Elevation="2" class="d-flex align-items-center justify-content-between p-1 my-1">
                    <MudLink Class="mr-4 flex-grow-1" OnClick="() => ViewPdfDialog(set.Id)">@set.Name</MudLink>
                    <div>
                        @* <MudTooltip Text="Откырть">
                            <MudButton Class="mr-2" 
                                           EndIcon="@Icons.Material.Filled.OpenInBrowser"
                                           Variant="Variant.Outlined"
                                           IconSize="Size.Large">открыть</MudButton>
                        </MudTooltip> *@
                        <MudTooltip Text="Скачать с печатью">
                            <MudIconButton Class="mr-2" Icon="@Icons.Material.Filled.AddTask" Variant="Variant.Outlined"/>
                        </MudTooltip>
                        <MudTooltip Text="Скачать">
                            <MudIconButton Class="mr-2" Icon="@Icons.Material.Filled.Download"
                                           OnClick="() => ClickToSave(set.Id)"
                                           Variant="Variant.Outlined"/>
                        </MudTooltip>
                        <MudTooltip Text="Удалить">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           OnClick="() => RemoveDocument(set.Id)"
                                           Variant="Variant.Outlined"/>
                        </MudTooltip>
                    </div>
                </MudPaper>
            }
        </MudPaper>
    }
}
else
{
    <MudText Class="m-4">Документов не обнаружено</MudText>
}
<MudDialog @bind-IsVisible="_visibleCreateSpecificationDialog" @ref="_createSpecificationDialog"
           Options="new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium,DisableBackdropClick = true}">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined" 
                       Size="Size.Small"
                       OnClick="(() => _createSpecificationDialog.Close())"
                       Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <CreateOrderSpecificationComponent OrderId="OrderId" RefreshParent="EndCreateSpecification" />
    </DialogContent>
</MudDialog>
<MudDialog @bind-IsVisible="_visibleViewPdfDialog" Style="height: 100VH" 
           Options="new DialogOptions() {DisableBackdropClick = true,FullWidth = true,FullScreen = true, NoHeader = true}"  ClassContent="myPdfViewerDialog">
    <TitleContent>
        
    </TitleContent>
    <DialogContent>
        <div class="clearPdfDialogButton">
            <MudIconButton 
                Size="Size.Large"
                OnClick="() => _visibleViewPdfDialog = false"
                Color="Color.Info" Icon="@Icons.Material.Filled.Close"></MudIconButton>
        </div>
  
        @if (_loading)
        {<div style="width: 100%; height: 100%;" class="d-flex align-items-center justify-content-center">
             <MudText Typo="Typo.h4">Загрузка...</MudText>
         </div>
        }
        else
        {
            <div style ="overflow: scroll; height: 100VH;">
                <PdfViewer @ref="viwer" Class="myPdfViwer mb-3"
                            Url="@(string.Format("data:application/pdf;base64,{0}", pdfContent))" 
                            OnDocumentLoaded="OnDocumentLoaded"
                            OnPageChanged="OnPageChanged" />
                <div class="stampGrid" style="@_visibleStampPdf">
                    <div class="stampGrid__block">                           
                        
                        <div class="stampGrid__container">
                            <MudSlider 
                                @bind-Value="valueX"
                                Style="width: 595px;"
                                       Size="Size.Medium"
                                Min="20" Max="480"
                                Color="Color.Info"/>
                            
                            <div style="position:absolute; top: 420px; right: 190px;  transform: rotate(270deg);">
                                <MudSlider
                                    @bind-Value="valueY" 
                                    Min="20" 
                                    Max="712"
                                    Size="Size.Medium" 
                                    Style="width: 842px;"
                                    Color="Color.Info"/>
                            </div>
                            <MudPaper Class="stampItem" Style="@($"bottom:{valueY}px;left: {valueX}px;")">
                                <div class="containerbackground">Печать</div> 
                            </MudPaper>
                            
                        </div>
                    </div>
                </div>
                </div>
        }
        
        <div class="getIndexPdfDialogButton">
            <MudText>@valueX</MudText> <MudText>@valueY</MudText>
            <MudButton OnClick="OpenStampGrid">inp</MudButton>
            <MudButton OnClick="OpenStampGrid">применить</MudButton>
        </div>
        
    </DialogContent>
</MudDialog>
<MudDialog @bind-IsVisible="_visibleStampPdfDialog" Style="height: 100VH"
           Options="new DialogOptions() {DisableBackdropClick = true,FullWidth = true,FullScreen = true, NoHeader = true}"  ClassContent="myPdfViewerDialog">
    <TitleContent>
        
    </TitleContent>
    <DialogContent>
        <div class="clearPdfDialogButton">
            <MudIconButton 
                Size="Size.Large"
                OnClick="() => _visibleViewPdfDialog = false"
                Color="Color.Info" Icon="@Icons.Material.Filled.Close"></MudIconButton>
        </div>
        <MudTooltip Text="Delete">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" />
        </MudTooltip>
      
        
    </DialogContent>
</MudDialog>

@code {
    PdfViewer viwer;
    private bool _loading;
    [Parameter] public Guid OrderId { get; set; }
    IEnumerable<InfoSetFromDocumentToOrder>? InfoSets { get; set; }
    IGrouping<int,InfoSetFromDocumentToOrder>[]? GroupInfoSet { get; set; }
    InfoSetFromDocumentToOrder? CurrentInfoSet { get; set; }
    string pdfContent = "";
    AddStampToPdfRequest StampToPdfRequest { get; set; } = new AddStampToPdfRequest();
    private int _currentPage;
    MudDialog? _createSpecificationDialog;
    private bool _visibleCreateSpecificationDialog;
    private bool _visibleViewPdfDialog;
    private bool _visibleStampPdfDialog;
    string _visibleStampPdf = "display: none";
    public double valueX = 50;
    public double valueY = 50;
   
    protected override async Task OnInitializedAsync()
    {
        await LoadDocInfoList();
    }
    private async Task LoadDocInfoList()
    {
        InfoSets = await DocumentManager.GetAllInfoSetsForOrderAsync(OrderId);
       GroupInfoSet = InfoSets.GroupBy(g => g.DocumentType).ToArray();
    }
    private async Task EndCreateSpecification()
    {
        _createSpecificationDialog!.Close();
        await LoadDocInfoList();
    }
    private async Task CreateDocument()
    {
        var result = await DocumentManager.CreatePaymentInvoicePdfAsync(OrderId);
       

        await LoadDocInfoList();
    }
    private async Task RemoveDocument(Guid infoSetId)
    {
        if(!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите удаление!!!"))
            return;
        await DocumentManager.RemoveDocumentAsync(infoSetId);
        await LoadDocInfoList();
    }
    private async Task ClickToSave(Guid infoSetId)
    {
       if(!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите скачивание"))
              return;
        CurrentInfoSet = InfoSets?.FirstOrDefault(f => f.Id == infoSetId);
        if (CurrentInfoSet == null)return;
        var bytFile = await DocumentManager.GetDocumentBytArrayAsync(CurrentInfoSet.Id);
            await _jsRuntime.InvokeVoidAsync
                ("BlazorDownloadFile", CurrentInfoSet.Name, "application/octet-stream", bytFile);
    } 
    private async Task GetIndexPage()
    {
       string tu =  await _jsRuntime.InvokeAsync<string>
                 ("ReturnIndexPdfFile");
    }
    private async Task OpenStampGrid()
    {
        var methodInfo = typeof(PdfViewer).GetMethod("ResetZoomAsync", BindingFlags.NonPublic | BindingFlags.Instance);
        if (methodInfo != null) methodInfo.Invoke(viwer, null);
        _visibleStampPdf = _visibleStampPdf == "display: none" ? "display: block" : "display: none";
    }
    private async Task ViewPdfDialog(Guid infoSetId)
    {_loading = true;
        _visibleViewPdfDialog = true;
        
        CurrentInfoSet = InfoSets?.FirstOrDefault(f => f.Id == infoSetId);
        if (CurrentInfoSet == null)return;
        var bytFile = await DocumentManager.GetDocumentBytArrayAsync(CurrentInfoSet.Id);
        // pdfContent = "data:application/pdf;base64,";
        pdfContent = System.Convert.ToBase64String(bytFile);
        
        _loading = false;
    }
    private string eventLog { get; set; } = $"Last event: ..., CurrentPage: 0, TotalPages: 0";
    private void OnDocumentLoaded(PdfViewerEventArgs args)
        => eventLog = $"Last event: OnDocumentLoaded, CurrentPage: {args.CurrentPage}, TotalPages: {args.TotalPages}";

    private void OnPageChanged(PdfViewerEventArgs args)
    {
        eventLog = $"Last event: OnPageChanged, CurrentPage: {args.CurrentPage}, TotalPages: {args.TotalPages}";
        _currentPage = args.CurrentPage;
    }

    private void AddStampPosition()
    {
        StampToPdfRequest.StampPositionList ??= new List<StampPosition>();
        StampToPdfRequest.StampPositionList.Add(new StampPosition()
        {
            PageNumber = _currentPage, PercentOfBottomEdge = valueY, PercentOfLeftEdge = valueX, 
        });
    }
}
<style>
    .myPdfViewerDialog {
        padding: 0!important;height: 100VH;
    }
    .bg-body-tertiary {
        position: absolute !important;
        width: 350px;
    }

    .getIndexPdfDialogButton {
        top: 50px;
        position: absolute;
        right: 10px;
    }

    .stampGrid {
        position: absolute;
        top: 0;
      
    }

    .stampGrid__block {
        display: flex;
        justify-content: center;
        width: 100VW;
        height: 100VH;
    }
    .stampGrid__container {
       /*  display: flex;
        flex-wrap: wrap; */
        position: relative;
        width: 595px;
       min-width:  595px;
        height: 842px;
    }

    .stampItem {
        position: absolute;
        height: 100px;
        width: 100px;
        opacity: 0.7;
        border: solid black 2px;
        border-radius: 50%;
    }
    .containerbackground { 
        margin: 2rem;
        font-weight: bold;
        position: absolute; 
        top: 0; 
        left: 0; 
        bottom: 0; 
        z-index: -1; 
        transform: rotate(300deg); 
        -webkit-transform: rotate(300deg); 
        color: black; 
    } 
</style>