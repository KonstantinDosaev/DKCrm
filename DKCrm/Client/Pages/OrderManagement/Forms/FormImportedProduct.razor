@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Client.Pages.ProductManagement
@using DKCrm.Client.Pages.OfferManagement.Components
@using DKCrm.Shared.Models.OfferModels

<MudText Typo="Typo.h5">@TitleText</MudText>
@if (ImportedProduct != null)
{
    <MudForm @ref="ImportedOrderForm" @bind-IsValid="@_success">
	    <MudPaper Elevation="12" Class="p-4">
            <div class = "d-flex align-items-center">
	            <MudAutocomplete T="Product" Placeholder="Введите партномер или название продукта"
	                             Label="Продукт"  Dense="true"
	                             Value="ImportedProduct.Product"
	                             ValueChanged="OnProduct"
	                             SearchFunc="@Search"
	                             Variant="Variant.Outlined"
	                             ShowProgressIndicator="true"
	                             ToStringFunc="@(e => e == null ? null : $"{e.PartNumber} / {e.Name} / {e.Brand?.Name}")"
	                             MinCharacters="1"
	                             Class="mb-3 mr-2" Required="true"/>
	            <div>
		            <MudTooltip Text="Если товар не найден вы можете">
			            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined"
				              Size="@Size.Large"
			                           OnClick="() => _visibleCreatedProductDialog = true"
			                           Color="Color.Tertiary"></MudIconButton>
		            </MudTooltip>
	            </div>
            </div>
		    @if (ImportedProduct.Product != null && !ImportedProduct.Product.IsDeleted)
		    {
			    <MudButton Class="" Variant="Variant.Outlined" Size="Size.Medium"
			               OnClick="() => _visibleDetailProductDialog = true"
			               Color="Color.Tertiary">Подробности о продукте</MudButton>
			    <ProductDetailDialog VisibleDialog="_visibleDetailProductDialog"
			                         ProductId="ImportedProduct.Product.Id"
			                         Close="() => _visibleDetailProductDialog = false"/>
			    @if (PriceForImportOffer != null)
			    {

				    <div class="p-2"> 

					    <div class="mb-1 border-bottom">
						    <MudText Class="px-3" style="background-color: rgba(18, 9, 62, 0.18)">
							    @($"{PriceForImportOffer.DateTimeCreate.ToShortDateString()} - {PriceForImportOffer.DateTimeOver?.ToShortDateString()}")
						    </MudText>
						    <MudText Class="px-3" style="background-color: rgba(18, 9, 62, 0.18)">
							    @($"Колю-во: {PriceForImportOffer.Quantity} шт. / Своб.: {PriceForImportOffer.Quantity - (PriceForImportOffer.ImportedProducts?.Select(s=>s.Quantity).Sum() ?? 0)}")
						    </MudText>
						    <div class="d-flex justify-content-between px-2">
							    <MudText>@($"{decimal.Round(PriceForImportOffer.Value, 4)}")</MudText>
							    <MudText>@($"{PriceForImportOffer.Currency}")</MudText>
						    </div>
						    <div class="d-flex justify-content-between px-2">
							    <MudText>@($"{decimal.Round(PriceForImportOffer.ValueLocal, 4)}")</MudText>
							    <MudText>@($"{PriceForImportOffer.CurrencyLocal}")</MudText>
						    </div>
					    </div>

				    </div>
			    }
                @if (!IsEditForm)
                {
	                <MudButton Variant="Variant.Outlined" Class="ml-2"
	                           Size="Size.Medium"
	                           OnClick="() => OnOffers()"
	                           Color="Color.Tertiary">Предложения</MudButton>
                }
		    }
	    </MudPaper>
        <MudPaper Elevation="12" Class="p-4 my-1">
            <MudNumericField Label="Количество" @bind-Value="ImportedProduct.Quantity"
                          For="@(() => ImportedProduct.Quantity)"
                          Variant="Variant.Outlined"
                          RequiredError="Введите количество"
                          Class="mb-3"
                          Max="@(FreeQuantityOffer)"/>
            @if (StorageList != null)
            {
                <MudText Typo="Typo.h5">Направление:</MudText>
                <MudText Typo="Typo.h6">На склад:</MudText>
                <MudMenu Style="margin: 1rem 0;" Variant="Variant.Filled"
                         Color="Color.Tertiary"Label="Добавить на склад">

                    @foreach (var item in StorageList)
                    {
                        <MudMenuItem OnClick="() => AddPurchaseAtStorage(item)">
                            @item.Name <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary"></MudIcon>
                        </MudMenuItem>
                    }
                </MudMenu>
                @if (ImportedProduct.PurchaseAtStorageList != null && ImportedProduct.PurchaseAtStorageList.Any())
                {
                    foreach (var item in ImportedProduct.PurchaseAtStorageList)
                    {
                        <div class="d-flex align-items-center">
                            <MudText Class="mr-2" Typo="Typo.body1"><b>@(StorageList.FirstOrDefault(f => f.Id == item.StorageId)?.Name) :</b></MudText>
                            <MudTextField Variant="Variant.Outlined"
                                          @bind-Value="item.Quantity"
                                          For="@(() => item.Quantity)"
                                          Immediate="true"
                                          Label="Количество"/>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                           Color="Color.Warning"
                                           OnClick="() => RemovePurchaseAtStorage(item)"/>
                        </div>
                    }
                }
            }
            @if (NotEquippedExportedProducts != null)
            {
                <MudText Typo="Typo.h6">На реализацию:</MudText>
                <MudMenu Style="margin: 1rem 0;" Variant="Variant.Filled"
                         Color="Color.Tertiary"Label="Добавить на экспорт">

                    @foreach (var item in NotEquippedExportedProducts)
                    {
                        <MudMenuItem OnClick="() => AddPurchaseAtExport(item)">
                            @item.ExportedOrder?.Number @item.ExportedOrder?.Id @item.ExportedOrder?.DateTimeCreated 
                            <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary"/>
                        </MudMenuItem>
                    }
                </MudMenu>
                @if (ImportedProduct.PurchaseAtExportList != null && ImportedProduct.PurchaseAtExportList.Any())
                {
                    foreach (var item in ImportedProduct.PurchaseAtExportList)
                    {
                        <div class="d-flex align-items-center">
                            <MudText Class="mr-2" Typo="Typo.body1">
                                <b>@item.ExportedProduct?.ExportedOrder?.Number @item.ExportedProduct?.ExportedOrder?.DateTimeCreated:</b>
                            </MudText>
                            <MudTextField Variant="Variant.Outlined"
                                          @bind-Value="item.Quantity"
                                          For="@(() => item.Quantity)"
                                          Immediate="true"
                                          Label="Количество"/>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                           Color="Color.Warning"
                                           OnClick="() => RemovePurchaseAtExport(item)"/>
                        </div>
                    }
                }
            }
        </MudPaper>
        
        <MudPaper Elevation="12" Class="p-4">
            @if (!_isSetCurrency)
            {
                <MudText Color="Color.Warning">Установите валюты в настройках основного заказа</MudText>
            }
            <div class="d-flex align-items-center">
                <MudNumericField Disabled="!_isSetCurrency"
                                 Label="Цена поставщика" @bind-Value="ImportedProduct.PriceInSupplierCurrency"
                                 For="@(() => ImportedProduct.PriceInSupplierCurrency)"
                                 Variant="Variant.Outlined"
                                 RequiredError="Введите количество"
                                 Class="mb-3"
                                 Format="0.##"
                                 Step="0.1M"
                                 T="decimal?" Min="0"
                                 Adornment="Adornment.End" AdornmentText="@ImportedProduct.ImportedOrder!.SupplierCurrency" />
                <MudIconButton Icon="@Icons.Material.Filled.Loop" 
                               OnClick="@(() => ConvertedCurrency(ImportedProduct.ImportedOrder.SupplierCurrency!,ImportedProduct.PriceInSupplierCurrency))" />
            </div>
            <div class="d-flex align-items-center">
                <MudNumericField Disabled="!_isSetCurrency" 
                                 Label="Цена в валюте сделки" 
                                 @bind-Value="ImportedProduct.PriceInTransactionCurrency"
                                 For="@(() => ImportedProduct.PriceInTransactionCurrency)"
                                 Variant="Variant.Outlined"
                                 RequiredError="Введите количество"
                                 Class="mb-3"
                                 Format="0.##"
                                 Step="0.1M"
                                 T="decimal?" Min="0"
                                 Adornment="Adornment.End" AdornmentText="@ImportedProduct.ImportedOrder!.TransactionCurrency"/>
                <MudIconButton Icon="@Icons.Material.Filled.Loop"
                               OnClick="@(() => ConvertedCurrency(ImportedProduct.ImportedOrder.TransactionCurrency!,ImportedProduct.PriceInTransactionCurrency))" />
            </div>
            <div class="d-flex align-items-center">
                <MudNumericField Disabled="!_isSetCurrency" Label="Цена в локальной валюте" @bind-Value="ImportedProduct.PriceLocal"
                                 For="@(() => ImportedProduct.PriceLocal)"
                                 Variant="Variant.Outlined"
                                 RequiredError="Введите количество"
                                 Class="mb-3"
                                 Format="0.##"
                                 Step="0.1M"
                                 T="decimal?" Min="0"
                                 Adornment="Adornment.End" AdornmentText="@ImportedProduct.ImportedOrder!.LocalCurrency"/>
                <MudIconButton Icon="@Icons.Material.Filled.Loop" 
                               OnClick="@(() => ConvertedCurrency(ImportedProduct.ImportedOrder.LocalCurrency!,ImportedProduct.PriceLocal))" />
            </div>
        </MudPaper>
        <MudCardActions>
            <MudButton Variant="Variant.Outlined" 
                       Size="Size.Medium" OnClick="Validation" 
                       Color="Color.Info">@ButtonText</MudButton>
           </MudCardActions>
    </MudForm>

    <CreateProductDialog VisibleDialog="_visibleCreatedProductDialog"
                         RefreshProductList="StateHasChanged"
                         Close="() => _visibleCreatedProductDialog=false" />
    @if (_visibleOffers)
    {
        <MudDialog @bind-Visible="_visibleOffers" Style="padding: 0" @ref = "_importOfferDialog"
	               Options="new DialogOptions(){CloseButton = true, FullScreen = true,}" Class="no-padding">
		    <DialogContent>
                <ImportedOfferComponent OnSelectButton="true" SelectedPriceEventCallback="AddOfferLink" CompanyId="FilterOfferTuple.CurrentCompanyId" FilterTuple="FilterOfferTuple" />
		    </DialogContent>
	    </MudDialog>
    }
}

@code {
    [Parameter]public MudForm? ImportedOrderForm { get; set; }
    [Parameter] public ImportedProduct? ImportedProduct { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool IsEditForm { get; set; }

    private PriceForImportOffer? PriceForImportOffer { get; set; }
    public List<Storage>? StorageList { get; set; }
    public List<ExportedProduct>? NotEquippedExportedProducts { get; set; }
    private int FreeQuantityOffer = Int32.MaxValue;
    
    FilterOfferTuple FilterOfferTuple = new FilterOfferTuple();
    private MudDialog _importOfferDialog;
    bool _success;
    bool _visibleOffers;
    private bool _isSetCurrency;
    private bool _visibleCreatedProductDialog; 
    private bool _visibleDetailProductDialog;

    protected override async Task OnInitializedAsync()
    {
        if (ImportedProduct != null)
        {

            if (ImportedProduct.ImportedOrder != null)
            {
                if (ImportedProduct!.ImportedOrder!.LocalCurrency != null && 
                    ImportedProduct!.ImportedOrder.SupplierCurrency != null && 
                    ImportedProduct!.ImportedOrder.TransactionCurrency != null)
                {
                    _isSetCurrency = true;
                }
            }

            if (ImportedProduct.PriceForImportOffer != null)
            {
	            var offer = await ImportOfferManager.GetDetailsAsync((Guid)ImportedProduct.PriceForImportOffer.ImportOfferId);

	            PriceForImportOffer = offer.PricesForImportOffer.FirstOrDefault(f=>f.Id == ImportedProduct.PriceForImportOfferId);

	             FreeQuantityOffer = ImportedProduct.Quantity +
	                              ((int)PriceForImportOffer.Quantity - (PriceForImportOffer.ImportedProducts?.Select(s => s.Quantity).Sum() ?? 0));

            }

            if (ImportedProduct.Product != null)
                NotEquippedExportedProducts = await ExportedProductManager.GetNotEquippedAsync((Guid)ImportedProduct?.ProductId!);
        }
        StorageList = await StorageManager.GetAsync();
       
    }
    
    private async Task Validation()
    {
        if (ImportedOrderForm!.IsValid)
        {
            ImportedProduct!.ProductId = ImportedProduct!.Product!.Id;
            await OnValidSubmit.InvokeAsync();
        }
        else
            await ImportedOrderForm.Validate();
    }

    private async Task OnProduct(Product product)
    {
        ImportedProduct!.Product = product;
        ImportedProduct.ProductId = product.Id;
        NotEquippedExportedProducts = await ExportedProductManager.GetNotEquippedAsync((Guid)ImportedProduct?.ProductId!);

    }
    private async Task<IEnumerable<Product>> Search(string value, CancellationToken token)
    {
        var result = await ProductManager.GetSearchProductAsync(value);
        return result;
    }
    private async void AddPurchaseAtStorage(Storage storage)
    {
        if (ImportedProduct != null)
        {
            ImportedProduct.PurchaseAtStorageList ??= new List<PurchaseAtStorage>();
            ImportedProduct.StorageList ??= new List<Storage>();
            ImportedProduct.StorageList.Add(storage);
            ImportedProduct.PurchaseAtStorageList.Add(new PurchaseAtStorage
            {
                Storage = storage, StorageId = storage.Id,
                ImportedProduct = ImportedProduct, ImportedProductId = ImportedProduct.Id
            });
        }
        await InvokeAsync(StateHasChanged);
    }
    private async void RemovePurchaseAtStorage(PurchaseAtStorage purchaseAtStorage)
    {
        if (ImportedProduct != null)
        {
            ImportedProduct.StorageList!.Remove(purchaseAtStorage.Storage!);
            ImportedProduct.PurchaseAtStorageList!.Remove(purchaseAtStorage);
        }
        await InvokeAsync(StateHasChanged);
    }
    private async void AddPurchaseAtExport(ExportedProduct export)
    {
        if (ImportedProduct != null)
        {
            ImportedProduct.PurchaseAtExportList ??= new List<PurchaseAtExport>();
            ImportedProduct.ExportedProducts ??= new List<ExportedProduct>();
            ImportedProduct.ExportedProducts.Add(export);
            ImportedProduct.PurchaseAtExportList.Add(new PurchaseAtExport()
            {
                ExportedProduct = export, ExportedProductId = export.Id,
                ImportedProduct = ImportedProduct, ImportedProductId = ImportedProduct.Id
            });
        }
        await InvokeAsync(StateHasChanged);
    }
    private async void RemovePurchaseAtExport(PurchaseAtExport purchaseAtExport)
    {
        if (ImportedProduct != null)
        {
            ImportedProduct.ExportedProducts!.Remove(purchaseAtExport.ExportedProduct!);
            ImportedProduct.PurchaseAtExportList!.Remove(purchaseAtExport);
        }
        await InvokeAsync(StateHasChanged);
    }
    private async void ConvertedCurrency(string charCode, decimal? price)
    {
       var supplierCharCode = ImportedProduct!.ImportedOrder!.SupplierCurrency!;
        var transactionCharCode = ImportedProduct!.ImportedOrder!.TransactionCurrency!;
        var localCharCode = ImportedProduct!.ImportedOrder!.LocalCurrency!;
        var curArr = new List<string>
        {
            supplierCharCode,
            transactionCharCode!,
            localCharCode!
        };
        curArr.Remove(charCode);
        var convertResult = await CurrencyManager.CurrencyConverter(charCode, price, 0, curArr);
        foreach (var item in convertResult)
        {
            if (item.charCod==supplierCharCode)
            {
                ImportedProduct.PriceInSupplierCurrency=item.Item2;
            }
            else if (item.charCod==transactionCharCode)
            {
                ImportedProduct.PriceInTransactionCurrency=item.Item2;
            }
            else if (item.charCod==localCharCode)
            {
                ImportedProduct.PriceLocal=item.Item2;
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddOfferLink(PriceForImportOffer price)
    {
	    if (ImportedProduct != null)
	    {
		    var impProdByOffers = ImportedProduct.ImportedOrder?.ImportedProducts?.Select(s => s.PriceForImportOfferId).ToArray();
		    if (impProdByOffers != null && impProdByOffers.Any())
		    {
			    if (impProdByOffers.Contains(price.Id))
			    {
				    _snackBar.Add("Данный заказ содержит продукт по данному предложению");
                    return;
			    }
		    }
		    PriceForImportOffer = price;
		   ImportedProduct.PriceForImportOfferId ??= price.Id;
		  
	    }

	    FreeQuantityOffer = (int)price.Quantity - (price.ImportedProducts?.Select(s => s.Quantity).Sum() ?? 0);
	    await _importOfferDialog.CloseAsync();
    }
    
    private async Task OnOffers()
    { 
	    FilterOfferTuple = new FilterOfferTuple();
        FilterOfferTuple.ProductId = ImportedProduct?.ProductId;
        FilterOfferTuple.CurrentCompanyId = ImportedProduct?.ImportedOrder?.SellersCompanyId;
        _visibleOffers = true;
    }
}
