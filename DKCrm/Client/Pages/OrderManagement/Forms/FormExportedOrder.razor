@using DKCrm.Shared.Models.OrderModels
@using Microsoft.AspNetCore.Components
@using DKCrm.Shared.Models.CompanyModels
@using DKCrm.Shared.Constants
<MudText Typo="Typo.h5">@TitleText</MudText>
@if (ExportedOrder != null)
{
    <MudForm @ref="OrderForm" @bind-IsValid="@_success">
        <MudCard>
            <MudCardContent>

                <MudTextField @bind-Value="@ExportedOrder.Name"
                          For="@(() => ExportedOrder.Name)"
                          Immediate="true"
                          Label="Название заказа" />
                <MudSelect Variant="Variant.Outlined" Placeholder="Выберите нашу компанию" @bind-Value="ExportedOrder.OurCompany"
                       Label="Наша компания"
                       T="Company" ToStringFunc="companyType => companyType.Name.ToString()"
                       CloseIcon="@Icons.Material.Filled.Flag"
                       AdornmentColor="Color.Tertiary">
                    @if (OurCompanies != null)
                    {
                        @foreach (var item in OurCompanies)
                        {
                            <MudSelectItem OnClick="() => ExportedOrder.OurEmployeeId=null" T="Company" Value="@item">@item.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                @if (ExportedOrder.OurCompany is { Employees: { } })
                {
                    <MudSelect Variant="Variant.Outlined" Placeholder="Выберите нашего сотрудника" @bind-Value="ExportedOrder.OurEmployee"
                               Label="Наш сотрудник"
                       T="Employee" ToStringFunc="eml => eml.FirstName.ToString() + eml.MiddleName + eml.LastName"
                       CloseIcon="@Icons.Material.Filled.Flag"
                       AdornmentColor="Color.Tertiary">

                        @foreach (var item in ExportedOrder.OurCompany.Employees)
                        {
                            <MudSelectItem T="Employee" Value="@item">@item.FirstName @item.MiddleName @item.LastName</MudSelectItem>
                        }
                    </MudSelect>
                }
                <MudSelect Variant="Variant.Outlined" Placeholder="Выберите компанию покупателя" @bind-Value="ExportedOrder.CompanyBuyer"
                           Label="Компания покупатель"
                       T="Company" ToStringFunc="company => company.Name.ToString()"
                       CloseIcon="@Icons.Material.Filled.Flag"
                       AdornmentColor="Color.Tertiary"
                       OnClose="() => ExportedOrder.CompanyBuyer=null">
                    @if (BuyerCompanies != null)
                    {
                        @foreach (var item in BuyerCompanies)
                        {
                            <MudSelectItem T="Company" OnClick="() => ExportedOrder.EmployeeBuyerId=null" Value="@item">@item.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                @if (ExportedOrder.CompanyBuyer is { Employees: { } })
                {
                    <MudSelect Variant="Variant.Outlined" Placeholder="Выберите сотрудника покупателя" @bind-Value="ExportedOrder.EmployeeBuyerId"
                               Label="Сотрудник компании покупателя"
                       T="Guid?" ToStringFunc="eml => eml.ToString()"
                       CloseIcon="@Icons.Material.Filled.Flag"
                       AdornmentColor="Color.Tertiary">

                        @foreach (var item in ExportedOrder.CompanyBuyer.Employees)
                        {
                            <MudSelectItem T="Guid?" Value="@item.Id">@item.FirstName @item.MiddleName @item.LastName</MudSelectItem>
                        }
                    </MudSelect>
                }
                <MudItem Class="py-0 px-3">
                    <MudSelect TextChanged="() => _currencyEdited=true" Variant="Variant.Outlined" Placeholder="Выберите валюту покупателя" @bind-Value="ExportedOrder.BuyerCurrency"
                           Label="Валюта покупателя"
                           T="string" ToStringFunc="c => c.ToString()"
                           CloseIcon="@Icons.Material.Filled.Flag"
                           AdornmentColor="Color.Tertiary"
                           OnOpen="async () => CurrencyCharCodes ??= await GetCurrencyCharCodes()">
                        @if (CurrencyCharCodes != null)
                        {
                            @foreach (var item in CurrencyCharCodes)
                            {
                                <MudSelectItem T="string" Value="@item.charCode">@item.charCode @item.name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem Class="py-0 px-3">
                    <MudSelect TextChanged="() => _currencyEdited=true" Variant="Variant.Outlined" Placeholder="Выберите валюту сделки" @bind-Value="ExportedOrder.TransactionCurrency"
                           Label="Валюта сделки"
                           T="string" ToStringFunc="c => c.ToString()"
                           CloseIcon="@Icons.Material.Filled.Flag"
                           AdornmentColor="Color.Tertiary"
                           OnOpen="async () => CurrencyCharCodes ??= await GetCurrencyCharCodes()">
                        @if (CurrencyCharCodes != null)
                        {
                            @foreach (var item in CurrencyCharCodes)
                            {
                                <MudSelectItem T="string" Value="@item.charCode">@item.charCode @item.name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem Class="py-0 px-3">
                    <MudSelect Disabled="true" Variant="Variant.Outlined" Placeholder="Выберите локальную валюту" @bind-Value="ExportedOrder.LocalCurrency"
                           Label="Локальная валюта"
                           T="string" ToStringFunc="c => c.ToString()"
                           CloseIcon="@Icons.Material.Filled.Flag"
                           AdornmentColor="Color.Tertiary"
                           OnOpen="async () => CurrencyCharCodes ??= await GetCurrencyCharCodes()">
                        @if (CurrencyCharCodes != null)
                        {
                            @foreach (var item in CurrencyCharCodes)
                            {
                                <MudSelectItem T="string" Value="@item.charCode">@item.charCode @item.name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="Validation" Color="Color.Tertiary">@ButtonText</MudButton>
            </MudCardActions>
        </MudCard>
    </MudForm>
}


@code {
    [Parameter]public MudForm? OrderForm { get; set; }
    [Parameter] public ExportedOrder? ExportedOrder { get; set; } = null!;
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter]public bool IsEditForm { get; set; }
    public List<Company>? Companies { get; set; } = null!;

    public List<Company>? OurCompanies { get; set; }
    public List<Company>? BuyerCompanies { get; set; }
    public List<ExportedOrderStatus>? ExportedOrderStatus { get; set; }
 
    public List<(string charCode, string name)>? CurrencyCharCodes { get; set; }
    private async Task<List<(string charCode, string name)>> GetCurrencyCharCodes() => await CurrencyManager.GetCurrencyCharCode();
    bool _currencyEdited;
    bool _success;
    protected override async Task OnInitializedAsync()
    {
        ExportedOrderStatus = await ExportedOrderStatusManager.GetAsync();
        Companies ??= await CompanyManager.GetAsync();
        OurCompanies = Companies.Where(w => w.CompanyType!.Name == TypeCompanyNames.OurCompanies).ToList();
        BuyerCompanies = Companies.Where(w => w.CompanyType!.Name == TypeCompanyNames.Customers).ToList();

    }
    private async Task Validation()
    {
        if (OrderForm!.IsValid)
        {
            if (IsEditForm && _currencyEdited)
                await UpdatePricesInExportrdProducts();
            
            await OnValidSubmit.InvokeAsync();
        }

        else
            await OrderForm.Validate();

    }
    private async Task UpdatePricesInExportrdProducts()
    {
        if (!IsEditForm)return;
        var productList = ExportedOrder!.ExportedProducts;
        if (productList == null || !productList.Any()) return;
        foreach (var product in productList)
        {
            var supplierCharCode = ExportedOrder!.BuyerCurrency!;
            var transactionCharCode = ExportedOrder!.TransactionCurrency!;
            var convertResult = await CurrencyManager.CurrencyConverter(currencyToConvert: ExportedOrder.LocalCurrency!,
                firstPrice: product.PriceLocal, currencyPercent: (double)ExportedOrder.CurrencyPercent!, currencyCharCodesToConvert: new List<string>() { product.BuyerCurrency!, product.TransactionCurrency! });
            foreach (var item in convertResult)
            {
                if (item.charCod==supplierCharCode)
                {
                    product.PriceInBuyerCurrency=item.Item2;
                }
                else if (item.charCod==transactionCharCode)
                {
                    product.PriceInTransactionCurrency=item.Item2;
                }
            }
            await ExportedProductManager.UpdateAsync(product);
        }
    }
}
