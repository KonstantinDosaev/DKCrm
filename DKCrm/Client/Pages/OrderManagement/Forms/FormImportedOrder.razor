@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Shared.Models.CompanyModels
@using DKCrm.Shared.Constants

<MudText Typo="Typo.h5">@TitleText</MudText>
@if (ImportedOrder != null)
{
    <MudForm @ref="ImportedOrderForm" @bind-IsValid="@_success">
        <MudCard>
             <MudCardContent>

                <MudTextField @bind-Value="@ImportedOrder.Number"
                          For="@(() => ImportedOrder.Number)"
                          Immediate="true"
                          Label="Название заказа" />
                <MudSelect Variant="Variant.Outlined" Placeholder="Выберите нашу компанию" @bind-Value="ImportedOrder.OurCompany" 
                           Label="Наша компания" 
                           T="Company" ToStringFunc="companyType => companyType.Name.ToString()"
                           CloseIcon="@Icons.Material.Filled.Flag" 
                           AdornmentColor="Color.Tertiary">
                    @if (OurCompanies != null)
                    {
                        @foreach (var item in OurCompanies)
                        {
                            <MudSelectItem OnClick="() => ImportedOrder.OurEmployeeId=null" T="Company" Value="@item">@item.Name</MudSelectItem>
                        }

                    }
                </MudSelect>
             @if (ImportedOrder.OurCompany is {Employees: { } })
             {
                 <MudSelect Variant="Variant.Outlined" Placeholder="Выберите нашего сотрудника" @bind-Value="ImportedOrder.OurEmployeeId"
                       Label="Сотрудник"
                            T="Guid?" ToStringFunc="eml => eml.ToString()"
                            CloseIcon="@Icons.Material.Filled.Flag"
                            AdornmentColor="Color.Tertiary">

                     @foreach (var item in ImportedOrder.OurCompany.Employees)
                     {
                         <MudSelectItem T="Guid?" Value="@item.Id">@item.FirstName @item.MiddleName @item.LastName</MudSelectItem>
                     }


                 </MudSelect>
             }
                
                <MudSelect Variant="Variant.Outlined" Placeholder="Выберите компанию поставщика" @bind-Value="ImportedOrder.SellersCompany"
                       Label="Компания поставщик"
                       T="Company" ToStringFunc="company => company.Name.ToString()"
                           CloseIcon="@Icons.Material.Filled.Flag" 
                           AdornmentColor="Color.Tertiary"
                           OnClose="() => ImportedOrder.EmployeeSeller=null">
                    @if (SellersCompanies != null)
                    {
                        @foreach (var item in SellersCompanies)
                        {
                            <MudSelectItem T="Company" OnClick="() => ImportedOrder.EmployeeSellerId=null" Value="@item">@item.Name</MudSelectItem>
                        }

                    }
                </MudSelect>
             @if (ImportedOrder.SellersCompany is {Employees: { } })
             {
                 <MudSelect Variant="Variant.Outlined" Placeholder="Выберите сотрудника поставщика" @bind-Value="ImportedOrder.EmployeeSellerId"
                       Label="Сотрудник"
                            T="Guid?" ToStringFunc="eml => eml.ToString()"
                            CloseIcon="@Icons.Material.Filled.Flag"
                            AdornmentColor="Color.Tertiary">

                     @foreach (var item in ImportedOrder.SellersCompany.Employees)
                     {
                         <MudSelectItem T="Guid?" Value="@item.Id">@item.FirstName @item.MiddleName @item.LastName</MudSelectItem>
                     }
                 </MudSelect>
             }
                <MudNumericField  Label="Процент на курс валюты"
                                  ValueChanged="SetPercent"
                                  Variant="Variant.Outlined"
                                  RequiredError="Введите процент"
                                  Class="mb-3"
                                  Format="0.##"
                                  Step="0.1F"
                                  T="double?" Min="0" Max="100"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Percent" 
                                  Value="ImportedOrder.CurrencyPercent"/>
                <MudNumericField Label="НДС"
                                 ValueChanged="SetNds"
                                 Variant="Variant.Outlined"
                                 RequiredError="Введите НДС"
                                 Class="mb-3"
                                 Format="0.##"
                                 Step="0.1F"
                                 T="double?" Min="0" Max="100"
                                 Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Percent" 
                                 Value="ImportedOrder.Nds"/>
        
                <MudItem  Class="py-0 px-3">
                    <MudSelect  Variant="Variant.Outlined" Placeholder="Выберите валюту поставщика"
                                ValueChanged="SetSupplierCurrency"
                           Label="Валюта поставщика"
                           T="string" ToStringFunc="c => c.ToString()"
                           CloseIcon="@Icons.Material.Filled.Flag"
                           AdornmentColor="Color.Tertiary"
                                OnOpen="async () => CurrencyCharCodes ??= await GetCurrencyCharCodes()" 
                                Value="ImportedOrder.SupplierCurrency">
                        @if (CurrencyCharCodes != null)
                        {
                            @foreach (var item in CurrencyCharCodes)
                            {
                                <MudSelectItem T="string" Value="@item.charCode">@item.charCode @item.name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem Class="py-0 px-3">
                    <MudSelect Variant="Variant.Outlined" 
                               ValueChanged="SetTransactionCurrency"
                               Placeholder="Выберите валюту сделки"
                           Label="Валюта сделки"
                           T="string" ToStringFunc="c => c.ToString()"
                           CloseIcon="@Icons.Material.Filled.Flag"
                           AdornmentColor="Color.Tertiary"
                               OnOpen="async () => CurrencyCharCodes ??= await GetCurrencyCharCodes()"
                           Value="ImportedOrder.TransactionCurrency">
                        @if (CurrencyCharCodes != null)
                        {
                            @foreach (var item in CurrencyCharCodes)
                            {
                                <MudSelectItem T="string" Value="@item.charCode">@item.charCode @item.name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem Class="py-0 px-3">
                    <MudSelect Disabled="true"Variant="Variant.Outlined" Placeholder="Выберите локальную валюту" 
                               ValueChanged="SetLocalCurrency"
                               Label="Локальная валюта"
                           T="string" ToStringFunc="c => c.ToString()"
                           CloseIcon="@Icons.Material.Filled.Flag"
                           AdornmentColor="Color.Tertiary"
                               OnOpen="async () => CurrencyCharCodes ??= await GetCurrencyCharCodes()"
                           Value="ImportedOrder.LocalCurrency">
                        @if (CurrencyCharCodes != null)
                        {
                            @foreach (var item in CurrencyCharCodes)
                            {
                                <MudSelectItem T="string" Value="@item.charCode">@item.charCode @item.name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="Validation" Color="Color.Tertiary">@ButtonText</MudButton>
            </MudCardActions>
        </MudCard>
    </MudForm>


}


@code {
    [Parameter] public ImportedOrder ImportedOrder { get; set; } = null!;
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter]public MudForm? ImportedOrderForm { get; set; }
    [Parameter]public bool IsEditForm { get; set; }
    public List<Company>? Companies { get; set; } = null!;

    public List<Company>? OurCompanies { get; set; }
    public List<Company>? SellersCompanies { get; set; }
    public List<ImportedOrderStatus>? ImportedOrderStatusList { get; set; }
    //private List<Employee> OurEmployees { get; set; }
    //private List<Employee> SellerEmployees { get; set; }
    public List<(string charCode, string name)>? CurrencyCharCodes { get; set; }
    private async Task<List<(string charCode, string name)>> GetCurrencyCharCodes() => await CurrencyManager.GetCurrencyCharCode();


    bool _success;
  
    bool _currencyEdited;
    protected override async Task OnInitializedAsync()
    {
        ImportedOrderStatusList = await ImportedOrderStatusManager.GetAsync();
        Companies ??= await CompanyManager.GetAsync();
        OurCompanies = Companies.Where(w => w.CompanyType!.Name == TypeCompanyNames.OurCompanies).ToList();
        SellersCompanies = Companies.Where(w => w.CompanyType!.Name == TypeCompanyNames.Suppliers).ToList();
    }

    private async Task Validation()
    {
        if (ImportedOrderForm!.IsValid)
        {
            if (IsEditForm && _currencyEdited)
                await UpdatePricesInImportedProducts();
            
            await OnValidSubmit.InvokeAsync();
        }

        else
            await ImportedOrderForm.Validate();

    }
    private void SetPercent(double? currency)
    {
        ImportedOrder!.CurrencyPercent = currency;
        _currencyEdited = true;
    }
    private void SetNds(double? nds)
    {
        ImportedOrder!.Nds = nds;
        _currencyEdited = true;
    }
    private void SetSupplierCurrency(string currency)
    {
        ImportedOrder!.SupplierCurrency = currency;
        _currencyEdited = true;
    }
    private void SetTransactionCurrency(string currency)
    {
        ImportedOrder!.TransactionCurrency = currency;
        _currencyEdited = true;
    }
    private void SetLocalCurrency(string currency)
    {
        ImportedOrder!.LocalCurrency = currency;
        _currencyEdited = true;
    }
    private async Task UpdatePricesInImportedProducts()
    {
        if (!IsEditForm)return;
        var productList = ImportedOrder.ImportedProducts;
        if (productList == null || !productList.Any()) return;
        foreach (var importedProduct in productList)
        {
            if (importedProduct.PriceInTransactionCurrency == null || importedProduct.PriceLocal == null || importedProduct.PriceInSupplierCurrency == null)
                continue;

            var supplierCharCode = ImportedOrder!.SupplierCurrency!;
            var transactionCharCode = ImportedOrder!.TransactionCurrency!;
            var convertResult = await CurrencyManager.CurrencyConverter(currencyToConvert: ImportedOrder.LocalCurrency!,
                firstPrice: importedProduct.PriceLocal, currencyPercent: (double)ImportedOrder.CurrencyPercent!, currencyCharCodesToConvert: new List<string>() { supplierCharCode!, transactionCharCode });
            foreach (var item in convertResult)
            {
                if (item.charCod==supplierCharCode)
                {
                    importedProduct.PriceInSupplierCurrency=item.Item2;
                }
                else if (item.charCod==transactionCharCode)
                {
                    importedProduct.PriceInTransactionCurrency=item.Item2;
                }
            }
            await ImportedProductManager.UpdateAsync(importedProduct);
        }
    }
 }
