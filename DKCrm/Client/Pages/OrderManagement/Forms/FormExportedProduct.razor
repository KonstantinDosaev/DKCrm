@using Microsoft.AspNetCore.Components
@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Client.Pages.ProductManagement
<MudText Typo="Typo.h5">@TitleText</MudText>
@if (ExportedProduct != null)
{
    <MudForm @ref="ImportedOrderForm" @bind-IsValid="@_success">
        <MudPaper Elevation="12" Class="p-4">
            <MudAutocomplete T="Product" Placeholder="Введите партномер или название продукта" 
                             Label="Продукт"
                         @bind-Value="ExportedProduct.Product"
                         SearchFuncWithCancel="@Search" 
                             Variant="Variant.Outlined" 
                             ShowProgressIndicator="true"
                             ToStringFunc="@(e=> e==null?null : $"{e.PartNumber} / {e.Name} / {e.Brand?.Name}")"
                             MinCharacters="1"
                             Class="mb-3" />
            @if (ExportedProduct.Product != null)
            {
                <MudButton Class="mb-2" Variant="Variant.Outlined" Size="Size.Medium" 
                           OnClick="()=>_visibleDetailProductDialog=true" 
                           Color="Color.Tertiary">Подробности о продукте</MudButton>
                <ProductDetailDialog VisibleDialog="_visibleDetailProductDialog"
                                     ProductId="ExportedProduct.Product.Id"
                                     Close="() => _visibleDetailProductDialog=false" />
            }
                 <div class="mb-2">  
                     <span>Если товар не найден вы можете </span>
                     <MudButton Variant="Variant.Outlined" 
                                Size="Size.Medium" 
                                OnClick="()=>_visibleCreatedProductDialog=true"
                                Color="Color.Tertiary">Создать новый продукт</MudButton>
                 </div>
                    
            
        </MudPaper>

        <MudPaper Elevation="12" Class="p-4 my-1">
            <MudTextField Label="Количество" @bind-Value="ExportedProduct.Quantity"
                      For="@(() => ExportedProduct.Quantity)"
                          Variant="Variant.Outlined"
                          RequiredError="Введите количество"
                          Class="mb-3"/>
            @if (StorageList != null)
            {
                <MudText Typo="Typo.h5">Направление:</MudText>
                <MudText Typo="Typo.h6">Со склада:</MudText>
                <MudMenu Style="margin: 1rem 0;" Variant="Variant.Filled"
                         Color="Color.Tertiary"Label="Забрать со склада">

                    @foreach (var item in StorageList)
                    {
                        <MudMenuItem T="Guid?"
                         OnClick="() => AddSoldFromStorage(item)">
                            @item.Name <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary"></MudIcon>
                        </MudMenuItem>
                    }
                </MudMenu>
                @if (ExportedProduct.SoldFromStorage != null && ExportedProduct.SoldFromStorage.Any())
                {
                    foreach (var item in ExportedProduct.SoldFromStorage)
                    {
                        <div class="d-flex align-items-center">
                            <MudText Class="mr-2" Typo="Typo.body1"><b>@item.Storage!.Name :</b></MudText>
                            <MudTextField Variant="Variant.Outlined"
                                          @bind-Value="item.Quantity"
                                          For="@(() => item.Quantity)"
                                          Immediate="true"
                                          Label="Количество"/>

                            <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                           Color="Color.Warning"
                           OnClick="() => RemoveSoldFromStorage(item)" />
                        </div>
                    }
                }
            }
            @if (NotEquippedImportedProducts != null)
            {
                <MudText Typo="Typo.h6">Из импорта:</MudText>
                <MudMenu Style="margin: 1rem 0;" Variant="Variant.Filled"
                         Color="Color.Tertiary"Label="Забрать из импорта">

                    @foreach (var item in NotEquippedImportedProducts)
                    {
                        <MudMenuItem T="Guid?"
                                     OnClick="() => AddPurchaseAtExport(item)">
                            @item.ImportedOrder?.Name @item.ImportedOrder?.Id @item.ImportedOrder?.DateTimeCreated <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary"></MudIcon>
                        </MudMenuItem>
                    }



                </MudMenu>
                @if (ExportedProduct.PurchaseAtExports != null && ExportedProduct.PurchaseAtExports.Any())
                {
                    foreach (var item in ExportedProduct.PurchaseAtExports)
                    {
                        <div class="d-flex align-items-center">
                            <MudText Class="mr-2" Typo="Typo.body1"><b>@item.ExportedProduct!.ExportedOrder!.Name @item.ExportedProduct!.ExportedOrder!.DateTimeCreated:</b></MudText>
                            <MudTextField Variant="Variant.Outlined"
                                          @bind-Value="item.Quantity"
                                          For="@(() => item.Quantity)"
                                          Immediate="true"
                                          Label="Количество"/>

                            <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                           Color="Color.Warning"
                                           OnClick="() => RemovePurchaseAtExport(item)"/>
                        </div>
                    }
                }
            }
        </MudPaper>
        
        <MudPaper Elevation="12" Class="p-4">
            @if (!_isSetCurrency)
            {
                <MudText Color="Color.Warning">Установите валюты в настройках основного заказа</MudText>
            }
            <div class="d-flex align-items-center">
                <MudNumericField Disabled="!_isSetCurrency" Label="Цена покупателя" @bind-Value="ExportedProduct.PriceInBuyerCurrency"
                             For="@(() => ExportedProduct.PriceInBuyerCurrency)"
                                 Variant="Variant.Outlined"
                                 RequiredError="Введите цену"
                                 Class="mb-3"
                                 Format="0.##"
                                 Step="0.1M"
                                 T="decimal?" Min="0"
                                 Adornment="Adornment.End" AdornmentText="@ExportedProduct.ExportedOrder!.BuyerCurrency" />
                <MudIconButton Icon="@Icons.Material.Filled.Loop" OnClick="() => ConvertedCurrency(ExportedProduct.ExportedOrder.BuyerCurrency!,ExportedProduct.PriceInBuyerCurrency)" />
            </div>
            <div class="d-flex align-items-center">
                <MudNumericField Disabled="!_isSetCurrency" Label="Цена в валюте сделки" @bind-Value="ExportedProduct.PriceInTransactionCurrency"
                                 For="@(() => ExportedProduct.PriceInTransactionCurrency)"
                                 Variant="Variant.Outlined"
                             RequiredError="Введите цену"
                                 Class="mb-3"
                                 Format="0.##"
                                 Step="0.1M"
                                 T="decimal?" Min="0"
                             Adornment="Adornment.End" AdornmentText="@ExportedProduct.ExportedOrder!.TransactionCurrency" />
                <MudIconButton Icon="@Icons.Material.Filled.Loop" OnClick="() => ConvertedCurrency(ExportedProduct.ExportedOrder.TransactionCurrency!,ExportedProduct.PriceInTransactionCurrency)" />
            </div>
            <div class="d-flex align-items-center">
                <MudNumericField Disabled="!_isSetCurrency" Label="Цена в локальной валюте" @bind-Value="ExportedProduct.PriceLocal"
                             For="@(() => ExportedProduct.PriceLocal)"
                                 Variant="Variant.Outlined"
                             RequiredError="Введите цену"
                                 Class="mb-3"
                                 Format="0.##"
                                 Step="0.1M"
                                 T="decimal?" Min="0"
                                 Adornment="Adornment.End" AdornmentText="@ExportedProduct.ExportedOrder!.LocalCurrency"/>
                <MudIconButton Icon="@Icons.Material.Filled.Loop" OnClick="() => ConvertedCurrency(ExportedProduct.ExportedOrder.LocalCurrency!,ExportedProduct.PriceLocal)" />
            </div>
        </MudPaper>

            <MudCardActions>
                <MudButton Variant="Variant.Outlined" Size="Size.Medium" OnClick="Validation" Color="Color.Info">@ButtonText</MudButton>
            </MudCardActions>
      
    </MudForm>

    <CreateProductDialog VisibleDialog="_visibleCreatedProductDialog"
                         RefreshProductList="StateHasChanged"
                         Close="() => _visibleCreatedProductDialog=false" />


}


@code {
    [Parameter]public MudForm? ImportedOrderForm { get; set; }
    [Parameter] public ExportedProduct? ExportedProduct { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    public List<Storage>? StorageList { get; set; }
    public List<ImportedProduct>? NotEquippedImportedProducts { get; set; }

    private Product? _product;
    bool _success;
    private bool _isSetCurrency;

    private bool _visibleCreatedProductDialog; 
    private bool _visibleDetailProductDialog;

    protected override async Task OnInitializedAsync()
    {
        StorageList = await StorageManager.GetAsync();
        NotEquippedImportedProducts = await ImportedProductManager.GetNotEquippedAsync();
        if (ExportedProduct!.ExportedOrder is { LocalCurrency: { },BuyerCurrency: { },TransactionCurrency: { } })
        {
            _isSetCurrency = true;
        }
    }
    
    private async Task Validation()
    {
        if (ImportedOrderForm!.IsValid)
            await OnValidSubmit.InvokeAsync();

        else
            await ImportedOrderForm.Validate();

    }

    private async Task<IEnumerable<Product>> Search(string value, CancellationToken token)
    {
        var result = await ProductManager.GetSearchProductAsync(value);
        return result;
    }
    private async void AddSoldFromStorage(Storage storage)
    {
        if (ExportedProduct != null)
        {
            ExportedProduct.SoldFromStorage ??= new List<SoldFromStorage>();
            ExportedProduct.StorageList ??= new List<Storage>();
            ExportedProduct.StorageList.Add(storage);
            ExportedProduct.SoldFromStorage.Add(new SoldFromStorage
            {
                Storage = storage, StorageId = storage.Id,
                ExportedProduct = ExportedProduct, ExportedProductId = ExportedProduct.Id
            });
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void RemoveSoldFromStorage(SoldFromStorage soldFromStorage)
    {
        if (ExportedProduct != null)
        {
            ExportedProduct.StorageList!.Remove(soldFromStorage.Storage!);
            ExportedProduct.SoldFromStorage!.Remove(soldFromStorage);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void AddPurchaseAtExport(ImportedProduct importedProduct)
    {
        if (ExportedProduct != null)
        {
            ExportedProduct.PurchaseAtExports ??= new List<PurchaseAtExport>();
            ExportedProduct.ImportedProducts ??= new List<ImportedProduct>();
            ExportedProduct.ImportedProducts.Add(importedProduct);
            ExportedProduct.PurchaseAtExports.Add(new PurchaseAtExport()
            {
                ExportedProduct = ExportedProduct, ExportedProductId = ExportedProduct.Id,
                ImportedProduct = importedProduct, ImportedProductId = importedProduct.Id
            });
        }
        await InvokeAsync(StateHasChanged);
    }
    private async void RemovePurchaseAtExport(PurchaseAtExport purchaseAtExport)
    {
        if (ExportedProduct != null)
        {
            ExportedProduct.ImportedProducts!.Remove(purchaseAtExport.ImportedProduct!);
            ExportedProduct.PurchaseAtExports!.Remove(purchaseAtExport);
        }
        await InvokeAsync(StateHasChanged);
    }
    private async void ConvertedCurrency(string charCode, decimal? price)
    {
        var supplierCharCode = ExportedProduct!.ExportedOrder!.BuyerCurrency!;
        var transactionCharCode = ExportedProduct!.ExportedOrder!.TransactionCurrency!;
        var localCharCode = ExportedProduct!.ExportedOrder!.LocalCurrency!;
        var curArr = new List<string>
        {
            supplierCharCode,
            transactionCharCode!,
            localCharCode!
        };
        curArr.Remove(charCode);
        var convertResult = await CurrencyManager.CurrencyConverter(charCode, price, 0, curArr);
        foreach (var item in convertResult)
        {
            if (item.charCod==supplierCharCode)
            {
                ExportedProduct.PriceInBuyerCurrency = item.Item2;
            }
            else if (item.charCod==transactionCharCode)
            {
                ExportedProduct.PriceInTransactionCurrency = item.Item2;
            }
            else if (item.charCod==localCharCode)
            {
                ExportedProduct.PriceLocal = item.Item2;
            }
        }
        
        await InvokeAsync(StateHasChanged);
    }
}