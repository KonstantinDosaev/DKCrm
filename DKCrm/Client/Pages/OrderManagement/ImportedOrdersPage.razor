@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Client.Pages.OrderManagement.Components
@using DKCrm.Client.Pages.OrderManagement.Dialogs
@using DKCrm.Shared.Constants
@page "/imported_orders"
@*@page "/imported_order/tag/{tagid:guid}"*@

<NotCompleteExportedProductsComponent 
    GetImportOrdersByProductCallback="GetImportOrdersByProduct"
    AddToOrderModeCallback="SetAddToOrderMode" MergeInOrderModeCallback="SetMergeToOrderMode" />
<MudPaper class="d-flex align-items-center justify-content-between p-2 m-2" Elevation="4" Outlined="true">
    <div class="d-flex">
        <MudTooltip Text="фильтр">
            <MudButton Variant="Variant.Filled"
                       Size="Size.Medium"
                       OnClick="() => _visibleOrderFilter = true"
                       Style="margin-right: 1rem;" Color="@(_filterIsOn ? Color.Warning : Color.Default)">
                <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.FilterAlt" Class="pa-0 ml-2"/>
            </MudButton>
        </MudTooltip>
        <MudTooltip Text="история">
            <MudButton Variant="Variant.Filled"
                       Color="@(_showHistoryOrders ? Color.Primary : Color.Default)"
                       Style="margin-right: 0.7rem;"
                       OnClick="OnHistory">
                <MudIcon Size="@Size.Medium"
                         Icon="@Icons.Material.Sharp.History"
                         Class="pa-0 ml-2"/>
            </MudButton>
        </MudTooltip>
        <MudMenu>
            <ActivatorContent>
                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Settings"
                               Color="@(CurrentOrderStatus != null ? Color.Warning : Color.Default)"/>
            </ActivatorContent>
            <ChildContent>
                <div style="width: 228px; margin: 0.2rem 0;">
                    <MudSelect T="ImportedOrderStatus"
                               Placeholder="Выбрать статус"
                               Value="CurrentOrderStatus"
                               ValueChanged="OnStatusFilter"
                               Variant="Variant.Outlined" Dense="true" Style=""
                               Class="select-button"
                               OnOpen="LoadStatusList" ToStringFunc="status => status.Value"
                               Clearable OnClearButtonClick="ResetStatusFilter">
                        @if (StatusList != null)
                        {
                            foreach (var status in StatusList)
                            {
                                <MudSelectItem T="ImportedOrderStatus" Value="@(status)">@status.Value</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </div>
                <div style="width: 228px; margin-bottom: 0.2rem">
                    <MudSelect T="string"
                               MultiSelection="true"
                               @bind-SelectedValues="_currencyDisplay"
                               MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                               Variant="Variant.Outlined" Dense="true"
                               Class="select-button">
                        <MudSelectItem T="string" Value="@("Продавца")">Продавца</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Сделки")">Сделки</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Локальная")">Локальная</MudSelectItem>
                    </MudSelect>
                </div>
            </ChildContent>
        </MudMenu>
       
    </div>
    <div class="d-flex">
        <MudTextField Clearable="true" T="string" ValueChanged="@(OnSearch)" Placeholder="Поиск"
                      Style="box-shadow: rgba(100, 100, 111, 0.4) 0 7px 29px 0;border-radius: 6px;padding: 0.2rem; width: 300px;"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0 mr-2"></MudTextField>

        <div class="mr-2">
            <MudSelect Variant="Variant.Outlined" Style=""
                       Class="select-button" T="string"
                       @bind-Value="SelectedOption">
                <MudSelectItem Value="@(SearchChapterNames.OrderNumber)">по номеру заказа</MudSelectItem>
                <MudSelectItem Value="@(SearchChapterNames.CompanyName)">по компании</MudSelectItem>
                <MudSelectItem Value="@(SearchChapterNames.ProductPartNumber)">по парт-номеру</MudSelectItem>
            </MudSelect>
        </div>
        <MudButton Variant="Variant.Filled"
                   Size="Size.Medium"
                   OnClick="() => _visibleAddOrderDialog = true"
                   Style="margin-right: 1rem;"
                   Color="Color.Tertiary">
            Добавить заказ
            <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Add" Class="pa-0"/>
        </MudButton>
    </div>
</MudPaper>
<MudTable ServerData="ServerReload"
          Dense="true"
          Hover="true"
          ReadOnly="false"
          SelectOnRowClick="false"
          Striped="true"
          Bordered="true"
          AllowUnsorted="true"
          HeaderClass="mud-table-header table-head-bordered mud-table-header-fix"
          FixedHeader="true" Height="@($"{(int)(WindowHeight * 0.70)}px")"
         T="ImportedOrder"
          @ref="_table">
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel SortLabel="number_field" T="ImportedOrder">Номер заказа</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="ourCompany_field" T="ImportedOrder">Наша компания</MudTableSortLabel>
               
        </MudTh>
        <MudTh>Поставщик
            <MudTableSortLabel Enabled="true" SortLabel="conterCompany_field" T="ImportedOrder"></MudTableSortLabel>
        </MudTh>
        <MudTh><MudTableSortLabel SortLabel="create_field" T="ImportedOrder">Дата создания</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending"  SortLabel="update_field" T="ImportedOrder">Дата обновления</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="status_field" T="ImportedOrder">Статус</MudTableSortLabel></MudTh>
        <MudTh><WarningOrderCommentComponent 
                   TypeOrder="@typeof(ImportedOrder).ToString()"/></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd
            Style="@(_showDetails && OrderId == context.Id? "background-color: gainsboro; width: 3rem; margin: 0; padding: 0" : "background-color: none; width: 3rem; margin: 0; padding: 0")"
            DataLabel="Номер заказа">
            <MudIconButton Size="@Size.Large" 
                           OnClick="() => OpenOrderDetails(context.Id)"
                           Color="Color.Default"
                           Icon="@(_showDetails && OrderId == context.Id? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"
                           Class="pa-0 ml-2"/>
        </MudTd>
      
        <MudTd DataLabel="Номер заказа">@context.Number</MudTd>
        <MudTd DataLabel="Наша компания">
            @if (context.OurCompany != null)
            {
                <div><MudText Typo="Typo.button"> @context.OurCompany.Name </MudText></div>
                @if (context.OurEmployee != null)
                {
                    <MudText Typo="Typo.body2">
                        @context.OurEmployee.LastName
                        @context.OurEmployee.FirstName
                        @context.OurEmployee.MiddleName
                    </MudText>
                }
            }
        </MudTd>
        <MudTd DataLabel="Компания поставщик">
            @if (context.SellersCompany != null)
            {

                <div><MudText Typo="Typo.button"> @context.SellersCompany.Name </MudText></div>
                @if (context.EmployeeSeller != null)
                {
                    <MudMenu>
                        <ActivatorContent>
                            <MudLink Underline="Underline.Hover" Color="Color.Dark" Typo="Typo.body1">
                                @context.EmployeeSeller.LastName
                                @context.EmployeeSeller.FirstName
                                @context.EmployeeSeller.MiddleName
                            </MudLink>
                        </ActivatorContent>
                        <ChildContent>
                            <div class="d-flex flex-column p-2">
                                <MudText Typo="Typo.button">
                                    <span class="text-decoration-underline">Телефон: </span> @context.EmployeeSeller.Phone
                                </MudText>
                                <MudText Typo="Typo.button">
                                    <span class="text-decoration-underline">E-mail: </span> @context.EmployeeSeller.Email
                                </MudText>
                            </div>
                        </ChildContent>
                    </MudMenu>
                }
            }
        </MudTd>
        <MudTd DataLabel="Дата создания">
            @if (context.DateTimeCreated != null)
            {
                @context.DateTimeCreated
            }
        </MudTd>
        <MudTd DataLabel="Дата обновления">@context.DateTimeUpdate</MudTd>
        <MudTd DataLabel="Статус">
            <div class="d-flex align-items-center justify-content-between ">
                <ImportedOrderStatusListComponent
                    CurrentOrder="context"
                    StatusList="StatusList" 
                    RefreshParentCallback="@(() => _table!.ReloadServerData())" />
                <MudMenu Icon="@Icons.Material.Filled.History">
                    @if (context.ImportedOrderStatusImportedOrders != null)
                    {
                        <div class="p-2">
                            <MudText Typo="Typo.button">История изменения</MudText>
                            @foreach (var status in context.ImportedOrderStatusImportedOrders.OrderBy(o=>o.DateTimeCreate))
                            {
                                <div class="d-flex justify-content-between">
                                    <MudText>@status.ImportedOrderStatus!.Value</MudText>
                                    <MudText Class="ml-1">@status.DateTimeCreate</MudText>
                                </div>
                            }
                        </div>
                    }
                </MudMenu>
            </div>
        </MudTd>
        <MudTd DataLabel="">
            @*<MudIconButton 
                Size="@Size.Medium" 
                OnClick="() => OpenUpdateOrderDialog(context)" 
                Color="Color.Default" 
                Icon="@Icons.Material.Sharp.Edit" 
                Class="pa-0 ml-2"/>*@
            <MudIconButton Size="@Size.Medium" 
                           OnClick="() => OpenOrderComments(context.Id)" 
                           Color="Color.Default" 
                           Icon="@Icons.Material.Sharp.Comment" 
                           Class="pa-0 ml-2"/>
            @if (_isActiveMovingProductToOrder){
            <MudIconButton Size="@Size.Medium"
                          OnClick="() => MovingProductToOrder(context)"
                           Style="background-color: rgba(217, 214, 81, 0.431);"
                           Icon="@Icons.Material.Sharp.ArrowDownward" Class="pa-0 ml-2"/>}
            @if (_isActiveMergeProductToOrder){
                <MudIconButton Size="@Size.Medium"
                               OnClick="() => MergeProductToOrder(context)"
                               Style="background-color: rgba(217, 214, 81, 0.431);"
                               Icon="@Icons.Material.Sharp.JoinFull" Class="pa-0 ml-2"/>}
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (OrderId==context.Id && _showDetails)
        {
            <MudTr>
                <td colspan="8" style="text-align: center">
                    <MudCard Style="background: gainsboro;" Elevation="25">
                        <MudCardContent Class="pa-1">
                            <ImportedOrderDetailsComponent 
                                RefreshParentItem="() => _table!.ReloadServerData()" 
                                Id="OrderId" CurrencyDisplay="_currencyDisplay" />
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>Нет данных в списке</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new [] { 10, 20 }" RowsPerPageString="@(" ")" Style="height: 30px;"/>
    </PagerContent>
</MudTable>

<MudDrawer @bind-Open="@_visibleOrderFilter" Anchor="@Anchor.Start"
           Elevation="1" 
           Variant="@DrawerVariant.Temporary"  
           Height="@(WindowHeight.ToString())" Width="350px" 
           Class="px-3" >
    <MudDrawerHeader Class="d-flex align-items-center justify-content-between p-0">
        <MudText Typo="Typo.h5">Фильтр</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Close"
                       Size="Size.Large" OnClick="() => _visibleOrderFilter = false" Class="p-0" Color="Color.Default"/>
    </MudDrawerHeader>
    <OrderFilterComponent FilterOrderTuple="@FilterOrderTuple"
                          PartnerTypeName="@TypeCompanyNames.Suppliers"
                          IsSetOption="OnFilter"/>
</MudDrawer>
@if (_visibleOrderComments)
{
    <MudDialog @bind-Visible="_visibleOrderComments" Class="no-padding"
               Style="max-width: 700px;padding: 0" 
               Options="new DialogOptions(){CloseButton = true, FullScreen = true,}">
        <DialogContent>
            <OrderCommentComponent CurrentOrderId="OrderId" OrderType="@typeof(ImportedOrder).ToString()" />
        </DialogContent>
    </MudDialog>
}
<MudDialog @bind-Visible="_visibleSettingsOrderDialog" Style="min-width: 900px" Options="new DialogOptions(){CloseButton = true}">
    <DialogContent>
        
    </DialogContent>
</MudDialog>

<CreateImportedOrderDialog
    @bind-VisibleDialog="_visibleAddOrderDialog"
                           RefreshProductList="() => _table!.ReloadServerData()" />
@*
<EditImportedOrderDialog
    @bind-VisibleDialog="_visibleUpdateOrderDialog"
    RefreshProductList="() => _table!.ReloadServerData()"
    Id="Order.Id"/>
    *@
    
@code {
    [CascadingParameter(Name = "WindowHeight")] private int WindowHeight { get; set; }
    [CascadingParameter(Name = "GlobalFilterType")] private int GlobalFilterType { get; set; }
    [CascadingParameter(Name = "GlobalFilterValue")] private string? GlobalFilterValue { get; set; }
    [Parameter] public string? Chapter { get; set; }
    [Parameter] public Guid ChapterId { get; set; }
   
    private NotCompleteExportedProductsComponent? _completeExportedProductsComponent = null!;
    private Guid OrderId { get; set; }
    private IEnumerable<string> _currencyDisplay = new HashSet<string>() { "Сделки" };

    private  List<ImportedOrderStatus>? StatusList { get; set; }
    private ImportedOrderStatus? CurrentOrderStatus { get; set; }

    public ImportedOrder Order { get; set; } = new ();

    private MudTable<ImportedOrder>? _table;
    [Parameter]public string? SearchString { get; set;}
    [Parameter]public string? SelectedOption { get; set; } = SearchChapterNames.ProductPartNumber;
    [Parameter] public FilterOrderTuple FilterOrderTuple { get; set; } = new FilterOrderTuple();
    //private string _widthCommentForOrderDriver = "350px";

    private bool _showDetails;
    private bool _visibleAddOrderDialog;
    private bool _visibleUpdateOrderDialog;
    private bool _visibleSettingsOrderDialog; 
    private bool _visibleOrderFilter;
    private bool _showHistoryOrders;
    private bool _filterIsOn; 
    private bool _visibleOrderComments;

    private bool _isActiveMovingProductToOrder;
    private bool _isActiveMergeProductToOrder;
    protected override async Task OnInitializedAsync()
    {
        await LoadStatusList();
    }
    protected override async Task OnParametersSetAsync()
    {
        if (_table != null) await _table.ReloadServerData();
    }
    private void MovingProductToOrder(ImportedOrder order)
    {
        _completeExportedProductsComponent?.MovingProductToOrder(order);
    }
    private void MergeProductToOrder(ImportedOrder order)
    {
        _completeExportedProductsComponent?.MergeProductToOrder(order);
    }
    private void SetAddToOrderMode(bool isOn)
    {
        _isActiveMovingProductToOrder = isOn;
    }  
    private void SetMergeToOrderMode(bool isOn)
    {
        _isActiveMergeProductToOrder = isOn;
    }

    private async Task<TableData<ImportedOrder>> ServerReload(TableState state, CancellationToken token)
    {
        if (WindowHeight == 0)
        {
            WindowHeight = 900;
        }
        var response = await ImportedOrderManager.GetBySortFilterPaginationAsync(new SortPagedRequest<FilterOrderTuple>()
        {
            PageIndex = state.Page,
            PageSize = state.PageSize,
            SearchString = SearchString,
            SortLabel = state.SortLabel,
            Chapter = Chapter,
            ChapterId = ChapterId,
            SortDirection = state.SortDirection,
             SearchInChapter = SelectedOption,
                FilterTuple = FilterOrderTuple,
                GlobalFilterValue = GlobalFilterValue,
                GlobalFilterType = (GlobalFilterTypes)Enum.GetValues(typeof(GlobalFilterTypes)).GetValue(GlobalFilterType)!
        });
        return new TableData<ImportedOrder>() { TotalItems = response.TotalItems, Items = response.Items };
    }   
    private async Task LoadStatusList()
    {
        StatusList ??= await ImportedOrderStatusManager.GetAsync();
    }
   
    private void OnFilter(FilterOrderTuple filterTuple)
    {
        if (filterTuple.CurrentPartnerEmployeeId != null 
        || filterTuple.CurrentOurCompanyId != null 
        || filterTuple.CurrentOurEmployeeId != null 
        || filterTuple.CurrentPartnerCompanyId != null 
        || filterTuple.CreateDateFirst != null
        || filterTuple.CreateDateLast != null)
        {
            _filterIsOn = true;
        }
        else
        {
            _filterIsOn = false;
        }
        FilterOrderTuple = filterTuple;
        _table!.ReloadServerData();
    }
    private void OnHistory()
    {
        _showHistoryOrders = !_showHistoryOrders;
        FilterOrderTuple.IsHistoryOrders = !FilterOrderTuple.IsHistoryOrders;
        _table!.ReloadServerData();
    }
    private void OnSearch(string text)
    {
        SearchString = text;
        SelectedOption = SelectedOption != "null" ? SelectedOption : null;
        _table!.ReloadServerData();
    }
    private void OnStatusFilter(ImportedOrderStatus? status)
    {
        CurrentOrderStatus = status;
        FilterOrderTuple.CurrentStatusId = status?.Id;

        _table!.ReloadServerData();
    }
  
    private void ResetStatusFilter()
    {
        CurrentOrderStatus = null;
        FilterOrderTuple.CurrentStatusId =  null;
        _table!.ReloadServerData();
    }

    /*private void SelectSearchOption(string text)
    {
        SelectedOption = text!="null"? text : null;
    }*/

    private void OpenUpdateOrderDialog(ImportedOrder order)
    {
        Order = order;
        _visibleUpdateOrderDialog = true;
    }

    private void OpenOrderDetails(Guid orderId)
    {
        OrderId = orderId;
        _showDetails = !_showDetails;
    }
    private void OpenOrderComments(Guid orderId)
    {
        OrderId = orderId;
        _visibleOrderComments = !_visibleOrderComments;
    }
    private async Task GetImportOrdersByProduct(string partNumber)
    {
        SearchString = partNumber;
        SelectedOption = SearchChapterNames.ProductPartNumber;
        await _table!.ReloadServerData();
        StateHasChanged();
    }
    /*private void ResizeOrderCommentDrawer()
    {
        _widthCommentForOrderDriver = _widthCommentForOrderDriver == "350px" ? "700px" : "350px";
    }*/
    private static string GetMultiSelectionText(List<string> selectedValues) => "Отображаемая цена";

}
<style>
    .mud-table-header {
        background-color: #cbf0ee;
        color: white !important;
        font-weight: bold;
    }
    .select-button {
        margin: 0 !important;
  
        
    }
    .mud-table-sticky-header * .mud-table-root .mud-table-header-fix * .mud-table-cell {
        background-color: dodgerblue;
        font-weight: bold;
        color: white;
    }
    .select-button .mud-input-slot.mud-input-root-outlined {
        padding: 0.67rem 0.8rem !important;
        text-transform: uppercase !important;
        font-size: 0.85rem !important;
        
    }

    .not-equpped-heder {
        border-right: solid 1px rgba(0,0,0,0.1)
    }
    .mud-table-notequpped-header {

    }
</style>

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
      
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;

    }
</style>
