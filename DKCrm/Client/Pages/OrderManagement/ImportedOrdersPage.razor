@using DKCrm.Shared.Models.CompanyModels
@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Client.Pages.OrderManagement.Forms
@using DKCrm.Client.Pages.OrderManagement.Dialogs
@page "/imported_orders"
@*@page "/imported_order/tag/{tagid:guid}"*@

<MudText Class="m-3" Typo="Typo.h4">Заказы от поставщиков</MudText>
<MudButton Variant="Variant.Filled" Size="Size.Medium" OnClick="() => _visibleAddOrderDialog = true" Style="margin-left: 1rem;" Color="Color.Tertiary">
    Добавить заказ
    <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2"/>
</MudButton>

<MudButton Variant="Variant.Filled" Size="Size.Medium" OnClick="() => _visibleSettingsOrderDialog = true" Style="margin-left: 1rem;" Color="Color.Tertiary">
    Настройки
    <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Settings" Class="pa-0 ml-2" />
</MudButton>

    
        <MudTable Height="" Class="m-2" Items="@Orders" Hover="true" SortLabel="Sort By" T="ImportedOrder" 
                  OnRowClick="RowClickEvent" Filter="new Func<ImportedOrder,bool>(FilterFunc1)"
                  Striped="true" 
                  Bordered="true" 
                  HeaderClass="mud-table-header table-head-bordered">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Список заказов</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString1" 
                              Placeholder="Поиск" 
                              Style="box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;border-radius: 6px;padding: 0.5rem; margin-bottom: 0.5rem"
                              Clearable=" true"
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Company, object>(x => x.Id)">Номер заказа</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Company, object>(x => x.Name)">Наименование</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<Company, object>(x => x.Name!)">Наша компания</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel Enabled="false" SortBy="new Func<Company, object>(x => x.Name)">Компания поставщик</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel Enabled="false" SortBy="new Func<ImportedOrderStatus, object>(x => x.Value)">Статус</MudTableSortLabel></MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Номер заказа">@context.Id</MudTd>
                <MudTd DataLabel="Наименование компании">@context.Name</MudTd>
             

                <MudTd DataLabel="Наша компания">
                    @if (context.OurCompany != null)
                    {
                        @context.OurCompany.Name
                    }
                </MudTd>
                <MudTd DataLabel="Компания поставщик">
                    @if (context.SellersCompany != null)
                    {
                        @context.SellersCompany.Name
                    }
                </MudTd>
                <MudTd DataLabel="Тип контрагента">
                    @if (context.ImportedOrderStatus != null)
                    {
                        @context.ImportedOrderStatus.Value
                    }
                </MudTd>
                <MudTd DataLabel="Тип контрагента">
                   
                        <MudIconButton Size="@Size.Medium" OnClick="() => OpenUpdateOrderDialog(context)" Color="Color.Default" Icon="@Icons.Material.Sharp.Edit" Class="pa-0 ml-2" />
               
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 20 }" />
            </PagerContent>
        </MudTable>
  
    



<MudDialog @bind-IsVisible="_visibleSettingsOrderDialog" Style="min-width: 900px" Options="new DialogOptions(){CloseButton = true}">
    <DialogContent>
        
    </DialogContent>
</MudDialog>

<CreateImportedOrderDialog
    @bind-VisibleDialog="_visibleAddOrderDialog"
     RefreshProductList="GetAllOrders"/>
<EditImportedOrderDialog
    @bind-VisibleDialog="_visibleUpdateOrderDialog"
    RefreshProductList="GetAllOrders"
    Id="Order.Id"/>


@code {

    [Parameter] public Guid TagId { get; set; }


    private List<ImportedOrder>? Orders { get; set; }
    private List<ImportedOrder>? AllOrders { get; set; }

    private  List<ImportedOrderStatus>? StatusList { get; set; }

    public ImportedOrder Order { get; set; } = new ();

    private string _searchString1 = "";
    FormImportedOrder? _importOrderForm = null!;

    MudListItem? _selectedItem;
    object _selectedValue = 1;

    private bool _visibleAddOrderDialog;
    private bool _visibleUpdateOrderDialog;
    private bool _visibleSettingsOrderDialog;

    protected override async Task OnInitializedAsync()
    {
        await GetAllOrders();

    }
    private async Task GetAllOrders()
    {
        Orders = await ImportedOrderManager.GetAsync();

    }
    private bool FilterFunc1(ImportedOrder element) => FilterFunc(element, _searchString1);

    private bool FilterFunc(ImportedOrder element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.OurCompany != null && element.OurCompany.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.SellersCompany != null && element.SellersCompany.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
       
        return false;
    }
   
    private void OpenUpdateOrderDialog(ImportedOrder order)
    {
        Order = order;
        _visibleUpdateOrderDialog = true;
    }
    
    private void RowClickEvent(TableRowClickEventArgs<ImportedOrder> tableRowClickEventArgs)
    {
        _navigationManager.NavigateTo($"/imported_order/{tableRowClickEventArgs.Item.Id}");
    }

    private async Task OpenSettingsDialog()
    {

        if (await ImportedOrderManager.AddAsync(Order!))
        {
            _visibleAddOrderDialog = false;
            _snackBar.Add("Заказ добавлен!");
        }
    }
}
<style>
    .mud-table-header {
        background-color: #cbf0ee;
        color: white !important;
        font-weight: bold;
    }
    
</style>

