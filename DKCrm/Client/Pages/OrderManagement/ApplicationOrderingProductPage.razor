@page "/orders-admin"
@attribute [Authorize(Roles = RoleNames.SuAdmin)]
@using Size = MudBlazor.Size
@using DKCrm.Shared.Constants
@using DKCrm.Shared.Models.OrderModels
@using Microsoft.AspNetCore.Authorization
@using DKCrm.Client.Pages.OrderManagement.Dialogs
@using Position = MudBlazor.Position
@using SortDirection = MudBlazor.SortDirection
@inject IAuthService AuthService
@using DKCrm.Client.Pages.ProductManagement
@using DKCrm.Client.Pages.OrderManagement.Components

<MudPaper class="d-flex align-items-center justify-content-between p-2 m-2" Elevation="4" Outlined="true">
    <div class="d-flex">
        <MudTooltip Text="фильтр">
            <MudButton Variant="Variant.Filled"
                       Size="Size.Medium"
                       OnClick="() => _visibleOrderFilter = true"
                       Style="margin-right: 1rem;" Color="@(_filterIsOn ? Color.Warning : Color.Default)">
                <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.FilterAlt" Class="pa-0 ml-2"/>
            </MudButton>
        </MudTooltip>
        <MudTooltip Text="история">
            <MudButton Variant="Variant.Filled"
                       Color="@(_showHistory ? Color.Primary : Color.Default)"
                       Style="margin-right: 0.7rem;"
                       OnClick="OnHistory">
                <MudIcon Size="@Size.Medium"
                         Icon="@Icons.Material.Sharp.History"
                         Class="pa-0 ml-2"/>
            </MudButton>
        </MudTooltip>
    </div>
    <div class="d-flex">
        <MudTextField Clearable="true" T="string" ValueChanged="@(OnSearch)" Placeholder="Поиск"
                      Style="box-shadow: rgba(100, 100, 111, 0.4) 0 7px 29px 0;border-radius: 6px;padding: 0.2rem; width: 300px;"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0 mr-2"></MudTextField>

        @*<div class="mr-2">
            <MudSelect Variant="Variant.Outlined" Style=""
                       Class="select-button" T="string"
                       @bind-Value="SelectedOption">
                <MudSelectItem Value="@(SearchChapterNames.OrderNumber)">по номеру заказа</MudSelectItem>
                <MudSelectItem Value="@(SearchChapterNames.CompanyName)">по компании</MudSelectItem>
                <MudSelectItem Value="@(SearchChapterNames.ProductPartNumber)">по парт-номеру</MudSelectItem>
            </MudSelect>
        </div>*@
    </div>
</MudPaper>
<MudTable ServerData="ServerReload"
          Dense="true"
          Hover="true"
          ReadOnly="false"
          SelectOnRowClick="false"
          Striped="true"
          Bordered="true"
          AllowUnsorted="true"
          HeaderClass="mud-table-header table-head-bordered mud-table-header-fix"
          FixedHeader="true" Height="@($"{(int)(WindowHeight * 0.78)}px")"
          T="ApplicationOrderingProducts"
          @ref="_table">
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel SortLabel="number_field" T="ApplicationOrderingProducts">Номер заказа</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="ourCompany_field" T="ApplicationOrderingProducts">Компания</MudTableSortLabel></MudTh>

        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortLabel="create_field" T="ApplicationOrderingProducts">Дата создания</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="update_field" T="ApplicationOrderingProducts">Дата обновления</MudTableSortLabel></MudTh>
        
    </HeaderContent>
    <RowTemplate>
        <MudTd
            Style="@(_showDetails && CurrentAppId == context.Id? "background-color: gainsboro; width: 3rem; margin: 0; padding: 0" : "background-color: none; width: 3rem; margin: 0; padding: 0")"
            DataLabel="Номер заказа">
            <MudIconButton Size="@Size.Large"
                           OnClick="() => OpenDetails(context.Id)"
                           Color="Color.Default"
                           Icon="@(_showDetails && CurrentAppId == context.Id? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"
                           Class="pa-0 ml-2"/>
        </MudTd>

        <MudTd DataLabel="Номер заявки">@context.Number</MudTd>

        <MudTd DataLabel="Компания">
            <div><MudText Typo="Typo.button"> @context.CompanyName </MudText>
                <MudText><span style="color: darkgrey; margin-right: 1rem">INN компании:</span>@context.CompanyInn</MudText>
                </div>
                <MudMenu>
                    <ActivatorContent>
                        <MudLink Underline="Underline.Hover" Color="Color.Dark" Typo="Typo.body1">
                            @context.UserName

                        </MudLink>
                    </ActivatorContent>
                    <ChildContent>
                        <div class="d-flex flex-column p-2">
                            <MudText Typo="Typo.button">
                                <span class="text-decoration-underline">Телефон: </span> @context.Phone
                            </MudText>
                            <MudText Typo="Typo.button">
                                <span class="text-decoration-underline">E-mail: </span> @context.Email
                            </MudText>
                        </div>
                    </ChildContent>
                </MudMenu>
        </MudTd>
        <MudTd DataLabel="Дата создания">
            @if (context.DateTimeCreated != null)
            {
                @context.DateTimeCreated
            }
        </MudTd>
        <MudTd DataLabel="Дата обновления">@context.DateTimeUpdate</MudTd>
        
    </RowTemplate>
    <ChildRowContent>
        @if (CurrentAppId==context.Id && _showDetails)
        {
            <MudTr>
                <td colspan="8" style="text-align: center">
                    <MudCard Style="background: gainsboro;" Elevation="25">
                        <MudCardContent Class="pa-1">
                            @if (_showHistory)
                            {
                                <div class="d-flex justify-content-between px-4 py-1">
                                    <div>
                                        <MudText Class="fw-bold">@($"№: {context.Number} ")</MudText>
                                        <MudText><span style="color: darkgrey; margin-right: 1rem">Принял заявку:</span>@context.TakerUser</MudText>
                                    </div>
                                </div>

                                <table class="table table-bordered table-striped table-sm">
                                    <thead>
                                    <tr style="background-color: rgba(0, 169, 255, 0.388)">
                                        <th>Парт-номер</th>
                                        <th>Наименование</th>
                                        <th>Производитель</th>
                                        <th>Количество</th>
                                        <th>Подробнее</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @if (context.ApplicationOrderingProductProduct != null)
                                    {
                                        @foreach (var item in context.ApplicationOrderingProductProduct)
                                        {
                                            <tr>
                                                <td>@item.Product?.PartNumber</td>
                                                <td>@item.Product?.Name</td>
                                                <td>@item.Product?.Brand?.Name</td>
                                                <td>@item.Quantity</td>
                                                <td> <button class="btn btn-link" @onclick="@(_ => GetModalProductCard(item.ProductId))">Подробнее</button></td>
                                            </tr>
                                        }
                                    }
                                    @if (context.MissingProductsInCatalog != null)
                                    {
                                        <tr style="background-color: rgba(0, 169, 255, 0.388)">

                                            <th colspan="5" style="text-align: center">Добавлено пользователем</th>

                                        </tr>
                                        foreach (var itemMissingProductInCatalog in MissingProductConverterService.ConvertMissingProductStringToList(context.MissingProductsInCatalog))
                                        {
                                            <tr>
                                                <td>@itemMissingProductInCatalog.PartNumber</td>
                                                <td>@itemMissingProductInCatalog.Name</td>
                                                <td>@itemMissingProductInCatalog.BrandName</td>
                                                <td>@itemMissingProductInCatalog.Quantity</td>
                                                <td></td>
                                            </tr>
                                        }
                                    }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <table class="table table-bordered table-striped table-sm">
                                    <thead>
                                    <tr style="background-color: rgba(0, 169, 255, 0.388)">
                                        <th>Парт-номер</th>
                                        <th>Наименование</th>
                                        <th>Производитель</th>
                                        <th>Количество</th>
                                        <th>Подробнее</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @if (context.ApplicationOrderingProductProduct != null)
                                    {
                                        @foreach (var item in context.ApplicationOrderingProductProduct)
                                        {
                                            <tr>
                                                <td>@item.Product?.PartNumber</td>
                                                <td>@item.Product?.Name</td>
                                                <td>@item.Product?.Brand?.Name</td>
                                                <td>@item.Quantity</td>
                                                <td> <button class="btn btn-link" @onclick="@(_ => GetModalProductCard(item.ProductId))">Подробнее</button></td>
                                            </tr>
                                        }
                                    }
                                    @if (context.MissingProductsInCatalog != null)
                                    {
                                        <tr style="background-color: rgba(0, 169, 255, 0.388)">
                                            <th colspan="5" style="text-align: center">Добавлено пользователем</th>
                                        </tr>
                                        foreach (var itemMissingProductInCatalog in MissingProductConverterService.ConvertMissingProductStringToList(context.MissingProductsInCatalog))
                                        {
                                            <tr>
                                                <td>@itemMissingProductInCatalog.PartNumber</td>
                                                <td>@itemMissingProductInCatalog.Name</td>
                                                <td>@itemMissingProductInCatalog.BrandName</td>
                                                <td>@itemMissingProductInCatalog.Quantity</td>
                                                <td></td>
                                            </tr>
                                        }
                                    }
                                    </tbody>
                                </table>

                                <div class="text-end">
                                    <MudButton Variant="Variant.Filled" Class="my-3" Color="Color.Primary" OnClick="() => OpenCreateOrderDialog(context)">Настроить заказ</MudButton>
                                </div>
                            }
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>Нет данных в списке</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new [] { 10, 20 }" RowsPerPageString="@(" ")" Style="height: 30px;"/>
    </PagerContent>
</MudTable>

<MudDrawer @bind-Open="@_visibleOrderFilter" Anchor="@Anchor.Start" Elevation="1"
           Variant="@DrawerVariant.Temporary"  Height="100VH" Width="350px" Class="px-3" >
    <MudDrawerHeader Class="d-flex align-items-center justify-content-between p-0">
        <MudText Typo="Typo.h5">Фильтр</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Close"
                       Size="Size.Large"
                       OnClick="() => _visibleOrderFilter = false"
                       Class="p-0" Color="Color.Default"/>
    </MudDrawerHeader>
    <ApplicationOrderingProductFilterComponent FilterOrderTuple="@_filterOrderTuple"
                                               IsHistory="@(_activeIndex == 1)"
                                               IsSetOption="OnFilter"/>
</MudDrawer>
<ProductDetailDialog @bind-VisibleDialog="_visibleDetailProductDialog"
                     ProductId="IdCurrentProduct" />
<CreateExportedOrderDialog
    RefreshParentItem="LoadingData"
    @bind-VisibleDialog="_visibleAddOrderDialog" ApplicationOrderingProduct="ApplicationOrderingProduct" />
@code {
    [CascadingParameter(Name = "WindowHeight")] private int WindowHeight { get; set; }
    [CascadingParameter(Name = "GlobalFilterType")] private int GlobalFilterType { get; set; }
    [CascadingParameter(Name = "GlobalFilterValue")] private string? GlobalFilterValue { get; set; }
    private MudTable<ApplicationOrderingProducts> _table = null!;
    private Guid CurrentAppId { get; set; }
    private string? _searchString;
    
    private bool _showDetails;
    private bool _showHistory;
    
    private int _activeIndex;

    ApplicationOrderingProducts? ApplicationOrderingProduct { get; set; }
    CurrentUser? User { get; set; }
    private FilterApplicationOrderTuple _filterOrderTuple = new FilterApplicationOrderTuple();

    // DateTime? _filterDateFirst = DateTime.Now - new TimeSpan(30, 0, 0, 0);
    // DateTime? _filterDateLast = DateTime.Now;
    // DateTime? _filterHistoryDateFirst = DateTime.Now - new TimeSpan(30, 0, 0, 0);
    // DateTime? _filterHistoryDateLast = DateTime.Now;
    
    private Guid IdCurrentProduct { get; set; }

    private SortDirection _sortDirection = SortDirection.Descending;

    private bool _visibleDetailProductDialog;
    private bool _visibleAddOrderDialog;
    private bool _visibleOrderFilter; 
    private bool _filterIsOn;  
    
    protected override async Task OnInitializedAsync()
    {
        await LoadingData();
        User ??= await AuthService.CurrentUserInfo();
    }
    private async Task<TableData<ApplicationOrderingProducts>> ServerReload(TableState state, CancellationToken token)
    {
        _filterOrderTuple.InWork = _showHistory;
        var request = new SortPagedRequest<FilterApplicationOrderTuple>()
        {
            PageIndex = state.Page,
            PageSize = state.PageSize,
            SearchString = _searchString,
            SortLabel = state.SortLabel,
            SortDirection = state.SortDirection,
            FilterTuple = _filterOrderTuple,
            GlobalFilterValue = GlobalFilterValue,
            GlobalFilterType = (GlobalFilterTypes)Enum.GetValues(typeof(GlobalFilterTypes)).GetValue(GlobalFilterType)!
        };
       
        var response = await ApplicationOrderingManager.GetBySortFilterPaginationAsync(request);
        return new TableData<ApplicationOrderingProducts>() { TotalItems = response.TotalItems, Items = response.Items };
    }  
    protected override async Task OnParametersSetAsync()
    { 
        await _table.ReloadServerData();
    }
    private void OpenDetails(Guid orderId)
    {
        CurrentAppId = orderId;
        _showDetails = !_showDetails;
    }
    private void OnHistory()
    {
        _showHistory = !_showHistory;
        _filterOrderTuple.InWork = !_filterOrderTuple.InWork;
        _table.ReloadServerData();
    }
    private void OnSearch(string text)
    {
        _searchString = text;
      //  SelectedOption = SelectedOption != "null" ? SelectedOption : null;
        _table.ReloadServerData();
    }
    private async Task OnFilter(FilterApplicationOrderTuple filterTuple)
    {
        if (filterTuple.UpdateDateLast != null
            || filterTuple.UpdateDateFirst != null
            || filterTuple.CreateDateFirst != null
            || filterTuple.CreateDateLast != null)
        {
            _filterIsOn = true;
        }
        else
        {
            _filterIsOn = false;
        }
        _filterOrderTuple = filterTuple;

        await _table.ReloadServerData();
    }
    private async Task LoadingData()
    {
        _filterOrderTuple = new FilterApplicationOrderTuple(){};

        
    }
    
    private void OpenCreateOrderDialog(ApplicationOrderingProducts order)
    {
        ApplicationOrderingProduct = order;
        _visibleAddOrderDialog = true;
    }

    private void GetModalProductCard(Guid id)
    {
        IdCurrentProduct = id;
        _visibleDetailProductDialog = true;

    }
}

<style>
    .mud-table-header {
        background-color: #cbf0ee;
        color: white !important;
        font-weight: bold;
    }
    .select-button {
        margin: 0 !important;
    }
    .mud-table-sticky-header * .mud-table-root .mud-table-header-fix * .mud-table-cell {
        background-color: dodgerblue;
        font-weight: bold;
        color: white;
    }
    .select-button .mud-input-slot.mud-input-root-outlined {
        padding: 0.67rem 0.8rem !important;
        text-transform: uppercase !important;
        font-size: 0.85rem !important;
        
    }
</style>
