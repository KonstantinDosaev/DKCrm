@using DKCrm.Client.Pages.OrderManagement.Components
@using DKCrm.Client.Pages.OrderManagement.DocumentComponents
@using DKCrm.Client.Pages.OrderManagement.Dialogs
@using DKCrm.Shared.Constants
@using DKCrm.Shared.Models.OrderModels
@page "/export_orders"
@page "/export_orders/{OrderNumber}/{OrderId:guid}/{ShowOrder:bool}"
@*@page "/imported_order/tag/{tagid:guid}"*@

<MudText Class="m-3" Typo="Typo.h4">Заказы на продажу</MudText>
<MudPaper class="d-flex align-items-center justify-content-between p-2 m-2" Elevation="4" Outlined="true">
    <div class="d-flex">
        <MudTooltip Placement="Placement.Right" Text="не прочитанные комментарии">
            <MudButton Size="@Size.Medium" Style="margin-right: 0.7rem;"
                       Variant="Variant.Filled" OnClick="() => OnUnreadComments()"
                       StartIcon="@Icons.Material.Filled.CommentBank"
                       Color="@(_isOnUnreadComments ? Color.Primary : Color.Default)">
                <MudIcon Icon="@(_unreadCommentsAny ? Icons.Material.Filled.PlusOne : Icons.Material.Filled.Check)"/>

            </MudButton>
        </MudTooltip>
        <MudTooltip Text="история">
            <MudButton Variant="Variant.Filled"
                       Color="@(_showHistoryOrders ? Color.Primary : Color.Default)"
                       Style="margin-right: 0.7rem;"
                       OnClick="OnHistory">
                <MudIcon Size="@Size.Medium"
                         Icon="@Icons.Material.Sharp.History"
                         Class="pa-0 ml-2"/>
            </MudButton>
        </MudTooltip>
        <MudTooltip Text="фильтр">
            <MudButton Variant="Variant.Filled" Size="Size.Medium"
                       OnClick="() => _visibleOrderFilter = true" Style="margin-right: 0.7rem;"
                       Color="@(_filterIsOn ? Color.Warning : Color.Default)">
                <MudIcon Size="@Size.Medium" Color="Color.Default"
                         Icon="@Icons.Material.Sharp.FilterAlt" Class="pa-0 ml-2"/>
            </MudButton>
        </MudTooltip>
        <div style="width: 228px; margin-right: 0.7rem;">
            <MudSelect T="ExportedOrderStatus"
                       Placeholder="Статус" Value="CurrentOrderStatus"
                       ValueChanged="OnStatusFilter"
                       Variant="Variant.Outlined" Dense="true" Style=""
                       Class="select-button"
                       OnOpen="LoadStatusList" ToStringFunc="status => status?.Value!" Clearable
                       OnClearButtonClick="ResetStatusFilter">
                @if (StatusList != null)
                {
                    foreach (var status in StatusList)
                    {
                        <MudSelectItem T="ExportedOrderStatus" Value="@(status)">@status.Value</MudSelectItem>
                    }
                }
            </MudSelect>
        </div>
        <div style="width: 228px; margin-right: 0.7rem;">
            <MudSelect T="bool?"
                       Placeholder="Укомплектованность" Value="OrdersIsCompleted" ValueChanged="OnCompleteOrderFilter"
                       Variant="Variant.Outlined" Dense="true" Style=""
                       Class="select-button" Clearable="true">
                <MudSelectItem T="bool?" Value="true">Укомплектованные</MudSelectItem>
                <MudSelectItem T="bool?" Value="false">Не укомплектованные</MudSelectItem>
                <MudSelectItem T="bool?" Value="null">Все</MudSelectItem>
            </MudSelect>
        </div>
        <div style="width: 228px; margin-right: 0.5rem">
            <MudSelect T="string"
                       MultiSelection="true"
                       @bind-SelectedValues="_currencyDisplay"
                       MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                       Variant="Variant.Outlined" Dense="true"
                       Class="select-button">
                <MudSelectItem T="string" Value="@("Продавца")">Продавца</MudSelectItem>
                <MudSelectItem T="string" Value="@("Сделки")">Сделки</MudSelectItem>
                <MudSelectItem T="string" Value="@("Локальная")">Локальная</MudSelectItem>
            </MudSelect>
        </div>
    </div>
    <div>
        <MudButton Variant="Variant.Filled" 
                   Size="Size.Medium" 
                   OnClick="() => _visibleAddOrderDialog = true" 
                   Style="margin-right: 1rem;" Color="Color.Tertiary">
            Добавить заказ
            <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2"/>
        </MudButton>
    </div>
</MudPaper>

<MudTable ServerData="(async (state, token) => await ServerReload(state, token))"
          Dense="false"
          Hover="true"
          ReadOnly="false"
          SelectOnRowClick="false"
          Striped="true"
          Bordered="true"
          HeaderClass="mud-table-header table-head-bordered" T="ExportedOrder" @ref="_table" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Список заказов</MudText>
        <MudSpacer />
        <MudTextField Clearable="true" T="string" ValueChanged="@(OnSearch)" Placeholder="Поиск"
                      Style="box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px; border-radius: 6px; padding: 0.5rem; margin-bottom: 0.5rem;"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

        <div>
            <MudSelect Style="min-width: 14rem" Class="ml-2" T="string" @bind-Value="SelectedOption">
                <MudSelectItem Value="@(SearchChapterNames.OrderNumber)">по номеру заказа</MudSelectItem>
                <MudSelectItem Value="@(SearchChapterNames.CompanyName)">по компании</MudSelectItem>
                <MudSelectItem Value="@(SearchChapterNames.ProductPartNumber)">по парт-номеру</MudSelectItem>
            </MudSelect>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel SortLabel="number_field" T="ExportedOrder">Номер заказа</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="ourCompany_field" T="ExportedOrder">Наша компания</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="true" SortLabel="conterCompany_field" T="ExportedOrder">Компания заказчик</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortLabel="create_field" T="ExportedOrder">Дата создания</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="update_field" T="ExportedOrder">Дата обновления</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="status_field" T="ExportedOrder">Статус</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="complete_field" T="ExportedOrder">Укомплектованность</MudTableSortLabel></MudTh>
        <MudTh><WarningOrderCommentComponent 
                   TypeOrder="@typeof(ExportedOrder).ToString()"/></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd
               Style="@(ShowDetails && OrderId == context.Id? "background-color: gainsboro; width: 3rem; margin: 0; padding: 0" : "background-color: none; width: 3rem; margin: 0; padding: 0")"
               DataLabel="Номер заказа">
            <MudIconButton Size="@Size.Large" 
                           OnClick="() => OpenOrderDetails(context.Id)" 
                           Color="Color.Default"
                           Icon="@(ShowDetails && OrderId == context.Id? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"
                           Class="pa-0 ml-2" />
        </MudTd>
        <MudTd DataLabel="Номер заказа">@context.Number</MudTd>
        <MudTd DataLabel="Наша компания">
            @if (context.OurCompany != null)
            {
                <div><MudText Typo="Typo.button"> @context.OurCompany.Name </MudText></div>
                @if (context.OurEmployee != null)
                {
                    <MudText Typo="Typo.body1">
                        @context.OurEmployee.LastName
                        @context.OurEmployee.FirstName
                        @context.OurEmployee.MiddleName
                    </MudText>
                }
            }
        </MudTd>
        <MudTd DataLabel="Компания покупатель">
            @if (context.CompanyBuyer != null)
            {
                <div><MudText Typo="Typo.button"> @context.CompanyBuyer.Name </MudText></div>
                @if (context.EmployeeBuyer != null)
                {
                    <MudMenu>
                        <ActivatorContent>
                            <MudLink Underline="Underline.Hover" Color="Color.Dark" Typo="Typo.body1">
                                @context.EmployeeBuyer.LastName
                                @context.EmployeeBuyer.FirstName
                                @context.EmployeeBuyer.MiddleName
                            </MudLink>
@*                             <MudButton Variant="Variant.Text">@context.EmployeeBuyer.LastName
                                @context.EmployeeBuyer.FirstName
                                @context.EmployeeBuyer.MiddleName</MudButton> *@
                        </ActivatorContent>
                        <ChildContent>
                            <div class="d-flex flex-column p-2">
                                <MudText Typo="Typo.button">
                                    <span class="text-decoration-underline">Телефон: </span> @context.EmployeeBuyer.Phone
                                </MudText>
                                <MudText Typo="Typo.button">
                                    <span class="text-decoration-underline">E-mail: </span> @context.EmployeeBuyer.Email
                                </MudText>
                            </div>
                        </ChildContent>
                    </MudMenu>
                }
            }
        </MudTd>
        <MudTd DataLabel="Дата создания">@context.DateTimeCreated</MudTd>
        <MudTd DataLabel="Дата обновления">@context.DateTimeUpdate</MudTd>
        <MudTd DataLabel="Статус">
            @if (context.ExportedOrderStatus != null )
            {
                
                <div class="d-flex align-items-center justify-content-between ">
                    <ExportedOrderStatusListComponent
                        CurrentOrder="context" 
                        StatusList="StatusList"/>
                    <MudMenu Icon="@Icons.Material.Filled.History">
                        @if (context.ExportedOrderStatusExported != null)
                        {
                            <div class="p-2">
                                <MudText Typo="Typo.button">История изменения</MudText>
                                @foreach (var status in context.ExportedOrderStatusExported.OrderBy(o=>o.DateTimeCreate))
                                {
                                    <div class="d-flex justify-content-between">
                                        <MudText>@status.ExportedOrderStatus!.Value</MudText>
                                        <MudText Class="ml-1">@status.DateTimeCreate</MudText>
                                    </div>
                                }
                            </div>
                        }
                    </MudMenu>
                </div>
            }
        </MudTd>
        <MudTd DataLabel="Укомплектованность">
            @if (!context.IsAllProductsAreCollected )
            {
               <MudText>Ожидаем компоненты</MudText>
            }
            else
            {
                <MudText>Собран</MudText>
            }
        </MudTd>
        
            <MudTd DataLabel="">
                <MudIconButton Size="@Size.Medium"
                               OnClick="() => OpenUpdateOrderDialog(context)" 
                               Color="Color.Default" 
                               Icon="@Icons.Material.Sharp.Edit"
                               Class="pa-0 ml-2"/>
                <MudIconButton Size="@Size.Medium" 
                               OnClick="() => OpenOrderComments(context.Id)"
                               Color="Color.Default"
                               Icon="@Icons.Material.Sharp.Comment"
                               Class="pa-0 ml-2"/>
                <MudIconButton Size="@Size.Medium" 
                               OnClick="() => OpenDocumentManager(context.Id)"
                               Color="Color.Default"
                               Icon="@Icons.Material.Sharp.DocumentScanner"
                               Class="pa-0 ml-2"/>
            </MudTd>
    </RowTemplate>

    <ChildRowContent>
        @if (OrderId == context.Id && ShowDetails)
        {
            <MudTr>
                <td colspan="9" style="text-align: center">
               
                    <MudCard Style="background: gainsboro;" Elevation="25">
                        <MudCardContent Class="pa-1">
                            <ExportOrderDetailsComponent Id="OrderId" CurrencyDisplay="_currencyDisplay" />
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 20 }" />
    </PagerContent>
</MudTable>

<MudDrawer @bind-Open="@_visibleOrderFilter" Anchor="@Anchor.Start" Elevation="1" 
           Variant="@DrawerVariant.Temporary"  Height="100VH" Width="350px" Class="px-3" >
    <MudDrawerHeader Class="d-flex align-items-center justify-content-between p-0">
        <MudText Typo="Typo.h5">Фильтр</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Close"
                       Size="Size.Large" 
                       OnClick="() => _visibleOrderFilter = false" 
                       Class="p-0" Color="Color.Default"/>
    </MudDrawerHeader>
    <OrderFilterComponent FilterOrderTuple="@_filterOrderTuple"
                          PartnerTypeName="@TypeCompanyNames.Customers"
                          IsSetOption="OnFilter"/>
</MudDrawer>
@if (_visibleOrderComments)
{
    <MudDialog ContentClass="content-dialog_noScroll" @bind-Visible="_visibleOrderComments" Style="max-width: 700px;padding: 0"
               Options="new DialogOptions(){CloseButton = true, FullScreen = true,}" Class="no-padding">
        <DialogContent>
            <OrderCommentComponent CurrentOrderId="OrderId"
                                   OrderType="@typeof(ExportedOrder).ToString()"/>
        </DialogContent>
    </MudDialog>
}
<MudDialog @bind-Visible="_visibleDocumentManagerDialog"
           Options="new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium,BackdropClick = true}"
           Style="height: 100VH">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined" 
                       Size="Size.Small"
                       OnClick="(() =>_visibleDocumentManagerDialog = false)"
                       Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <DocumentManagerComponent OrderId="OrderId"></DocumentManagerComponent>
    </DialogContent>
  
</MudDialog>
<CreateExportedOrderDialog 
    RefreshProductList="() => _table!.ReloadServerData()"
    @bind-VisibleDialog="_visibleAddOrderDialog"/>
   
<EditExportedOrderDialog 
    Id="Order.Id"
    RefreshProductList="() => _table!.ReloadServerData()"
    @bind-VisibleDialog="_visibleUpdateOrderDialog"
    ApplicationOrderingProduct="Order.ApplicationOrderingProducts" />

@code {
    [Parameter] public string? Chapter { get; set; }
    [Parameter] public Guid ChapterId { get; set; }
    [Parameter] public Guid OrderId { get; set; } 
    [Parameter] public string? OrderNumber { get; set; }
    [Parameter] public bool ShowDetails { get; set; }
    [Parameter] public bool ShowOrder { get; set; }
    private List<ExportedOrderStatus>? StatusList { get; set; }

    public ExportedOrder Order { get; set; } = new();
    private string? _searchString = null;
    public string? SelectedOption { get; set; } = SearchChapterNames.OrderNumber;
    private FilterOrderTuple _filterOrderTuple = new FilterOrderTuple();
    private MudTable<ExportedOrder> _table;
    private MudTable<ExportedOrder> _tables;
    private ExportedOrderStatus? CurrentOrderStatus { get; set; }
    private bool? OrdersIsCompleted { get; set; }

    private bool _visibleAddOrderDialog;
    private bool _visibleUpdateOrderDialog;
    private bool _showHistoryOrders;
    private bool _visibleOrderFilter; 
    private bool _filterIsOn;  
    private bool _visibleOrderComments;
    private bool _visibleDocumentManagerDialog;
    private bool _isOnUnreadComments;
    private bool _unreadCommentsAny;

    public IEnumerable<string> _currencyDisplay { get; set; } = new HashSet<string>() { "Сделки" };
    protected override void OnParametersSet()
    {
        
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (_table != null && OrderNumber != null && ShowOrder)
            {
                ShowDetails = true;
                OnSearch(OrderNumber);
            }
        }
        base.OnAfterRender(firstRender);
    }

    private async Task<TableData<ExportedOrder>> ServerReload(TableState state, CancellationToken token)
    {
        var response = await ExportedOrderManager.GetBySortFilterPaginationAsync(new SortPagedRequest<FilterOrderTuple>()
        {
            PageIndex = state.Page,
            PageSize = state.PageSize,
            SearchString = _searchString,
            SortLabel = state.SortLabel,
            Chapter = Chapter,
            ChapterId = ChapterId,
            SortDirection = state.SortDirection,
            SearchInChapter = SelectedOption,
            FilterTuple = _filterOrderTuple
        }, token);

        _unreadCommentsAny = response.AnyUnreadComment;
        StateHasChanged();
            return new TableData<ExportedOrder>() { TotalItems = response.TotalItems, Items = response.Items };
        
    }
    private void OnSearch(string text)
    {
        _searchString = text;
        SelectedOption = SelectedOption != "null" ? SelectedOption : null;
        _table!.ReloadServerData();
    }
    private void OnHistory()
    {
        _showHistoryOrders = !_showHistoryOrders;
        _filterOrderTuple.IsHistoryOrders = !_filterOrderTuple.IsHistoryOrders;
        _table!.ReloadServerData();
    } 
    private void OnUnreadComments()
    {
        _isOnUnreadComments = !_isOnUnreadComments;
        _filterOrderTuple.IsOrdersWithUnreadComments = !_filterOrderTuple.IsOrdersWithUnreadComments;
        _table!.ReloadServerData();
    }

    private void SelectSearchOption(string text)
    {
        SelectedOption = text!="null"? text : null;
    }
    private void OnFilter(FilterOrderTuple filterTuple)
    {
        if (filterTuple.CurrentPartnerEmployeeId != null 
            || filterTuple.CurrentOurCompanyId != null 
            || filterTuple.CurrentOurEmployeeId != null 
            || filterTuple.CurrentPartnerCompanyId != null 
            || filterTuple.CreateDateFirst != null
            || filterTuple.CreateDateLast != null)
        {
            _filterIsOn = true;
        }
        else
        {
            _filterIsOn = false;
        }
        _filterOrderTuple = filterTuple;
        _table!.ReloadServerData();
    }
    
    private void OpenUpdateOrderDialog(ExportedOrder order)
    {
        Order = order;
        _visibleUpdateOrderDialog = true;
    }
    private void OpenDocumentManager(Guid orderId)
    {
        OrderId = orderId;
        _visibleDocumentManagerDialog = true;
    }

    private void OpenOrderDetails(Guid orderId)
    {
        OrderId = orderId;
        ShowDetails = !ShowDetails;
    }
    private void OpenOrderComments(Guid orderId)
    {
        OrderId = orderId;
        _visibleOrderComments = !_visibleOrderComments;
    }
    private async Task LoadStatusList()
    {
        StatusList ??= await ExportedOrderStatusManager.GetAsync();
    }
    private async Task OnStatusFilter(ExportedOrderStatus? status)
    {
        CurrentOrderStatus = status;
        _filterOrderTuple.CurrentStatusId = status?.Id;

        await _table!.ReloadServerData();
    }
    private void OnCompleteOrderFilter(bool? isCompleteOrder)
    {
        OrdersIsCompleted = isCompleteOrder;
        _filterOrderTuple.IsCompleteOrders = isCompleteOrder;
        _table!.ReloadServerData();
    }

    private void ResetStatusFilter()
    {
        CurrentOrderStatus = null;
        _filterOrderTuple.CurrentStatusId = null;
        _table!.ReloadServerData();
    }
    private static string GetMultiSelectionText(List<string> selectedValues) => "Отображаемая цена";

}
<style>
    .mud-table-header {
        background-color: #cbf0ee;
        color: white !important;
        font-weight: bold;
    }
    .my-table-row {
        background: gainsboro;
    }
    .my-table-row-w {
        background: white;
    }

    .select-button {
        margin: 0 !important;
  
        
    }
    .select-button .mud-input-slot.mud-input-root-outlined {
           padding: 0.67rem 0.8rem !important;
            text-transform: uppercase !important;
        font-size: 0.85rem !important;
        
    }

</style>

