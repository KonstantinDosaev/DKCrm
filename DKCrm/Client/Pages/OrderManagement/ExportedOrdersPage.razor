@using DKCrm.Shared.Models.CompanyModels
@using DKCrm.Client.Pages.OrderManagement.Components
@using DKCrm.Client.Pages.OrderManagement.Dialogs
@using DKCrm.Shared.Constants
@using DKCrm.Shared.Models.OrderModels
@using Microsoft.AspNetCore.Components
@page "/export_orders"
@*@page "/imported_order/tag/{tagid:guid}"*@

<MudText Class="m-3" Typo="Typo.h4">Заказы на продажу</MudText>
<MudButton Variant="Variant.Filled" Size="Size.Medium" OnClick="() => _visibleAddOrderDialog = true" Style="margin-left: 1rem;" Color="Color.Tertiary">
    Добавить заказ
    <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2" />
</MudButton>

<MudButton Variant="Variant.Filled" Size="Size.Medium" OnClick="OpenSettingsDialog" Style="margin-left: 1rem;" Color="Color.Tertiary">
    Настройки
    <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Settings" Class="pa-0 ml-2" />
</MudButton>


<MudTable ServerData="@(new Func<TableState, Task<TableData<ExportedOrder>>>(ServerReload))"
          Dense="false"
          Hover="true"
          ReadOnly="false"
          SelectOnRowClick="false"
          Striped="true"
          Bordered="true"
          HeaderClass="mud-table-header table-head-bordered"
          OnRowClick="RowClickEvent" T="ExportedOrder"
          @ref="_table" RowClass="@row" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Список заказов</MudText>
        <MudSpacer />


        <MudTextField Clearable="true" T="string" ValueChanged="@(OnSearch)" Placeholder="Поиск"
                      Style="box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px; border-radius: 6px; padding: 0.5rem; margin-bottom: 0.5rem;"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

        <div>
            <MudSelect Style="min-width:14rem" Class="ml-2" T="string" @bind-Value="SelectedOption">
                <MudSelectItem Value="@(SearchChapterNames.CompanyName)">по компании</MudSelectItem>
                <MudSelectItem Value="@(SearchChapterNames.ProductPartNumber)">по парт-номеру</MudSelectItem>
            </MudSelect>
        </div>



    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="number_field" T="ExportedOrder">Номер заказа</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortLabel="name_field" T="ExportedOrder">Название</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="ourCompany_field" T="ExportedOrder">Наша компания</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="true" SortLabel="conterCompany_field" T="ExportedOrder">Компания поставщик</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="status_field" T="ExportedOrder">Статус</MudTableSortLabel></MudTh>

    </HeaderContent>
    <RowTemplate>

            <MudTd DataLabel="Номер заказа">@context.Id</MudTd>
        
        <MudTd DataLabel="Наименование компании">@context.Name</MudTd>


        <MudTd DataLabel="Наша компания">
            @if (context.OurCompany != null)
            {
                <MudText Typo="Typo.button"> @context.OurCompany.Name </MudText>
                @if (context.OurEmployee != null)
                {
                    <MudText Typo="Typo.body2">

                        @context.OurEmployee.LastName
                        @context.OurEmployee.FirstName
                        @context.OurEmployee.MiddleName

                    </MudText>
                }
            }
        </MudTd>
        <MudTd DataLabel="Компания покупатель">
            @if (context.CompanyBuyer != null)
            {
                <MudText Typo="Typo.button"> @context.CompanyBuyer.Name </MudText>
                @if (context.EmployeeBuyer != null)
                {
                    <MudText Typo="Typo.body2">

                        @context.EmployeeBuyer.LastName 
                        @context.EmployeeBuyer.FirstName 
                        @context.EmployeeBuyer.MiddleName 

                    </MudText>
                }
            }
        </MudTd>
        <MudTd DataLabel="Статус">
            @if (context.ExportedOrderStatus != null)
            {
                @context.ExportedOrderStatus.Value
            }
        </MudTd>
        @if (ProductId == context.Id && _showDetails)
        {
            <MudTd Style="background-color: gainsboro;" DataLabel="">

                <MudIconButton Size="@Size.Medium" OnClick="() => OpenUpdateOrderDialog(context)" Color="Color.Default" Icon="@Icons.Material.Sharp.Edit" Class="pa-0 ml-2" />

            </MudTd>
        }
        else
        {
            <MudTd DataLabel="">

                <MudIconButton Size="@Size.Medium" OnClick="() => OpenUpdateOrderDialog(context)" Color="Color.Default" Icon="@Icons.Material.Sharp.Edit" Class="pa-0 ml-2" />

            </MudTd>
        }
       
        
    </RowTemplate>

    <ChildRowContent>
        @if (ProductId == context.Id && _showDetails)
        {
            <MudTr>
                <td colspan="6" style="text-align: center">
               
                    <MudCard Style="background: gainsboro;" Elevation="25">
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.KeyboardArrowDown"></MudIcon>
                        @*                                <MudCardHeader>
                    <CardHeaderContent>
                    <MudText Typo="Typo.body1">Address Details for <strong>@context.Name</strong></MudText>
                    </CardHeaderContent>
                    </MudCardHeader>*@
                        <MudCardContent Class="pa-1">
                            <ExportOrderDetailsComponent Id="ProductId"/>
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 20 }" />
    </PagerContent>
</MudTable>





<MudDialog @bind-IsVisible="_visibleSettingsOrderDialog" Style="min-width: 900px" Options="new DialogOptions(){CloseButton = true}">
    <DialogContent>
        <MudButton Variant="Variant.Filled" Size="Size.Medium" OnClick="() => _visibleAddOrderDialog = true" Style="margin-left: 1rem;" Color="Color.Tertiary">
        Добавить статус
        <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2" />
        </MudButton>
        @if (StatusList != null)
        {

            foreach (var status in StatusList)
            {
               
            }
        }
        <div class="flex-column">
            @if (StatusList != null)
            {
                @foreach (var status in StatusList)
                {
                             
                    <MudPaper Class="pa-4 m-3" Style="display: flex; justify-content: space-between; align-items: center">
                        <MudText>@status.Value @status.Position</MudText>
                        <MudButtonGroup>
                            <MudIconButton OnClick="() => OpenStatusEditDialog(status)" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" class="ml-auto" />
                            <MudIconButton OnClick="() => OpenStatusRemoveDialog(status)" Size="Size.Small" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" class="ml-auto" />
                        </MudButtonGroup>
                    </MudPaper>
                }
            }
        </div >
    </DialogContent>
</MudDialog>

<MudDialog @bind-IsVisible="_visibleOrderStatusRemoveDialog">
    <DialogContent>


        @if (StatusList != null && StatusList.Any())
        {
            <MudText Class="pb-3 text-decoration-underline text-danger">За данным типом закреплены компании!!!Прикрепите их к другому типу</MudText>
            <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => _visibleOrderStatusRemoveDialog = false" Color="Color.Primary">Закрыть</MudButton>
        }
        else
        {
            <MudText Class="pb-3"><MudIcon Size="Size.Large" Color="Color.Warning" Icon="@Icons.Material.Filled.WarningAmber" />Подтвердите удаление</MudText>
            <div class="pt-5 justify-content-between d-flex">
                <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="async () => await RemoveStatusType()" Color="Color.Error">Удалить</MudButton>
                <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => _visibleOrderStatusRemoveDialog = false" Color="Color.Primary">Закрыть</MudButton>
            </div>
        }

    </DialogContent>
</MudDialog>
<CreateExportedOrderDialog 
    RefreshProductList="() => _table!.ReloadServerData()"
    @bind-VisibleDialog="_visibleAddOrderDialog" 
   />


<EditExportedOrderDialog 
                   Id="Order.Id"
                   RefreshProductList="() => _table!.ReloadServerData()"
                   @bind-VisibleDialog="_visibleUpdateOrderDialog"
                   ApplicationOrderingProduct="Order.ApplicationOrderingProducts" />

@code {
    [Parameter] public string? Chapter { get; set; }
    [Parameter] public Guid ChapterId { get; set; }
    private List<ExportedOrder>? Orders { get; set; }
    private List<ExportedOrder>? AllOrders { get; set; }

    private List<ExportedOrderStatus>? StatusList { get; set; }
    private ExportedOrderStatus Status { get; set; }
    public ExportedOrder Order { get; set; } = new();

    private string? _searchString = null;
    public string? SelectedOption { get; set; } = SearchChapterNames.CompanyName;
    private FilterOrderTuple? _filterOrderTuple;
    private Guid ProductId { get; set; }
    private MudTable<ExportedOrder>? _table;


    MudListItem? _selectedItem;
    object _selectedValue = 1;

    private bool _showDetails;
    private bool _visibleAddOrderDialog;
    private bool _visibleUpdateOrderDialog;
    private bool _visibleSettingsOrderDialog; 
    private bool _visibleOrderStatusRemoveDialog;
    private bool _visibleOrderStatusEditDialog;

    private string row = "my-table-row-w";

    private async Task<TableData<ExportedOrder>> ServerReload(TableState state)
    {
       
        var response = await ExportedOrderManager.GetBySortFilterPaginationAsync(new SortPagedRequest<FilterOrderTuple>()
        {
            PageIndex = state.Page,
            PageSize = state.PageSize,
            SearchString = _searchString,
            SortLabel = state.SortLabel,
            Chapter = Chapter,
            ChapterId = ChapterId,
            SortDirection = state.SortDirection,
            SearchInChapter = SelectedOption,
            FilterTuple = _filterOrderTuple
        });
       
        return new TableData<ExportedOrder>() { TotalItems = response.TotalItems, Items = response.Items };
    }
    private void OnSearch(string text)
    {
        _searchString = text;
        SelectedOption = SelectedOption != "null" ? SelectedOption : null;
        _table!.ReloadServerData();
    }
    private void SelectSearchOption(string text)
    {
        SelectedOption = text!="null"? text : null;
    }
    private void OnFilter(FilterOrderTuple filterTuple)
    {
        _filterOrderTuple = filterTuple;
        _table!.ReloadServerData();
    }


    private void OpenUpdateOrderDialog(ExportedOrder order)
    {
        Order = order;
        _visibleUpdateOrderDialog = true;
    }
    
    private void RowClickEvent(TableRowClickEventArgs<ExportedOrder> tableRowClickEventArgs)
    {
    //row = row == "my-table-row-w" ? "my-table-row" : "my-table-row-w";
        ProductId = tableRowClickEventArgs.Item.Id;
        _showDetails = !_showDetails;
    }

    private async Task OpenSettingsDialog()
    {
        StatusList = await ExportedOrderStatusManager.GetAsync();
        _visibleSettingsOrderDialog = true;
    }
    //public async void AddOrderStatus()
    //{
    //    var tempCompanyType = new CompanyType() { Name = _valueString };
    //    if (await CompanyTypeManager.AddAsync(tempCompanyType))
    //    {
    //        CompanyTypes ??= new List<CompanyType>();
    //        CompanyTypes.Add(tempCompanyType);
    //        await GetCompanyTypes();
    //    }
    //}
    public void OpenStatusEditDialog(ExportedOrderStatus status)
    {
        _visibleOrderStatusEditDialog = true;
        Status = status;
    }
    public void OpenStatusRemoveDialog(ExportedOrderStatus status)
    {
        _visibleOrderStatusRemoveDialog = true;
        Status = status;
    }
    private async Task RemoveStatusType()
    {
        if (await ExportedOrderStatusManager.RemoveAsync(Status!.Id))
        {
            _visibleOrderStatusRemoveDialog = false;
            await InvokeAsync(StateHasChanged);
            _snackBar.Add("Тип компании удален!");
        }
        else
        {
            _snackBar.Add("Ошибка при удалении!");
        }
    }
}
<style>
    .mud-table-header {
        background-color: #cbf0ee;
        color: white !important;
        font-weight: bold;
    }
    .my-table-row {
        background: gainsboro;
    }
    .my-table-row-w {
        background: white;
    }
</style>

