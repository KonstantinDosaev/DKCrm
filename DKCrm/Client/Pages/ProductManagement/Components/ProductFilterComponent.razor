@using DKCrm.Shared.Constants
@using DKCrm.Client.Components.SelectedCategoriesListComponents

<div style="position: absolute">
    <MudExpansionPanels Dense="false" Elevation="25" Style="background-color: #cbf0ee" MultiExpansion="false">
        <MudExpansionPanel Text="КАТЕГОРИИ">
            @if (Chapter != ProductFromChapterNames.Category)
            {
                <div class="d-flex flex-column w-100">
                    <MudButton Variant="Variant.Text" Color="Color.Warning" OnClick="ClearSelectedCategory">Сбросить</MudButton>
                    <SelectedCategoriesListComponent
                        @bind-SelectedCategory="@Category"
                        IsSetCategory="InitCategoryOptions"/>
                </div>
            }
            else
            {
                <MudText>
                    @if (Category != null){@Category.Name}
                </MudText>
            }
        </MudExpansionPanel>
        
        <MudExpansionPanel ExpandedChanged="(async () => await InitBrands())" Text="ПРОИЗВОДИТЕЛИ">
            @if (Chapter != ProductFromChapterNames.Brand)
            {
                @if (Brands != null)
                {
                    <div class="d-flex flex-column w-100">
                        <MudButton Variant="Variant.Text" Color="Color.Warning" OnClick="ClearSelectedBrands">Сбросить</MudButton>
                        <MudPaper Class="p-3">
                            @foreach (var brand in Brands)
                            {
                                BrandCheckBox = false;
                                @if (SelectedBrands != null && SelectedBrands.Contains(brand))
                                { BrandCheckBox = true;  } 
                                <div class="d-flex my-1">
                                    <input type="checkbox" class="mr-2" checked="@BrandCheckBox"
                                           @onchange="eventArgs => { CheckboxBrandClicked(brand, eventArgs.Value!); }" />
                                    <span>@brand.Name</span>
                                </div>
                            }
                        </MudPaper>
                    </div>
                }
            }
            else
            {
                <MudText>@Brands?.FirstOrDefault(o => o.Id == ChapterId)</MudText>
            }
        </MudExpansionPanel>
        
        <MudExpansionPanel Text="ОПЦИИ ПРОДУКТА">
            @if (CategoryOptions != null)
            {
                <div class="d-flex flex-column w-100">
                    <MudButton Variant="Variant.Text" Color="Color.Warning" 
                               OnClick="ClearSelectedProductOptions">Сбросить</MudButton>
                    <p>@SelectedProductOptions.Count</p>
                    <MudExpansionPanels Elevation="25" Style="background-color: #cbf0ee" MultiExpansion="true">
                        @foreach (var state in CategoryOptions)
                        {
                            <MudExpansionPanel Text="@state.Name">
                                @if (state.ProductOption != null)
                                {
                                    @foreach (var option in state.ProductOption.GroupBy(g => g.Value))
                                    {
                                        ProductOptionsCheckBox = false;
                                        @if (SelectedProductOptions != null && SelectedProductOptions.Contains(option.FirstOrDefault()!.Id))
                                        {  
                                            ProductOptionsCheckBox = true;  
                                        }
                                        <div class="d-flex my-1">
                                            <input type="checkbox" class="mr-2" checked="@ProductOptionsCheckBox"
                                                   @onchange="eventArgs => { CheckboxOptionClicked(option, eventArgs.Value!); }" />

                                            <span>@($"{option.Key} ({option.Count()})")</span>
                                        </div>
                                    }
                                }
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                </div>
            }
            else
            {
                <MudText>Выберите категорию</MudText>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudPaper Class="p-3"
              Outlined="true">
        <MudText Typo="Typo.button" Class=" fs-6">Создан</MudText>
        <div class="d-flex align-items-center justify-content-between w-100">
            <MudText Typo="Typo.button" Class=" fs-6">С</MudText>
            <div>
                <MudDatePicker Editable="true"
                               Date="FilterTuple.CreateDateFirst"
                               DateChanged="OnFirstDateTimeCreatedFilter"
                               Mask="@(new DateMask("dd/MM/yyyy"))"
                               DateFormat="dd/MM/yyyy"
                               Placeholder="день/месяц/год"
                               Variant="Variant.Outlined"
                               Style=" margin: 0 1rem;"
                               Class="myDataPicker_filter"
                               Clearable IconSize="Size.Small" />
            </div>
        </div>
        <div class="d-flex align-items-center justify-content-between w-100">
            <MudText Typo="Typo.button" Class=" fs-6">По</MudText>
            <div>
                <MudDatePicker Editable="true"
                               Date="FilterTuple.CreateDateLast"
                               DateChanged="OnLastDateTimeCreatedFilter"
                               Mask="@(new DateMask("dd/MM/yyyy"))"
                               DateFormat="dd/MM/yyyy"
                               Placeholder="день/месяц/год"
                               Variant="Variant.Outlined"
                               Style="margin: 0 1rem"
                               Clearable
                               Class="myDataPicker_filter"/>
            </div>
        </div>
    </MudPaper>
    <MudPaper Class="p-3"
              Outlined="true">
        <MudText Typo="Typo.button" Class=" fs-6">Обновлен</MudText>
        <div class="d-flex align-items-center justify-content-between w-100">
            <MudText Typo="Typo.button" Class=" fs-6">С</MudText>
            <div>
                <MudDatePicker Editable="true"
                               Date="FilterTuple.UpdateDateFirst"
                               DateChanged="OnFirstDateTimeUpdateFilter"
                               Mask="@(new DateMask("dd/MM/yyyy"))"
                               DateFormat="dd/MM/yyyy"
                               Placeholder="день/месяц/год"
                               Variant="Variant.Outlined"
                               Style=" margin: 0 1rem;"
                               Class="myDataPicker_filter"
                               Clearable IconSize="Size.Small" />
            </div>
        </div>
        <div class="d-flex align-items-center justify-content-between w-100">
            <MudText Typo="Typo.button" Class=" fs-6">По</MudText>
            <div>
                <MudDatePicker Editable="true"
                               Date="FilterTuple.UpdateDateLast"
                               DateChanged="OnLastDateTimeUpdateFilter"
                               Mask="@(new DateMask("dd/MM/yyyy"))"
                               DateFormat="dd/MM/yyyy"
                               Placeholder="день/месяц/год"
                               Variant="Variant.Outlined"
                               Style="margin: 0 1rem"
                               Clearable
                               Class="myDataPicker_filter"/>
            </div>
        </div>

    </MudPaper>
    <div style="position: sticky; bottom: 0; background: white; display: flex; justify-content:space-between;padding: 1rem">
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Warning" Class="" OnClick="ClearAll">Сбросить</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Success" 
                   Class="" OnClick="ApplyFilter">Применить</MudButton>
    </div>
</div>
@code {
    [Parameter]
    public object? SelectedValue { get; set; } = 1;
    public bool ProductOptionsCheckBox { get; set; } = false;
    public bool BrandCheckBox { get; set; } = false;
    [Parameter] public string? Chapter { get; set; }
    [Parameter] public Guid? ChapterId { get; set; }
    public Category? Category { get; set; }
    private ICollection<CategoryOption>? CategoryOptions { get; set; }
    [Parameter] public FilterProductTuple FilterTuple { get; set; } = null!;
    [Parameter]public EventCallback<FilterProductTuple> IsSetOption { get; set; }
    public List<Guid>? ProductIdFromOptions { get; set; }
    public List<Guid> SelectedProductOptions { get; set; } = new ();
    private List<Category>? Categories { get; set; }
    public List<Brand>? Brands { get; set; }
    private List<Brand> SelectedBrands { get; set; } = new();

    private void CheckboxOptionClicked(IGrouping<string, ProductOption> aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedProductOptions.Contains(aSelectedId.FirstOrDefault()!.Id))
            {
                SelectedProductOptions.AddRange(aSelectedId.Select(s => s).Select(s => s.Id));
            }
        }
        else
        {
            if (SelectedProductOptions.Contains(aSelectedId.FirstOrDefault()!.Id))
            {
                foreach (var id in aSelectedId)
                {
                    SelectedProductOptions.Remove(id.Id);
                }
            }
        }
    }
    private void CheckboxBrandClicked(Brand aSelected, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedBrands.Contains(aSelected))
            {
                SelectedBrands.Add(aSelected);
            }
        }
        else
        {
            if (SelectedBrands.Contains(aSelected))
            {
                SelectedBrands.Remove(aSelected);
            }
        }
    }
   
    private void InitCategoryOptions()
    {
        if (Category != null) CategoryOptions = Category.CategoryOptions;
    }
    private async Task InitBrands()
    {
        Brands ??= await BrandManager.GetAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        FilterTuple ??= new FilterProductTuple();
        if (Chapter != null && ChapterId != null)
        {
            switch (Chapter)
            {
                case ProductFromChapterNames.Category:
                    Category = await CategoryManager.GetDetailsAsync((Guid)ChapterId);
                    CategoryOptions = Category.CategoryOptions;
                    break;
                case ProductFromChapterNames.Brand:
                    SelectedBrands = new List<Brand>() { Brands?.FirstOrDefault(o => o.Id == ChapterId)! };
                    break;
            }
        }
    }
    
    private async Task ApplyFilter()
    {
        ProductIdFromOptions = SelectedProductOptions;
        if (SelectedBrands.Count != 0)
            FilterTuple.BrandIdList = SelectedBrands.Select(s => s.Id).ToList();
        if (SelectedProductOptions.Count != 0)
            FilterTuple.ProductOptions = SelectedProductOptions;
        if (Category != null)
            FilterTuple.CategoryId = Category.Id;
        await IsSetOption.InvokeAsync(FilterTuple);
    }
    private void ClearSelectedProductOptions()
    {
        SelectedProductOptions.Clear();
    
    }
    private  void ClearSelectedBrands()
    {
        SelectedBrands.Clear();
  
    }
    private void ClearSelectedCategory()
    {
       Category=null;
       ClearSelectedProductOptions();
    }
    private void OnFirstDateTimeCreatedFilter(DateTime? dateTime)
    {
        FilterTuple.CreateDateFirst = dateTime;
    }
 
    private void OnLastDateTimeCreatedFilter(DateTime? dateTime)
    {
        FilterTuple.CreateDateLast = dateTime;
    }
    private void OnFirstDateTimeUpdateFilter(DateTime? dateTime)
    {
        FilterTuple.UpdateDateFirst = dateTime;
    }
 
    private void OnLastDateTimeUpdateFilter(DateTime? dateTime)
    {
        FilterTuple.UpdateDateLast = dateTime;
    }
    private async Task ClearAll()
    {
        ClearSelectedProductOptions();
        ClearSelectedBrands();
        ClearSelectedCategory();
         FilterTuple.CreateDateFirst = null;
        FilterTuple.CreateDateFirst = null;
        FilterTuple.UpdateDateFirst = null;
        FilterTuple.UpdateDateLast = null;
        ProductIdFromOptions = null;
        FilterTuple.BrandIdList = null;
        FilterTuple.ProductOptions = null;
        FilterTuple.CategoryId = null;
        await IsSetOption.InvokeAsync(FilterTuple);
    }

}

