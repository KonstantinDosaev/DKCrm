<MudDialog IsVisibleChanged="VisibleDialogChanged" IsVisible="VisibleDialog" Options="new DialogOptions() { FullWidth = true }">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="CloseClick" Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <MudCard>
            <ProductForm
                OnValidSubmit="EditProduct"
                Product="_iii"
                ButtonText="Сохранить"
                TitleText="Изменение продукта"/>
        </MudCard>
    </DialogContent>
</MudDialog>


@code {
    [Parameter]public bool VisibleDialog { get; set; }
    [Parameter]public Product? Product { get; set; }
    [Parameter]public Guid? ProductId { get; set; }
    [Parameter] public EventCallback RefreshProductList { get; set; }
    [Parameter] public EventCallback Close { get; set; }
    private Product _iii;
    protected override async Task OnParametersSetAsync()
    {
        if (ProductId != null && ProductId!=Guid.Empty) _iii = await ProductManager.GetProductDetailsAsync((Guid)ProductId);
    }
    
    async Task EditProduct()
    {
        if (await ProductManager.UpdateProductAsync(_iii))
        {
            _snackBar.Add("Продукт обновлен");
            await RefreshProductList.InvokeAsync();
            await Close.InvokeAsync();
            VisibleDialog = false;
        }
        

    }

    [Parameter]public EventCallback<bool> VisibleDialogChanged { get; set; }
    async Task CloseClick()
    {
        VisibleDialog = false;
        await VisibleDialogChanged.InvokeAsync(VisibleDialog);
    }

}