@page "/product"
@page "/product/{chapter}/{chapterid:guid}"
@using DKCrm.Shared.Constants
@using DKCrm.Client.Pages.ProductManagement.Components

<MudPaper class="d-flex align-items-center justify-content-between p-2 m-2" Elevation="4" Outlined="true">
    <div class="d-flex">
        <MudTooltip Text="фильтр">
            <MudButton Variant="Variant.Filled" Size="Size.Medium"
                       OnClick="() => _visibleProductFilter = true"
                       Style="margin-left: 1rem;" Color="@(_filterIsOn ? Color.Warning : Color.Default)">
                <MudIcon Size="@Size.Medium" Color="Color.Default"
                         Icon="@Icons.Material.Sharp.FilterAlt" Class="pa-0 ml-2"/>
            </MudButton>
        </MudTooltip>
        <MudButton Variant="Variant.Filled" Size="Size.Medium"
                   OnClick="() => _storageSettings!.OpenStorageDialog()"
                   Style="margin-left: 1rem;" Color="Color.Default">
            Склады
            <MudIcon Size="@Size.Medium" Color="Color.Default"
                     Icon="@Icons.Material.Sharp.FilterAlt"
                     Class="pa-0 ml-2"/>
        </MudButton>
    </div>
    <div>
        
        <MudButton Variant="Variant.Filled" Size="Size.Medium"
                   OnClick="()=> _visibleCreatedProductDialog =true" Style="margin-left: 1rem;"
                   Color="Color.Tertiary">
            Добавить продукт
            <MudIcon Size="@Size.Medium" Color="Color.Default"
                     Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2"/>
        </MudButton>
        @if (_selectedItems.Any())
        {
            <MudButton Variant="Variant.Filled" 
                       StartIcon="@Icons.Material.Filled.Delete" 
                       Color="Color.Error" OnClick="OnButtonDeleteClicked" 
                       Style="margin-left: 1rem;">Удалить</MudButton>
        }
    </div>
</MudPaper>

<MudTable ServerData="ServerReload"
          Dense="true"
          Hover="true"
          ReadOnly="false"
          @bind-SelectedItems="_selectedItems"
          ApplyButtonPosition="@_applyButtonPosition"
          MultiSelection="true"
          SelectOnRowClick="false"
          Striped="true" 
          Bordered="true" 
          OnRowClick="RowClickEvent" T="ProductsDto"
          AllowUnsorted="true"
          HeaderClass="mud-table-header table-head-bordered mud-table-header-fix"
          FixedHeader="true" Height="@($"{(int)(WindowHeight * 0.69)}px")"
          @ref="_table">

    <ToolBarContent>
        <MudText Typo="Typo.h6">@(_currentCategoryName ?? "Список продуктов")</MudText>


        <MudSpacer />
        <MudTextField Clearable="true" T="string" ValueChanged="@(OnSearch)" Placeholder="Поиск"
                      Style="box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;border-radius: 6px;padding: 0.5rem; margin-bottom: 0.5rem"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>

    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="partNumber_field" T="ProductsDto">P/N</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortLabel="name_field" T="ProductsDto">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="brand_field" T="ProductsDto">Производитель</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="category_field" T="ProductsDto">Категория</MudTableSortLabel></MudTh>
        <MudTh Style="text-align: center">Количество
            <MudIconButton Icon="@Icons.Material.Filled.FormatLineSpacing"
                           OnClick="() => _isOpenQuantityAtStorages = _isOpenQuantityAtStorages != true"></MudIconButton>
        </MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="pn">@context.PartNumber</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Brand">
            @if (context.BrandName != null)
            {
                @context.BrandName
            }
        </MudTd>
        <MudTd DataLabel="Категория">
            @if (context.CategoryName != null)
            {
                @context.CategoryName
            }
        </MudTd>
        <MudTd Style="text-align: center" DataLabel="Quntity">
            @if (context.ProductsInStorage != null)
            {
                @if (_isOpenQuantityAtStorages)
                {
                    @foreach (var item in context.ProductsInStorage)
                    {
                        <div>@item.Storage!.Name <b>@item.Quantity</b></div>
                    }
                }
                else
                {
                    <b>@context.ProductsInStorage.Select(s=>s.Quantity).Sum()</b>
                }
            }
        </MudTd>
        <MudTd Style="text-align: center" DataLabel="Edit">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenUpdateProductDialog(context.Id)"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Нет данных в списке</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Загрузка...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 20, int.MaxValue }" Style="height: 30px;" RowsPerPageString="Строк на странице" />
    </PagerContent>
</MudTable>

<MudDrawer @bind-Open="@_visibleProductFilter"
           Anchor="@Anchor.Start" Elevation="1" 
           Variant="@DrawerVariant.Temporary" 
           Height="@(WindowHeight.ToString())" Width="350px">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Фильтр</MudText>
    </MudDrawerHeader>
    <ProductFilterComponent  Chapter="@Chapter"
                            ChapterId="@ChapterId"
                            IsSetOption="OnFilter"/>
</MudDrawer>
<CreateProductDialog @bind-VisibleDialog="_visibleCreatedProductDialog"
                     RefreshProductList="OnParametersSetAsync"/>
               
<EditProductDialog @bind-VisibleDialog="_visibleEditProductDialog"
                   ProductId="ProductId"
                   RefreshProductList="OnParametersSetAsync"/>

<ProductDetailDialog @bind-VisibleDialog="_visibleDetailProductDialog"
                   ProductId="ProductId"/>

<StorageSettings @ref="_storageSettings"/>

@code {
    [CascadingParameter(Name = "WindowHeight")] private int WindowHeight { get; set; }
    [CascadingParameter(Name = "GlobalFilterType")] private int GlobalFilterType { get; set; }
    [CascadingParameter(Name = "GlobalFilterValue")] private string? GlobalFilterValue { get; set; }
    [Parameter] public Guid? ChapterId { get; set; }
    [Parameter] public string? Chapter { get; set; }
    public Guid ProductId;
    private string? _currentCategoryName;
    bool _visibleCreatedProductDialog; 
    bool _visibleEditProductDialog;
    bool _visibleDetailProductDialog;
    private bool _visibleProductFilter;

    private bool _filterIsOn; 
    bool _isOpenQuantityAtStorages;

    private HashSet<ProductsDto> _selectedItems = new();
    private MudTable<ProductsDto>? _table;
    private StorageSettings? _storageSettings;

    private string? _searchString = null;
    private FilterProductTuple? _filterProductTuple;

    private TableApplyButtonPosition _applyButtonPosition = TableApplyButtonPosition.Start;

    protected override async Task OnParametersSetAsync()
    {
        if (_table != null) await _table.ReloadServerData();
    }

    private async Task<TableData<ProductsDto>> ServerReload(TableState state,CancellationToken token)
    {
        var response = await ProductManager.GetProductsBySortAsync(new SortPagedRequest<FilterProductTuple>()
            {
                PageIndex = state.Page,
                PageSize = state.PageSize,
                SearchString = _searchString,
                SortLabel = state.SortLabel,
                Chapter = Chapter,
                ChapterId = ChapterId,
                SortDirection = state.SortDirection,
                FilterTuple = _filterProductTuple,
                GlobalFilterValue = GlobalFilterValue,
                GlobalFilterType = (GlobalFilterTypes)Enum.GetValues(typeof(GlobalFilterTypes)).GetValue(GlobalFilterType)!

            });
          //  pagedData = response.Items;
        // if (response.Items != null && Chapter== ProductFromChapterNames.Category && response.Items.Any())
        // {
        //     _currentCategoryName = response.Items.FirstOrDefault()!.CategoryName;
        // }
        // else
        // {
        //     _currentCategoryName = null;
        // }

            return new TableData<ProductsDto>() { TotalItems = response.TotalItems, Items = response.Items };
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table!.ReloadServerData();
    }
    private void OnFilter(FilterProductTuple filterProductTuple)
    {
        if (filterProductTuple.ProductOptions != null && filterProductTuple.ProductOptions.Count() != 0
            || filterProductTuple.BrandIdList != null && filterProductTuple.BrandIdList.Count != 0
            || filterProductTuple.CategoryId != null && filterProductTuple.CategoryId != Guid.Empty)
        {
            _filterIsOn = true;
        }
        else
        {
            _filterIsOn = false;
        }
        _filterProductTuple = filterProductTuple;
        _table!.ReloadServerData();
    }

    private void OpenUpdateProductDialog(Guid id)
    {
        ProductId = id;
        _visibleEditProductDialog = true;
    }
  
    private void RowClickEvent(TableRowClickEventArgs<ProductsDto> tableRowClickEventArgs)
    {
        ProductId = tableRowClickEventArgs.Item.Id;
        _visibleDetailProductDialog = true;
    }

    [Inject] private IDialogService DialogService { get; set; } = null!;

    private async void OnButtonDeleteClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Внимание",
            "Подтвердите удаление!",
            yesText: "Удалить!  ", cancelText: "  Отменить");

        if (result != null && (bool)result)
        {
            RemoveElement(_selectedItems);
        }
        StateHasChanged();
    }
    private async void RemoveElement(IEnumerable<ProductsDto> selectedItems)
    {
        var tempList = new List<ProductsDto>(selectedItems);
        foreach (var item in tempList)
        {
            await ProductManager.RemoveAsync(item.Id);
        }
        await _table!.ReloadServerData();
    }

}
<style>
    .mud-table-header {
        background-color: #cbf0ee;
        color: white !important;
        font-weight: bold;
    }
    .mud-table-sticky-header * .mud-table-root .mud-table-header-fix * .mud-table-cell {
        background-color: dodgerblue;
        font-weight: bold;
        color: white;
    }
</style>