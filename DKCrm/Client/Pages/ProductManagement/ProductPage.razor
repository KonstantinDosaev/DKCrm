@page "/product"
@page "/product/{chapter}/{chapterid:guid}"
@using Microsoft.AspNetCore.Components
@using DKCrm.Client.Components.ProductFilter
@using Microsoft.OData.UriParser
@inject ISnackbar Snackbar
@*    SortLabel="Sort By"*@  @*   Filter="new Func<Product, bool>(FilterFunc)"*@    @*Items="@Elements"*@
<MudTable ServerData="@(new Func<TableState, Task<TableData<ProductsDto>>>(ServerReload))"
          Dense="false"
          Hover="true"
          ReadOnly="false"
          @bind-SelectedItems="selectedItems"
          ApplyButtonPosition="@applyButtonPosition"
          MultiSelection="true"
          SelectOnRowClick="false"
          Striped="true" 
          Bordered="true" 
          HeaderClass="mud-table-header table-head-bordered"
          OnRowClick="RowClickEvent" T="ProductsDto"
          @ref="table">

    <ToolBarContent>
        <MudText Typo="Typo.h4">@(_currentCategoryName ?? "Список продуктов")</MudText>
        <MudButton Variant="Variant.Filled" Size="Size.Medium" OnClick="()=> _visibleCreatedProductDialog =true" Style="margin-left: 1rem;" Color="Color.Tertiary">
            Добавить продукт
            <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2"/>
        </MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Medium" OnClick="() => _visibleProductFilter=true" Style="margin-left: 1rem;" Color="Color.Warning">
            Фильтр
            <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.FilterAlt" Class="pa-0 ml-2"/>
        </MudButton>
            <MudButton Variant="Variant.Filled" Size="Size.Medium" OnClick="() => _storageSettings.OpenStorageDialog()" Style="margin-left: 1rem;" Color="Color.Warning">
            Склады
            <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.FilterAlt" Class="pa-0 ml-2"/>
        </MudButton>
        @if (selectedItems.Any())
        {
            <MudButton Variant="Variant.Filled"  StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="OnButtonDeleteClicked" Style="margin-left: 1rem;">Удалить</MudButton>
        }

        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
       
        
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="category_field" T="ProductsDto">Категория</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortLabel="name_field" T="ProductsDto">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="partNumber_field" T="ProductsDto">P/N</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="brand_field" T="ProductsDto">Производитель</MudTableSortLabel></MudTh>
        <MudTh Style="max-width: 4rem; text-align: center">Количество
            <MudIconButton Icon="@Icons.Material.Filled.FormatLineSpacing"
                           OnClick="() => _isOpenQuantityAtStorages = _isOpenQuantityAtStorages != true"></MudIconButton>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Категория">
            @if (context.CategoryName != null)
            {
                @context.CategoryName
            }
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Email">@context.PartNumber</MudTd>
        <MudTd DataLabel="Brand">
            @if (context.BrandName != null)
            {
                @context.BrandName
            }
        </MudTd>
        <MudTd Style="max-width: 4rem; text-align: center" DataLabel="Quntity">
            @if (context.ProductsInStorage != null)
            {

                @if (_isOpenQuantityAtStorages)
                {
                    @foreach (var item in context.ProductsInStorage)
                    {
                        <div>@item.Storage!.Name <b>@item.Quantity</b></div>
                    }
                }
                else
                {
                    <b>@context.ProductsInStorage.Select(s=>s.Quantity).Sum()</b>
                }
            }
        </MudTd>
        <MudTd Style="max-width: 2rem; text-align: center" DataLabel="Edit">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenUpdateProductDialog(context.Id)"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Нет данных в списке</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Загрузка...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 2, 4, 10, 100, int.MaxValue }" HidePageNumber="true" RowsPerPageString="Строк на странице" />
    </PagerContent>
</MudTable>



<MudDrawer @bind-Open="@_visibleProductFilter" Anchor="@Anchor.Start" Elevation="1" Variant="@DrawerVariant.Temporary" Height="100VH" Width="50VW">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Фильтр</MudText>
    </MudDrawerHeader>
    <ProductFilterComponent/>
</MudDrawer>
<CreateProductDialog VisibleDialog="_visibleCreatedProductDialog"
                     RefreshProductList="OnParametersSetAsync"
                     Close="() => _visibleCreatedProductDialog=false" />
<EditProductDialog VisibleDialog="_visibleEditProductDialog"
                   ProductId="ProductId"
                   RefreshProductList="OnParametersSetAsync"
                   Close="() => _visibleEditProductDialog=false"/>

<ProductDetailDialog VisibleDialog="_visibleDetailProductDialog"
                   ProductId="ProductId"
                   Close="() => _visibleDetailProductDialog=false" />

<StorageSettings @ref="_storageSettings"/>



@code {
    [Parameter] public string? Chapter { get; set; }
    IEnumerable<Product> data;
    bool _visibleCreatedProductDialog; 
    bool _visibleEditProductDialog;
    bool _isOpenQuantityAtStorages; 
    bool _visibleDetailProductDialog;
   

    private IEnumerable<ProductsDto> pagedData;
    private MudTable<ProductsDto>? table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<ProductsDto>> ServerReload(TableState state)
    {
        var response = await ProductManager.GetProductsBySortAsync(new SortPagedRequest()
            {
                PageIndex = state.Page,
                PageSize = state.PageSize,
                SearchString = searchString,
                SortLabel = state.SortLabel,
                Chapter = Chapter,
                ChapterId = ChapterId,
                SortDirection = (OrderByDirection?)(state.SortDirection)
                    
            });
            return new TableData<ProductsDto>() { TotalItems = response.TotalItems, Items = response.Items };
    }
    private void OpenUpdateProductDialog(Guid id)
    {
        ProductId = id;
        _visibleEditProductDialog = true;
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table!.ReloadServerData();
    }
    private void RowClickEvent(TableRowClickEventArgs<ProductsDto> tableRowClickEventArgs)
    {
        ProductId = tableRowClickEventArgs.Item.Id;
        _visibleDetailProductDialog = true;
    }
}
<style>
    .mud-table-header {
        background-color: #cbf0ee;
        color: white !important;
        font-weight: bold;
    }
</style>