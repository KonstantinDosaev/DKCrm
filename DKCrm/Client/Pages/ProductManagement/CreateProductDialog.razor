@using DKCrm.Shared.Models.OrderModels
<MudDialog VisibleChanged="VisibleDialogChanged" Visible="VisibleDialog" Options="new DialogOptions() { FullWidth = true }">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="CloseClick" Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <MudCard>
            <ProductForm
                @ref="_productForm"
                OnValidSubmit="CreateProduct"
                Product="Product"
                ButtonText="Сохранить"
                TitleText="Создание продукта"
                MissingProductInCatalog = "MissingProductInCatalog"/>
           
        </MudCard>
    </DialogContent>
</MudDialog>


@code {
    [Parameter] public bool VisibleDialog { get; set; }
    [Parameter] public EventCallback RefreshProductList { get; set; }
    [Parameter] public EventCallback Close { get; set; }
    [Parameter] public Product? Product { get; set; } = new Product();
    [Parameter] public MissingProductInCatalog? MissingProductInCatalog { get; set; }
    private ProductForm? _productForm;
    protected override  void OnParametersSet()
    {
      
    }
    async Task CreateProduct()
    {
        if (!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите сохранение"))
            return;
        await ProductManager.AddProductAsync(_productForm!.Product!);
        await RefreshProductList.InvokeAsync();
        _snackBar.Add("Продукт добавлен");
    }
   
    [Parameter]public EventCallback<bool> VisibleDialogChanged { get; set; }
    async Task CloseClick()
    {
        VisibleDialog = false;
        await VisibleDialogChanged.InvokeAsync(VisibleDialog);
    }
}
