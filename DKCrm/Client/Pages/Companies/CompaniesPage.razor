@using DKCrm.Shared.Constants
@using DKCrm.Shared.Models.CompanyModels
@using DKCrm.Shared.Requests

@page "/companies"
@page "/companies/tag/{tagid:guid}"



<MudPaper class="d-flex align-items-center justify-content-between p-2 m-2" Elevation="4" Outlined="true">
    <div class="d-flex">
        @*<MudTooltip Text="фильтр">
            <MudButton Variant="Variant.Filled"
                       Size="Size.Medium"
                       OnClick="() => _visibleOrderFilter = true"
                       Style="margin-right: 1rem;" Color="@(_filterIsOn ? Color.Warning : Color.Default)">
                <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.FilterAlt" Class="pa-0 ml-2"/>
            </MudButton>
        </MudTooltip>*@
        <MudButton Variant="Variant.Filled" Size="Size.Medium"
                   OnClick="() => VisibleCompanySettingsDrawer = true" Style="margin-right: 1rem;"
                   Color="Color.Tertiary">
            Настройки
            <MudIcon Size="@Size.Small" Color="Color.Default"
                     Icon="@Icons.Material.Sharp.Settings" Class="pa-0 ml-2" />
        </MudButton>


    </div>
    <div class="d-flex">
        <MudTextField Clearable="true" T="string" ValueChanged="@(OnSearch)" Placeholder="Поиск"
                      Style="box-shadow: rgba(100, 100, 111, 0.4) 0 7px 29px 0;border-radius: 6px;padding: 0.2rem; width: 300px;"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0 mr-2"></MudTextField>

        @*<div class="mr-2">
            <MudSelect Variant="Variant.Outlined" Style=""
                       Class="select-button" T="string"
                       @bind-Value="SelectedOption">
                <MudSelectItem Value="@(SearchChapterNames.OrderNumber)">по номеру заказа</MudSelectItem>
                <MudSelectItem Value="@(SearchChapterNames.CompanyName)">по компании</MudSelectItem>
                <MudSelectItem Value="@(SearchChapterNames.ProductPartNumber)">по парт-номеру</MudSelectItem>
            </MudSelect>
        </div>*@
        <MudButton Variant="Variant.Filled" Size="Size.Medium"
                   OnClick="() => _visibleAddCompanyDialog = true"
                   Style="margin-left: 1rem;" Color="Color.Tertiary">
            Добавить компанию
            <MudIcon Size="@Size.Medium" Color="Color.Default"
                     Icon="@Icons.Material.Sharp.Add" Class="pa-0"/>
        </MudButton>
    </div>
</MudPaper>

<div class="d-flex ">
    <div class="flex-grow-1 mr-4">
        <MudTable SortLabel="Sort By" T="Company" 
                  OnRowClick="RowClickEvent" Filter="new Func<Company,bool>(FilterFunc1)"
                  ServerData="ServerReload"
                  Dense="true"
                  Hover="true"
                  Striped="true"
                  Bordered="true"
                  AllowUnsorted="true"
                  HeaderClass="mud-table-header table-head-bordered mud-table-header-fix"
                  FixedHeader="true" Height="@($"{(int)(WindowHeight * 0.76)}px")"
                  @ref="_table">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="name_field"  T="Company">Наименование компании</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel Enabled="true" SortLabel="director_field"  T="Company">Руководитель</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel Enabled="true" SortLabel="country_field"  T="Company">Страна</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel Enabled="true" SortLabel="city_field"  T="Company">Город</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel Enabled="true" SortLabel="" T="Company">Тип контрагента</MudTableSortLabel></MudTh>
                <MudTh>        <WarningCompanyCommentComponent /></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Наименование компании">@context.Name</MudTd>
                <MudTd DataLabel="Руководитель">@context.Director</MudTd>
                <MudTd DataLabel="Страна">
                    @if (context.ActualAddress != null)
                    {
                        @context.ActualAddress.Country
                    }
                </MudTd>
                <MudTd DataLabel="Город">
                    @if (context.ActualAddress != null)
                    {
                        @context.ActualAddress.City
                    }
                </MudTd>
                <MudTd DataLabel="Тип контрагента">
                    @if (context.CompanyType != null)
                    {
                        @context.CompanyType.Name
                    }
                </MudTd>
                <MudTd>
                    <MudIconButton Size="@Size.Medium" 
                                   OnClick="() => OpenCompanyComments(context.Id)"
                                   Color="@(NotOpenedCommentIsd!= null && NotOpenedCommentIsd.Contains(context.Id) 
                                              ? Color.Error : Color.Default)"
                                   Icon="@Icons.Material.Sharp.Comment"
                                   Class="pa-0 ml-2"/>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 20 }" />
            </PagerContent>
        </MudTable>
    </div>
    <div style="min-width: 250px">
        <MudCard Outlined="true" Class="pa-3">
            <MudText Typo="Typo.h4">Теги</MudText>
            @if (TagsCompanies != null)
            {
                <MudList Style="" @bind-SelectedValue="_selectedItem" 
                         Color="Color.Primary" SelectionMode="SelectionMode.SingleSelection">
                    <MudListItem Dense="true" OnClick="GetAllCompanies" >
                        Все компании
                    </MudListItem>
                    @foreach (var tag in TagsCompanies)
                    {
                        <MudListItem Dense="true" OnClick="(() => FilterCompanyByTag(tag.Id))" Value="@tag.Name">
                            @tag.Name
                        </MudListItem>
                    }
                </MudList>
            }
        </MudCard>
    </div>
</div>

<CreateCompanyDialog 
    RefreshParent="GetAllCompanies"
                     @bind-VisibleDialog="_visibleAddCompanyDialog" />

<MudDialog @bind-Visible="@VisibleCompanySettingsDrawer" 
           Options="new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large}" >
    <TitleContent> <MudText Typo="Typo.h6">Общие настройки компаний</MudText></TitleContent>
    <DialogContent>
        <CompanyPageSettings/>
    </DialogContent>
</MudDialog>
@if (_visibleComments)
{
    <MudDialog @bind-Visible="_visibleComments" Style="max-width: 700px;padding: 0"
               Options="new DialogOptions(){CloseButton = true, FullScreen = true,}" Class="no-padding">
        <DialogContent>
            <CompanyCommentsComponent CurrentCompanyId="CompanyId"/>
        </DialogContent>
    </MudDialog>
}
@*    <MudDrawer @bind-Open="@VisibleCompanySettingsDrawer" Anchor="Anchor.Right" Elevation="1" Variant="@DrawerVariant.Temporary" Height="100vh" Width="900px">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Общие настройки компаний</MudText>
        </MudDrawerHeader>
        
        <CompanyPageSettings/>
    </MudDrawer>*@

@code {
    [CascadingParameter(Name = "WindowHeight")] private int WindowHeight { get; set; }
    [CascadingParameter(Name = "GlobalFilterType")] private int GlobalFilterType { get; set; }
    [CascadingParameter(Name = "GlobalFilterValue")] private string? GlobalFilterValue { get; set; }
    [Parameter] public Guid? TagId { get; set; }
    WarningCompanyCommentComponent? _warningCommentComponent;
    public Guid CompanyId { get; set; } 
    private  List<CompanyType>? CompanyTypes { get; set; }
    private  List<TagsCompany>? TagsCompanies { get; set; }
    private List<Company>? Companies { get; set; }
    private List<Company>? AllCompanies { get; set; }
    public Company CreatedCompany { get; set; } = new ();
    private string _searchString1 = "";
    public bool VisibleCompanySettingsDrawer { get; set; }
    MudListItem<TagsCompany>? _selectedItem;
    object _selectedValue = 1;
    private bool _visibleAddCompanyDialog;
    private bool _visibleComments;
    private List<Guid>? NotOpenedCommentIsd { get; set; }
    private List<CompanyComment>? _warnComments;
    private Color WarningCommentIconColor { get; set; }
    private MudTable<Company> _table = null!;
    private FilterCompanyTuple _filterTuple= new FilterCompanyTuple();
    protected override async Task OnInitializedAsync()
    {
       // await GetAllCompanies();
        CompanyTypes = await CompanyTypeManager.GetAsync();
        TagsCompanies = await CompanyTagsManager.GetAsync();

        /*if (TagId!= null && TagId!= Guid.Empty)
        {
            //Companies = TagsCompanies.Where(w => w.Id == TagId)!.FirstOrDefault()!.Companies!.ToList();
            Companies = AllCompanies!.Where(w => w.TagsCompanies != null && w.TagsCompanies
                .Select(s => s.Id).Contains((Guid)TagId)).ToList();
            _selectedValue = TagsCompanies!.FirstOrDefault(w => w.Id == TagId)!.Name;
        }*/
      
    }
    private async Task<TableData<Company>> ServerReload(TableState state, CancellationToken token)
    {
        var response = await CompanyManager.GetBySortFilterPaginationAsync(new SortPagedRequest<FilterCompanyTuple>()
        {
            PageIndex = state.Page,
            PageSize = state.PageSize,
            SearchString = _searchString1,
            SortLabel = state.SortLabel,
            SortDirection = state.SortDirection,
          //  SearchInChapter = SelectedOption,
            FilterTuple = _filterTuple,
            GlobalFilterValue = GlobalFilterValue,
            GlobalFilterType = (GlobalFilterTypes)Enum.GetValues(typeof(GlobalFilterTypes)).GetValue(GlobalFilterType)!
        });
        return new TableData<Company>() { TotalItems = response.TotalItems, Items = response.Items };
    }   
    protected override async Task OnParametersSetAsync()
    {
        if (_table != null) await _table.ReloadServerData();
    }

  
    private async Task GetAllCompanies()
    {
      
        AllCompanies ??= await CompanyManager.GetAsync();
        Companies = AllCompanies;
       // await CheckNotOpenComments();

    }
    private void OnSearch(string text)
    {
        _searchString1 = text;
       // SelectedOption = SelectedOption != "null" ? SelectedOption : null;
        _table!.ReloadServerData();
    }

    private bool FilterFunc1(Company element) => FilterFunc(element, _searchString1);

    private bool FilterFunc(Company element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Director != null && element.Director.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ActualAddress != null)
        {
            if (element.ActualAddress.Country.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.ActualAddress.City.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
       
        return false;
    }
  
    private void RowClickEvent(TableRowClickEventArgs<Company> tableRowClickEventArgs)
    {
        _navigationManager.NavigateTo($"/companies/{tableRowClickEventArgs.Item.Id}");
    }

        private  void FilterCompanyByTag(Guid tagId)
        {
            Companies = AllCompanies!.Where(w => w.TagsCompanies != null && w.TagsCompanies
                .Select(s => s.Id).Contains(tagId)).ToList();
        }

    private async Task OpenCompanyComments(Guid id)
    {
        CompanyId = id;
        _visibleComments = !_visibleComments;
        if (_warnComments != null)
        {
            var curr = _warnComments.FirstOrDefault(s => s.CompanyId == id);
            if (curr !=null)
            {
                _warnComments.Remove(curr);
                NotOpenedCommentIsd!.Remove(id);
                WarningCommentIconColor = _warnComments.Any() ? Color.Error : Color.Default;
            }
           
        }
    }
    // private async Task CheckNotOpenComments()
    // {
    //         _warnComments = await CompanyCommentsManager.GetWarningCommentsAsync(new GetWarningCommentsToCompanyRequest()
    //         {
    //             GetOnlyNotOpen = true
    //         });
    //
    //         WarningCommentIconColor = _warnComments.Any() ? Color.Error : Color.Default;
    //         NotOpenedCommentIsd = _warnComments.Select(s => s.CompanyId).ToList();
    //         StateHasChanged();
    //     
    // }
    //private async Task DeleteCompany()
    //{
    //    if (await CompanyManager.RemoveAsync(CurrentCategory.Id))
    //    {
    //        _visibleRemoveCategoryDialog = false;
    //        await RefreshCategoryListCallback.InvokeAsync();
    //        _snackBar.Add("Категория удалена!");
    //    }
    //    else
    //    {
    //        _snackBar.Add("Ошибка при удалении!");
    //    }
    //}
}
<style>
    .mud-table-header {
        background-color: #cbf0ee;
        color: white !important;
        font-weight: bold;
    }
    .select-button {
        margin: 0 !important;


    }
    .mud-table-sticky-header * .mud-table-root .mud-table-header-fix * .mud-table-cell {
        background-color: dodgerblue;
        font-weight: bold;
        color: white;
    }
    .select-button .mud-input-slot.mud-input-root-outlined {
        padding: 0.67rem 0.8rem !important;
        text-transform: uppercase !important;
        font-size: 0.85rem !important;

    }

    .not-equpped-heder {
        border-right: solid 1px rgba(0,0,0,0.1)
    }
    .mud-table-notequpped-header {

    }
</style>

