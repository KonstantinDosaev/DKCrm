@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Shared.Requests
@using DKCrm.Shared.Models.CompanyModels

<MudTooltip Text="Показать важные комментарии">
  
        <MudIconButton OnClick="() => OpenDialog(true)"
                       Icon="@Icons.Material.Filled.CommentBank" Color="@_mainIconColor" />
    
   
</MudTooltip>
@if (_visibleWarningCommentsDialog)
{
    <MudDialog @bind-Visible="_visibleWarningCommentsDialog" Style="max-width: 700px; padding: 0"
               Options="new DialogOptions() { CloseButton = true, FullScreen = true, }" Class="no-padding"
               TitleClass="order_commentWarning" >
        <TitleContent>
            
        </TitleContent>
        <DialogContent>
            
            <div Class="pb-4 d-flex flex-column" Style="">
                <MudToolBar Dense="true" Class="d-flex justify-content-between mr-4">
                    <MudText Typo="Typo.h5">@(_notOpenWarningComment ? "Не прочитанные" : "Прочитанные")</MudText>
                    <MudButton OnClick="SwitchedReadOrUnreadComments"
                               Variant="Variant.Filled"
                               EndIcon="@(_notOpenWarningComment ? Icons.Material.Filled.MarkEmailRead : Icons.Material.Filled.MarkEmailUnread)"
                               Color="@Color.Tertiary">Показать @(_notOpenWarningComment ? "прочитанные" : "не прочитанные")</MudButton>
                </MudToolBar>
                @if (Comments.Any())
                {
                    <div class="d-flex flex-column px-4 flex-grow-1" style="overflow-y: scroll;" id="commentContainer">
                        <MudLink Color="Color.Dark" Underline="Underline.None"
                                 OnClick="LoadMoreComments"
                                 Size="Size.Small" Class="link_loadMoreComment"
                                 Disabled="@(Comments.Count >= _totalItems)">загрузить ещё</MudLink>
                        @foreach (var message in Comments)
                        {
                            var user = ChatUsers.FirstOrDefault(f => f.Id == message.FromUserId);

                            <div class="my-2" style="padding: 5px 15px; background-color: whitesmoke; border-radius: 5px; border: solid 1px rgba(181, 181, 181, 0.361); overflow-wrap: break-word">
                                <div class="d-flex justify-content-between">

                                    <MudText Class="px-1" Typo="Typo.body2"
                                             Style="font-weight: bold; color: gray; background-color: lightsalmon; border-radius: 5px; width: max-content">@user?.UserName</MudText>
                                    <div>
                                        @if (!IsDoubleNested)
                                        {
                                            <MudIconButton Class="mr-6" Icon="@Icons.Material.Filled.Info"
                                                           Size='Size.Small'
                                                           OnClick="@(() => OpenCompanyDialog(@message.CompanyId, message.Id))"/>
                                        }
                                        <MudToggleIconButton Size="Size.Small" Toggled="@message.IsWarningComment"
                                                             ToggledChanged="(s) => SetWarningFlagToComment(s, message)"
                                                             Icon="@Icons.Material.Filled.OutlinedFlag"
                                                             Color="@Color.Surface" Title="Off"
                                                             ToggledIcon="@Icons.Material.Filled.Flag"
                                                             ToggledColor="@Color.Error" ToggledTitle="On"/>
                                    </div>

                                </div>
                                <MudText Typo="Typo.body2" Style="">@message.Value</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small !important; margin-right: 1rem;">
                                    @($"{message.DateTimeCreated.ToString("dd MMM, yyyy HH:mm")} / {message.DateTimeUpdate.ToString("dd MMM, yyyy HH:mm")}")
                                </MudText>

                            </div>
                        }
                    </div>
                }
                else
                {
                    <div style="text-align: center; padding-top: 60px;"> <MudText Typo="Typo.h5">Список пуст...</MudText></div>
                }
            </div>
        </DialogContent>
    </MudDialog>
    @if (_visibleCompany)
    {
        <MudDialog @bind-Visible="@_visibleCompany"
                   Style="padding: 0"
                   Options="new DialogOptions() { CloseButton = true, FullScreen = true, }"
                   Class="no-padding">
            <DialogContent>

                <CompanyDetailsPage CompanyId="ShowingCompanyId"
                                    />
                }</DialogContent>
        </MudDialog>
    }
}


@code {
    [Parameter] public bool IsDoubleNested { get; set; }
    private List<CompanyComment>? Comments { get; set; }
    public bool NotOpenWarningComment; 
    private bool _visibleWarningCommentsDialog;
    private bool _renderNotScroll;
    public List<ApplicationUser>? ChatUsers { get; set; }
    private bool _isShowAllWarningComment;
    //[Parameter] public Color MainIconColor { get; set; }
    [Parameter] public Color _mainIconColor { get; set; }
    private bool _visibleCompany; 
    private bool _notOpenWarningComment; 
    private bool _isWarnNotOpenAny; 
    private Guid ShowingCompanyId { get; set; }
    [Parameter]
    public EventCallback<List<CompanyComment>> CommentsChanged { get; set; }
    private int _pageIndex = 0;
    private int _totalItems;  
    private int _pageSize = 3;
    protected override async Task OnInitializedAsync()
    {
        _notOpenWarningComment = true;
        await GetComments();
        _mainIconColor = Comments.Any() ? Color.Error : Color.Default;
       
    }
    private async Task OpenDialog(bool toggle)
    {
        ChatUsers ??= await GetUsersAsync();
        _visibleWarningCommentsDialog = true;
    }
    
    private async Task GetComments()
    {
        var response = await CompanyCommentsManager.GetWarningCommentsAsync(new GetWarningCommentsToCompanyRequest()
        {
            GetOnlyNotOpen = _notOpenWarningComment,
            PageIndex = _pageIndex, 
            PageSize = _pageSize
        });
        if (response.Items != null)
        {
            _totalItems = response.TotalItems;
            Comments = response.Items.ToList();
        }
        
    }
    private async Task LoadMoreComments()
    {
        if (Comments.Count >= _totalItems)
            return;
        _pageIndex += 1;
        _renderNotScroll = true;
        var response = await CompanyCommentsManager.GetWarningCommentsAsync(new GetWarningCommentsToCompanyRequest()
        {
            GetOnlyNotOpen = _notOpenWarningComment,
            PageIndex = _pageIndex, 
            PageSize = _pageSize
        });
        if (response.Items != null)
        {
            Comments.InsertRange(0 ,response.Items.ToArray());
            _totalItems = response.TotalItems;
        }
    }
    private async Task SwitchedReadOrUnreadComments()
    {
        _notOpenWarningComment = !_notOpenWarningComment;
        await GetComments();
    }
    private async Task SetWarningFlagToComment(bool toggle, CompanyComment comment)
    {
        _renderNotScroll = true;
        if (!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите смену флага"))
            return;

        comment.IsWarningComment = toggle;

        await CompanyCommentsManager.SaveCommentAsync(comment);
    }
    private async Task<List<ApplicationUser>> GetUsersAsync()
    {
        return await UserManagerCustom.GetUsersAsync();
    }
    private void OpenCompanyDialog(Guid companyId, Guid messageId)
    {
        ShowingCompanyId = companyId;
        _visibleCompany = true;
    }
}
<style>
    .link_loadMoreComment{
        margin: 5px auto;
        border: solid 1px lightskyblue;
        border-radius: 5px;
        padding: 3px;

    }
    .link_loadMoreComment:hover{

        margin: 4px auto;
        border-width: 2px;
    }
    .order_commentWarning {
        padding-bottom: 0 !important;
    }
</style>
