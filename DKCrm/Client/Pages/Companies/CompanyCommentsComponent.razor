@using Microsoft.AspNetCore.SignalR.Client
@using DKCrm.Shared.Models.OrderModels
@using DKCrm.Shared.Models.CompanyModels
@page "/company/comments/{CurrentCompanyId:guid}"
<div Class="pb-4 d-flex flex-column" Style="height: 95vh">
    <MudToolBar Dense="true" Class="">
        @*       <div class="d-flex align-items-center">
        @if (CurrentChatGroup != null)
        {
        <MudText>@(CurrentChatGroup.IsPrivateGroup ? CurrentChatGroup.ApplicationUsers?.FirstOrDefault(f => f.Id != CurrentUser!.Id)?.UserName : CurrentChatGroup.Name)</MudText>
        }
        </div>*@
        <div class="d-flex align-items-center">
            <MudSwitch T="bool" ValueChanged="SetMultiSelect"
                       Size="Size.Medium" ThumbIcon="@Icons.Material.Filled.Check" Label=""
                       Color="Color.Info" UncheckedColor="Color.Default" Class="mr-2" />
            @if (SelectedValues.Any())
            {
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnButtonDeleteClicked(SelectedValues)" Style="margin-right: 1rem;">Удалить</MudButton>
            }

            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem>
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="() => OnButtonDeleteClicked(_comments.Select(s => s.Id))"
                               Style="justify-self: flex-start">Очистить переписку</MudButton>
                </MudMenuItem>
            </MudMenu>
       </div>
        <MudTooltip Text="Показать только важные">
            <MudToggleIconButton ToggledChanged="FilterWarningComments" Toggled="_isShowOnlyWarningComment"
                                 Icon="@Icons.Material.Filled.OutlinedFlag" Color="@Color.Surface" Title="Off"
                                 ToggledIcon="@Icons.Material.Filled.Flag" ToggledColor="@Color.Error" ToggledTitle="On"/>
        </MudTooltip>
    </MudToolBar>
    <div class="d-flex flex-column px-4 flex-grow-1" style="  overflow-y: scroll;" id="commentContainer">
        @foreach (var message in _comments)
        {
            var user = ChatUsers.FirstOrDefault(f => f.Id == message.FromUserId);

            <div class="my-2" style="padding: 5px 15px; background-color: whitesmoke; border-radius: 5px; border: solid 1px rgba(181, 181, 181, 0.361); overflow-wrap: break-word">
                <div class="d-flex justify-content-between">
                    <MudText Class="px-1" Typo="Typo.body2"
                             Style="font-weight: bold; color: gray; background-color: lightsalmon; border-radius: 5px; width: max-content">
                        @user?.UserName
                    </MudText>
                    <MudToggleIconButton Size="Size.Small" Toggled="@message.IsWarningComment" 
                                         ToggledChanged="(s) => SetWarningFlagToComment(s,message)"
                                         Icon="@Icons.Material.Filled.OutlinedFlag" Color="@Color.Surface" Title="Off"
                                         ToggledIcon="@Icons.Material.Filled.Flag" ToggledColor="@Color.Error" ToggledTitle="On"/>
                </div>
                <MudText Typo="Typo.body2" Style="">@message.Value</MudText>
                <MudText Typo="Typo.caption" Style="font-size: xx-small !important; margin-right: 1rem;">@message.DateTimeCreated.ToString("dd MMM, yyyy HH:mm")</MudText>
                @if (_multiSelect && message.FromUserId == CurrentUser?.Id)
                {
                    <input disabled="@message.IsWarningComment" type="checkbox" @onchange="eventArgs => { CheckboxClicked(message.Id, eventArgs.Value!); }" />
                }
            </div>

        }
    </div>

    <div class="d-flex align-items-center justify-content-between">
        <MudTextField T="string" Placeholder="Введите сообщение..." Variant="Variant.Outlined" Lines="3" MaxLines="3" AutoGrow="true" Class="field-item mx-4"
                      @bind-Value="CurrentMessage" For="@(() => CurrentMessage)" />
        <MudToggleIconButton @bind-Toggled="@_isWarningComment"
                             Icon="@Icons.Material.Filled.OutlinedFlag" Color="@Color.Surface" Title="Off"
                             ToggledIcon="@Icons.Material.Filled.Flag" ToggledColor="@Color.Error" ToggledTitle="On"/>
        <MudIconButton Variant="Variant.Filled" OnClick="SubmitAsync" Icon="@Icons.Material.Outlined.Send"
                       Color="Color.Dark"
                       ButtonType="ButtonType.Button"
                       Class="h-50 mr-3"></MudIconButton>
    </div>
</div>

@code {
    [Parameter] public Guid CurrentCompanyId { get; set; }
    [CascadingParameter] public HubConnection? HubConnection { get; set; }

    [Parameter] public string CurrentMessage { get; set; } = null!;
    public ApplicationUser? CurrentUser { get; set; }


    private List<CompanyComment> _comments = new();
    private List<CompanyComment> _tempComments = new();
    public List<ApplicationUser> ChatUsers = new();


    public List<Guid> SelectedValues = new();

    private bool _multiSelect;
    private bool _isWarningComment; 
    private bool _isShowOnlyWarningComment;
    private bool _renderNotScroll;

    protected override async Task OnInitializedAsync()
    {
        var state = await _stateProvider.GetAuthenticationStateAsync();
        var user = state.User.Claims.Where(a => a.Type.Contains("nameidentifier")).Select(a => a.Value).FirstOrDefault()!;
        CurrentUser = await UserManagerCustom.GetUserDetailsAsync(user);

        HubConnection ??= new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/companyCommentHub")).Build();
        if (HubConnection.State == HubConnectionState.Disconnected)
            await HubConnection.StartAsync();

        HubConnection.On<CompanyComment, string>("ReceiveCompanyComment", async (comment, userName) =>
        {

            if (CurrentCompanyId == comment.CompanyId)
            {
                _comments.Add(comment);
                StateHasChanged();
                await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "commentContainer");

            }
            //else if (CurrentUserChatGroupsIds != null && CurrentUserChatGroupsIds.Contains(message.ToChatGroupId))
            //{
            //    await GetChatGroupsAsync();
            //    await HubConnection.SendAsync("ChatNotificationAsync", $"Новое сообщение от {userName}", message.ToChatGroupId, message.FromUserId);
            //    StateHasChanged();
            // }
        });
        HubConnection.On<Guid>("ReceiveCommandToReloadCompanyCommentList", async (companyId) =>
        {
            if (CurrentCompanyId == companyId)
            {
                await LoadComments(companyId);
                await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "commentContainer");
                _snackBar.Add("Изменения в комментариях");
                StateHasChanged();
            }
        });
        await GetUsersAsync();

        await LoadComments(CurrentCompanyId);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (CurrentCompanyId != Guid.Empty && !SelectedValues.Any() && !SelectedValues.Any())
        {
            await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "commentContainer");
            _renderNotScroll = false;
        }
           
    }

    private async Task SubmitAsync()
    {
        if (!string.IsNullOrEmpty(CurrentMessage))
        {
            var chatHistory = new CompanyComment()
                {
                    Value = CurrentMessage,
                    CompanyId = CurrentCompanyId,
                    FromUserId = CurrentUser!.Id,
                    DateTimeCreated = DateTime.Now,
                    IsWarningComment = _isWarningComment
                };
            await CompanyCommentsManager.SaveCommentAsync(chatHistory);
            if (HubConnection != null)
                await HubConnection.SendAsync("SendCompanyCommentAsync", chatHistory, CurrentUser.UserName);
            CurrentMessage = string.Empty;
            _isWarningComment = false;
        }
    }

    private async Task LoadComments(Guid id)
    {
        CurrentCompanyId = id;
        _comments = await CompanyCommentsManager.GetAllForCompanyAsync(CurrentCompanyId);
        if (CurrentUser != null)
            await CompanyCommentsManager.SetLogUsersVisitAsync(new LogUsersVisitToCompanyComments()
            {
                CompanyOwnerCommentsId = CurrentCompanyId,
                DateTimeVisit = DateTime.Now,
                UserId = CurrentUser.Id
            });
    }

    private void FilterWarningComments(bool toggle)
    {
        _isShowOnlyWarningComment = toggle;
        if (toggle == true)
        {
            _tempComments = _comments;
            _comments = _comments.Where(w=> w.IsWarningComment == true).ToList();
        }
        else
            _comments = _tempComments;
    }
    private async Task SetWarningFlagToComment(bool toggle, CompanyComment comment)
    {
        _renderNotScroll = true;
        if (!await ConfirmationActionService.ConfirmationActionAsync("Подтвердите смену флага"))
            return;
       
        comment.IsWarningComment = toggle;
        await CompanyCommentsManager.SaveCommentAsync(comment);
    }
    private async Task GetUsersAsync()
    {
        ChatUsers = await UserManagerCustom.GetUsersAsync();
    }

    [Inject] private IDialogService DialogService { get; set; } = null!;
    private async void OnButtonDeleteClicked(IEnumerable<Guid> listId)
    {
        var result = await DialogService.ShowMessageBox(
            "Внимание",
            "Подтвердите удаление!",
            yesText: "Удалить!  ", cancelText: "  Отменить");

        if (result != null && (bool)result)
        {
            await RemoveMessage(listId);
        }
        StateHasChanged();
    }
    private async Task RemoveMessage(IEnumerable<Guid> listId)
    {
        await CompanyCommentsManager.RemoveRangeAsync(listId);
        SetMultiSelect();
        await LoadComments(CurrentCompanyId);
        if (HubConnection != null)
            await HubConnection.SendAsync("ReloadCommentList", CurrentCompanyId);
    }
    private void SetMultiSelect()
    {
        _multiSelect = !_multiSelect;
        if (!_multiSelect)
        {
            SelectedValues.Clear();
        }
    }
    private void CheckboxClicked(Guid aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
    }
}
