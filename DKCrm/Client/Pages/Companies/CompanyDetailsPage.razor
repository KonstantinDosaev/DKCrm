@page "/companies/{CompanyId:guid}"
@using DKCrm.Shared.Models.CompanyModels
@using DKCrm.Client.Pages.OfferManagement.Components
@using DKCrm.Shared.Constants
@using DKCrm.Client.Pages.OrderManagement.DocumentComponents


@if (Company != null)
{
    <div class="d-flex justify-content-between m-4">
        <MudText  Typo="Typo.h4">@Company.Name.ToUpper()</MudText>
        <div class="d-flex" style="flex-grow:0; align-items:start;">
            <ImportOffersForCompanyComponent CompanyId = "@CompanyId"/>
            <MudTooltip Arrow="true" Text="Коментарии">
                <MudIconButton Icon="@Icons.Material.Sharp.Comment" Variant="Variant.Filled"
                               OnClick="() => _visibleCommentDialog = !_visibleCommentDialog"
                               Size="Size.Medium"
                               Color="Color.Default" Class="mr-2"/>
            </MudTooltip>

            <MudButton Style="flex-grow:0;" Variant="Variant.Filled"
                       Size="Size.Medium"
                       Color="Color.Primary" Class="mr-2"
                       OnClick="(() => VisibleStampDialogToggle(true))">Печати</MudButton>

            <MudTooltip Arrow="true" Text="Изображения">
                <MudIconButton Icon="@Icons.Material.Sharp.Image" Variant="Variant.Filled"
                               OnClick="(() => VisibleImageDialogToggle(true))"
                               Size="Size.Medium"
                               Color="Color.Primary" Class="mr-2"/>
            </MudTooltip>

            <MudTooltip Arrow="true" Text="Документы" Placement="Placement.Left">
                <MudIconButton Icon="@Icons.Material.Sharp.DocumentScanner" Variant="Variant.Filled"
                               OnClick="() => OpenDocumentManager()"
                               Size="Size.Medium"
                               Color="Color.Primary" Class="mr-2"/>
            </MudTooltip>

            <AccessRestrictionEditComponent ComponentId="@CompanyId"/>
            <MudTooltip Arrow="true" Text="Изменить">
                <MudIconButton Icon="@Icons.Material.Sharp.Edit" Variant="Variant.Filled"
                               OnClick="OpenUpdateCompanyDialog"
                               Size="Size.Medium"
                               Color="Color.Tertiary" Class="ml-2"/>
            </MudTooltip>
        </div>
    </div>
    <div class="d-flex ">
    <div class="flex-grow-1 mr-4">
        <MudPaper Elevation="12"Class="p-4 m-1">
            <MudText Typo="Typo.body1"><span class="mr-2 fw-bold">Тип контрагента:</span>
                    @if (Company.CompanyType != null)
                    {
                        @Company.CompanyType.Name
                    }
                </MudText>
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">Фактический руководитель:</span>
                    @if (!string.IsNullOrEmpty(Company.Director))
                    {
                        @Company.Director
                    }
                </MudText>
                <MudText Typo="Typo.body1">
                    <span class="mr-2 fw-bold">Фактический адрес:</span>
                    @if (Company.ActualAddress != null)
                    {
                        <span></span><span>@Company.ActualAddress.Country,</span>
                        @if (Company.ActualAddress.Region != null)
                        {
                            <span> обл. @Company.ActualAddress.Region,</span>
                        }
                        <span> г. @Company.ActualAddress.City,</span>
                        <span> ул. @Company.ActualAddress.Street,</span>
                        <span> д./стр. @Company.ActualAddress.Home,</span>
                        <span> пом./кв. @Company.ActualAddress.Placement</span>
                        @if (Company.ActualAddress.PostalCode != null)
                        {
                            <div>Почтовый индекс: @Company.ActualAddress.PostalCode</div>
                        }
                    }
                </MudText>
            </MudPaper>
            @if (Company.FnsRequest != null)
            {
                <MudPaper Elevation="12"Class="p-4 m-1">
                    <p class="fs-3 mb-2 ">Данные ЕГРЮЛ</p>
                    <MudText Typo="Typo.body1"><span class="mr-2 fw-bold">Название полное:</span>
                        @Company.FnsRequest.Name
                    </MudText>
                    <MudText Typo="Typo.body1"><span class="mr-2 fw-bold">Руководитель:</span>
                        @Company.FnsRequest.Director
                    </MudText>
                    <MudText Typo="Typo.body1">
                        <span class="mr-2 fw-bold">ИНН:</span>
                        @Company.FnsRequest.INN
                    </MudText>
                    <MudText Typo="Typo.body1"><span class="mr-2 fw-bold">ОГРН:</span>
                        @Company.FnsRequest.ORGN
                    </MudText>
                    <MudText Typo="Typo.body1"><span class="mr-2 fw-bold">ОКВЭД:</span>
                        @Company.FnsRequest.OKVED
                    </MudText>
                    <MudText Typo="Typo.body1"><span class="mr-2 fw-bold">Капитал:</span>
                        @Company.FnsRequest.Revenue
                    </MudText>
                    <MudText Typo="Typo.body1"><span class="mr-2 fw-bold">Юридический адрес:</span>
                        @Company.FnsRequest.LegalAddress
                    </MudText>
                </MudPaper>
            }
            <MudPaper Elevation="12"Class="p-4 m-1">
                <div class="d-flex align-items-center m-1">
                    <p class="fs-4 m-0">Сотрудники</p> 
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem Icon="@Icons.Material.Sharp.Add" 
                                     OnClick="OpenAddEmployeeDialog">Добавить сотрудника</MudMenuItem>
                    </MudMenu>
                </div>
                @if (Company.Employees != null)
                {
                    @foreach (var employee in Company.Employees)
                    {
                        <MudCard Outlined="true" Class="my-3 p-3" Style="">
                            <div class="d-flex flex-wrap">
                            <div Class="" style="width: 375px;">
                                <div class="px-2 d-flex align-items-center" style="">
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                        <MudMenuItem Icon="@Icons.Material.Sharp.Edit"
                                                     OnClick="() => OpenUpdateEmployeeDialog(employee)">Редактировать</MudMenuItem>
                                        <MudMenuItem Icon="@Icons.Material.Sharp.RemoveDone"
                                                     OnClick="() => OpenRemoveEmployeeDialog(employee)">Удалить</MudMenuItem>
                                    </MudMenu>
                                    <MudText Typo="Typo.h6">@employee.Position</MudText>
                                </div>
                                <div class="px-2" style="">
                                    <div class="d-flex mr-15">
                                        <MudText Class="mr-2" Typo="Typo.h6">@employee.LastName</MudText>
                                        <MudText Class="mr-2" Typo="Typo.h6">@employee.FirstName</MudText>
                                        <MudText Typo="Typo.h6">@employee.MiddleName</MudText>
                                    </div>
                                    @if (employee.IsOurEmployee == true && UsersToEmployee != null)
                                    {
                                        var userToEmployee = UsersToEmployee!.FirstOrDefault(f => f.Id == employee.UserId);
                                        if (userToEmployee != null)
                                        {

                                            <MudText Class="mr-2" Typo="Typo.button">@($"{userToEmployee.UserName}/ {userToEmployee.LastName}")</MudText>
                                        }
                                        else
                                        {
                                            <MudText Class="mr-2" Typo="Typo.button" Color="Color.Error">Не прикреплена учетная запись</MudText>
                                        }
                                    }
                                </div>
                                <div class="d-flex flex-column px-2" style="">
                                    <MudText Typo="Typo.button">
                                        <span class="text-decoration-underline">Телефон: </span> @employee.Phone
                                    </MudText>
                                    <MudText Typo="Typo.button">
                                        <span class="text-decoration-underline">E-mail: </span> @employee.Email
                                    </MudText>
                                </div>
                            </div>
                            <div class="" style="flex: 1 1 auto; min-width: 375px;">
                                @if (_checkSizeEmployeeInfo && CurrentEmployeeId == employee.Id)
                                {
                                    _sizeEmployeeInfo = 30;
                                }
                                else
                                {
                                    _sizeEmployeeInfo = 5;
                                }
                                <div class="">
                                    <MudTextField T="string" Label="Дополнительная информация"
                                                  Variant="Variant.Outlined" @bind-Value="employee.Description"
                                                  Lines="@(_sizeEmployeeInfo)"/>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <MudIconButton OnClick="() => ResizeEmployeeInfo(employee.Id)"
                                        Icon="@(_sizeEmployeeInfo == 5 ? Icons.Material.Filled.KeyboardArrowDown : Icons.Material.Filled.KeyboardArrowUp)"></MudIconButton>

                                    <MudButton Variant="Variant.Outlined" Size="Size.Small"
                                               OnClick="() => SaveEmployeeInfo(employee)"
                                               Color="Color.Primary">Сохранить</MudButton>
                                </div>

                            </div>
                            </div>
                        </MudCard>
                    }
                }
            </MudPaper>

         @*    @if (CurrBankDetails != null)
            {
                
                    <MudCard Outlined="true" Class="m-1 pa-3 bg-gradient">
                        <MudIconButton Icon="@Icons.Material.Sharp.DeleteOutline" Color="Color.Warning" OnClick="() =>RemoveBankDetail(CurrBankDetails) "></MudIconButton>
                        <MudTextField @bind-Value="@CurrBankDetails.Name"
                                      For="@(() => @CurrBankDetails.Name)"
                                      Immediate="true"
                                      Label="Наименование банка" Required="true" />

                        <MudTextField @bind-Value="@CurrBankDetails.Inn"
                                  For="@(() => @CurrBankDetails.Inn)"
                                      Immediate="true"
                                      Label="ИНН" Required="true" />
                        <MudTextField @bind-Value="@CurrBankDetails.Kpp"
                                      For="@(() => @CurrBankDetails.Kpp)"
                                      Immediate="true"
                                      Label="КПП" Required="true" />
                        <MudTextField @bind-Value="@CurrBankDetails.KorBeneficiaryAccount"
                                      For="@(() => @CurrBankDetails.KorBeneficiaryAccount)"
                                      Immediate="true"
                                      Label="Кор. Счет" Required="true" />
                        <MudTextField @bind-Value="@CurrBankDetails.BankAccount"
                                      For="@(() => @CurrBankDetails.BankAccount)"
                                      Immediate="true"
                                      Label="БИК(Bank Account)" Required="true" />
                        <MudTextField @bind-Value="@CurrBankDetails.BeneficiaryAccount"
                                      For="@(() => @CurrBankDetails.BeneficiaryAccount)"
                                      Immediate="true"
                                      Label="Расчетный счет(Beneficiary Account)" Required="true" />
                        <MudTextField @bind-Value="@CurrBankDetails.Description"
                                  For="@(() => @CurrBankDetails.Description)"
                                      Immediate="true"
                                      Label="Доп.инфо." />
                    </MudCard>
                
                <MudButton Class="m-1" Variant="Variant.Filled" Size="Size.Medium"
                           OnClick="@(()=>AddBankDetail(CurrBankDetails))"
                           Style="margin-top: 2rem;" Color="Color.Primary">
                    Cохранить
                    <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2" />
                </MudButton>
            }
            else
            {
                <MudButton Class="m-1" Variant="Variant.Filled" Size="Size.Medium"
                           OnClick="@(()=> CurrBankDetails = new BankDetails(){CompanyId = Company.Id})"
                           Style="margin-top: 2rem;" Color="Color.Primary">
                    Добавить реквизиты
                    <MudIcon Size="@Size.Medium" Color="Color.Default" Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2" />
                </MudButton>
                <br />
            } *@
            <MudPaper Elevation="12" Class="p-4 m-1">
                    <p class="fs-3 mb-2 ">Банковские реквизиты</p>
                @if (Company.BankDetails != null && Company.BankDetails.Any())
                {
                    @foreach (var bankDetailsItem in Company.BankDetails)
                    {
                        <MudCard Outlined="true" Class="m-3 pa-3">
                            <MudText Typo="Typo.body1">
                                <span class="mr-2 fw-bold">Название банка:</span>
                                @bankDetailsItem.Name
                            </MudText>
                            <MudText Typo="Typo.body1">
                                <span class="mr-2 fw-bold">ИНН:</span>
                                @if (bankDetailsItem.Inn != null)
                                {
                                    @bankDetailsItem.Inn
                                }
                            </MudText>
                            <MudText Typo="Typo.body1">
                                <span class="mr-2 fw-bold">БИК(Bank Account):</span>
                                @bankDetailsItem.BankAccount
                            </MudText>
                            <MudText Typo="Typo.body1">
                                <span class="mr-2 fw-bold">Расчетный счет(Beneficiary Account):</span>
                                @bankDetailsItem.BeneficiaryAccount
                            </MudText>
                        </MudCard>
                    }
                }
                </MudPaper>
        <AuthorizeView Roles="@RoleNames.SuAdmin">
            <Authorized>
                <MudButton Variant="Variant.Filled" Size="Size.Small" 
                           OnClick="()=>_visibleRemoveCompanyDialog=true" 
                           Style="margin-top: 2rem;" Color="Color.Warning">Удалить компанию
                    <MudIcon Size="@Size.Medium" Color="Color.Default"
                             Icon="@Icons.Material.Sharp.DeleteForever" Class="pa-0 ml-2" />
                </MudButton>
            </Authorized>
        </AuthorizeView>
           
        </div>
        <div style="min-width: 250px">
            <MudCard Outlined="true" Class=" pa-3">
                <MudText Typo="Typo.h4">Теги</MudText>
                @if (Company.TagsCompanies != null)
                {
                    <MudList T="string" Style="" Color="Color.Primary">
                        @foreach (var tag in Company.TagsCompanies)
                        {
                            <MudListItem Dense="true" Href=@($"/companies/tag/{tag.Id}") Value="@tag.Name">
                                @tag.Name
                            </MudListItem>
                        }
                        <MudButton Variant="Variant.Filled" Size="Size.Small"
                                   OnClick="OpenAddToTagsDialog" Style="margin-top: 2rem;"
                                   Color="Color.Tertiary">Изменить теги
                            <MudIcon Size="@Size.Medium" Color="Color.Default"
                                     Icon="@Icons.Material.Sharp.Add" Class="pa-0 ml-2" />
                        </MudButton>
                    </MudList>
                }
            </MudCard>
        </div>
    </div>
    <EditCompanyDialog 
        Id="Company.Id"
        RefreshProductList="GetCompany"
        @bind-VisibleDialog="_visibleEditCompanyDialog" />
}
<MudDialog @bind-Visible="_visibleRemoveEmployeeDialog">
    <DialogContent>
        <MudText Class="pb-3">
            <MudIcon Size="Size.Large" Color="Color.Warning"
                     Icon="@Icons.Material.Filled.WarningAmber"/>Подтвердите удаление</MudText>
        <div class="pt-5 justify-content-between d-flex">
            <MudButton Variant="Variant.Filled" Size="Size.Small"
                       OnClick="RemoveEmployee" Color="Color.Error">Удалить</MudButton>
            <MudButton Variant="Variant.Filled" Size="Size.Small"
                       OnClick="() => _visibleRemoveEmployeeDialog=false" Color="Color.Primary">Закрыть</MudButton>
        </div>
    </DialogContent>
</MudDialog>
<MudDialog @bind-Visible="_visibleRemoveCompanyDialog">
    <DialogContent>
        <MudText Class="pb-3">
            <MudIcon Size="Size.Large" Color="Color.Warning"
                     Icon="@Icons.Material.Filled.WarningAmber"/>Подтвердите удаление компании</MudText>
        <div class="pt-5 justify-content-between d-flex">
            <MudButton Variant="Variant.Filled" Size="Size.Small"
                       OnClick="RemoveCompany" Color="Color.Error">Удалить</MudButton>
            <MudButton Variant="Variant.Filled" Size="Size.Small" 
                       OnClick="() => _visibleRemoveCompanyDialog=false" Color="Color.Primary">Закрыть</MudButton>
        </div>
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="_visibleAddEmployeeDialog" Style="min-width: 900px"
           Options="new DialogOptions(){CloseButton = true}">
    <DialogContent>
        <EmployeeForm 
            ButtonText="Сохранить" 
            OnValidSubmit="AddEmployee" 
            Employee="Employee"
            TitleText="Добавление сотрудника" 
            OurEmployees="OurEmployees"
                      @ref="_empForm" CurrentCompany="Company" />
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="_visibleUpdateEmployeeDialog" Style="min-width: 900px" 
           Options="new DialogOptions(){CloseButton = true}">
    <DialogContent>
        <EmployeeForm ButtonText="Сохранить"
                      OnValidSubmit="UpdateEmployee"
                      Employee="Employee"
                      TitleText="Редактирование данных сотрудника"
                      OurEmployees="OurEmployees" CurrentCompany="Company"/>
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="_visibleAddToTagDialog">
    <DialogContent>
        <MudText Class="pb-3">
            <MudIcon Size="Size.Large" Color="Color.Warning"
                     Icon="@Icons.Material.Filled.WarningAmber"/>Добавить/удалить тег
        </MudText>
        @foreach (var tag in TagsCompanies!)
        {
            @if (Company?.TagsCompanies != null && Company.TagsCompanies.Select(s => s.Id).Contains(tag.Id))
                Checked = true;
            else
                Checked = false;

              <MudCheckBox Value="Checked " @onclick="() => AddRemoveToTag(tag)" Color="@Color.Primary">
                   @tag.Name
               </MudCheckBox>
        }
        <div class="pt-5 justify-content-between d-flex">
            <MudButton Variant="Variant.Filled" Size="Size.Small" 
                       OnClick="() => UpdateTags()" Color="Color.Primary">Применить</MudButton>
        </div>
    </DialogContent>
</MudDialog>
@if (_visibleStampsDialog)
{
    <DKImageManagerDialog DirectoryType="@DirectoryType.PrivateFolder"
                          FileType="FileTypes.Stamps"
                          RelativePath="@(Path.Combine(PathsToDirectories.FileContainer,PathsToDirectories.Stamps))"
                          LoadMoreCount="5"
                          TitleText="Печати"
                          @bind-VisibleDialog="_visibleStampsDialog"
                          ImageType="@ImageTypes.Stamp"
                          IsPreviewImage="true"
                          OwnerId="@CompanyId" />
}
@if (_visibleImageDialog)
{
    <DKImageManagerDialog DirectoryType="@DirectoryType.PrivateFolder"
                          FileType="FileTypes.Stamps"
                          RelativePath="@(Path.Combine(PathsToDirectories.FileContainer,PathsToDirectories.Images))"
                          LoadMoreCount="5"
                          TitleText="Изображения"
                          @bind-VisibleDialog="_visibleImageDialog"
                          ImageType="@ImageTypes.Image"
                          IsPreviewImage="true"
                          OwnerId="@CompanyId" />
}
@if (_visibleCommentDialog)
{
    <MudDialog @bind-Visible="_visibleCommentDialog" Style="max-width: 700px;padding: 0"
               Options="new DialogOptions(){CloseButton = true, FullScreen = true,}" Class="no-padding">
        <DialogContent>
            <CompanyCommentsComponent CurrentCompanyId="@CompanyId" />
        </DialogContent>
    </MudDialog>
}
<MudDialog @bind-Visible="_visibleDocumentManagerDialog"
           Options="new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Medium,BackdropClick = true}"
           Style="height: 100VH">
    <TitleContent>
        <div style="text-align: right">
            <MudButton Variant="Variant.Outlined" 
                       Size="Size.Small"
                       OnClick="(() =>_visibleDocumentManagerDialog = false)"
                       Color="Color.Info">Закрыть</MudButton>
        </div>
    </TitleContent>
    <DialogContent>
        <DocumentManagerComponent OrderId="CompanyId" OwnerType ="DocumentOwner.Company"/>
    </DialogContent>
  
</MudDialog>
@code {

    [Parameter]
    public Guid CompanyId { get; set; }
    public List<TagsCompany>? TagsCompanies { get; set; }
    public List<TagsCompany>? TagsCompaniesToUpdate { get; set; }
   // private List<CompanyType>? CompanyTypes { get; set; }
    private List<ApplicationUser>? UsersToEmployee { get; set; }
    public Company? Company { get; set; }
    public Employee Employee { get; set; } = new();
    public List<Employee>? OurEmployees { get; set; }
    private Guid CurrentEmployeeId { get; set; }
    private bool _checkSizeEmployeeInfo { get; set; } = false;
    private int _sizeEmployeeInfo = 5;
    private bool _visibleAddEmployeeDialog;
    private bool _visibleUpdateEmployeeDialog;
    private bool _visibleRemoveEmployeeDialog;
    private bool _visibleAddToTagDialog;
    private bool _visibleRemoveCompanyDialog;
    private bool _visibleEditCompanyDialog;
    public bool Checked;
    private bool _visibleStampsDialog;   
    private bool _visibleImageDialog;
    private bool _visibleCommentDialog;
    EmployeeForm? _empForm;
    BankDetails? CurrBankDetails { get; set; }
    private bool _visibleDocumentManagerDialog;

    protected override async Task OnInitializedAsync()
    {
        await GetCompany();

    }
    void VisibleStampDialogToggle(bool toggle)
    {
        _visibleStampsDialog = toggle;
    }
    void VisibleImageDialogToggle(bool toggle)
    {
        _visibleImageDialog = toggle;
    }
    private async Task GetCompany()
    {
        Company = await CompanyManager.GetDetailsAsync(CompanyId);
        var tags = Company.TagsCompanies;
        if (Company.CompanyType?.Name == TypeCompanyNames.OurCompanies)
        {
            var userIds = Company.Employees?.Where(w=> !string.IsNullOrEmpty(w.UserId)).Select(f => f.UserId).ToArray();
            UsersToEmployee ??= new List<ApplicationUser>();
            if (userIds != null)
                foreach (var id in userIds)
                {
                    var user = await UserManagerCustom.GetUserDetailsAsync(id!);
                    UsersToEmployee.Add(user);
                }
        }
    }
    private void OpenUpdateCompanyDialog()
    {
        _visibleEditCompanyDialog = true;
    }
    private void OpenDocumentManager()
    {
        _visibleDocumentManagerDialog = true;
    }
    private async Task OpenAddEmployeeDialog()
    {
        Employee = new Employee() { Companies = new List<Company>(){Company!}};
        if (Company!.CompanyType?.Name == TypeCompanyNames.OurCompanies)
        {
            OurEmployees ??= await EmployeeManager.GetAsync();
            OurEmployees = OurEmployees.Where(w => w.IsOurEmployee).ToList();
        }
        _visibleAddEmployeeDialog = true;
    }
    private async Task AddEmployee()
    {
        Employee = _empForm!.Employee!;
        Company!.Employees ??= new List<Employee>();
        Company.Employees.Add(Employee);
        if (await CompanyManager.UpdateAsync(Company!))
        {
            _visibleAddEmployeeDialog = false;
            _snackBar.Add("Сотрудник добавлен!");
            await GetCompany();
        }
    }
    private async Task OpenUpdateEmployeeDialog(Employee employee)
    {
        if (Company!.CompanyType?.Name == TypeCompanyNames.OurCompanies)
        {
            OurEmployees ??= await EmployeeManager.GetAsync();
            OurEmployees = OurEmployees.Where(w => w.IsOurEmployee).ToList();
        }
        Employee = await EmployeeManager.GetDetailsAsync(employee.Id);
        _visibleUpdateEmployeeDialog = true;

    }
    private async Task UpdateEmployee(Employee employee)
    {
        Employee = employee;
        if (await EmployeeManager.UpdateAsync(Employee!))
            _snackBar.Add("Данные сотрудника обновлены!");
        else
            _snackBar.Add("Ошибка при обновлении данных!");

        _visibleUpdateEmployeeDialog = false; 
        await GetCompany();
    }
    private void OpenRemoveEmployeeDialog(Employee employee)
    {
        Employee = employee;
        _visibleRemoveEmployeeDialog = true;
    }
    private async Task RemoveEmployee()
    {
        if (Employee.IsOurEmployee)
        {
            Company!.Employees!.Remove(Employee!);
            if (await CompanyManager.UpdateAsync(Company))
            {
                await GetCompany();
                _snackBar.Add("Сотрудник откреплен");
            }
        }
        else
        {
            if (await EmployeeManager.RemoveAsync(Employee.Id))
            {
                await GetCompany();
                _snackBar.Add("Сотрудник удален");
            }
        }
        _visibleRemoveEmployeeDialog = false;
    }
    private async Task SaveEmployeeInfo(Employee employee)
    {
        Employee = employee;
        await UpdateEmployee(employee);
        _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
    }

    private async Task OpenAddToTagsDialog()
    {
        TagsCompanies ??= await CompanyTagsManager.GetAsync();
       
        TagsCompanies ??=new List<TagsCompany>();
        _visibleAddToTagDialog = true;
    }
    private void AddRemoveToTag(TagsCompany tag)
    {

        if (Company?.TagsCompanies != null && Company.TagsCompanies.Select(s => s.Id).Contains(tag.Id))
        {
            Company.TagsCompanies.Remove(Company?.TagsCompanies.FirstOrDefault(w => w.Id == tag.Id)!);
        }
        else
        {
            Company!.TagsCompanies ??= new List<TagsCompany>();
            Company.TagsCompanies.Add(tag);
        }
    }
    private async Task UpdateTags()
    {
        var tagIdList = Company?.TagsCompanies!.Select(s => s.Id).ToList();
        if (tagIdList != null)
        {
            var request = new TagsRequest() { CompanyId = CompanyId, TagCollection = tagIdList };
            await CompanyManager.UpdateTagsAsync(request);
            _visibleAddToTagDialog = false;
            _snackBar.Add("Теги обновлены");
        }
       
    }
    private async Task RemoveCompany()
    {
        if (await CompanyManager.RemoveAsync(CompanyId))
        {
            _navigationManager.NavigateTo("/companies");
        }
    }
    private async void AddBankDetail(BankDetails bankDetails)
    {
        if (await CompanyManager.AddBankAsync(bankDetails))
        {
            _snackBar.Add("Реквизиты Добавлены");
        }
        
    }
    private async void RemoveBankDetail(BankDetails bankDetails)
    {
        Company!.BankDetails!.Remove(bankDetails);
        if (await CompanyManager.RemoveBankDetailsAsync(bankDetails.Id))
        {
            _snackBar.Add("Реквизиты удалены");
        }
        
    }
    private async Task<string> GetApplicationUser(string userId)
    {
        var user = await UserManagerCustom.GetUserDetailsAsync(userId);
        return user.UserName!;

    }

    private void ResizeEmployeeInfo(Guid employeeId)
    {
        CurrentEmployeeId = employeeId;
        _checkSizeEmployeeInfo = !_checkSizeEmployeeInfo;
    }

}
