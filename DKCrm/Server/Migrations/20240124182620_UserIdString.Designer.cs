// <auto-generated />
using System;
using DKCrm.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DKCrm.Server.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240124182620_UserIdString")]
    partial class UserIdString
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyTagsCompany", b =>
                {
                    b.Property<Guid>("CompaniesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsCompaniesId")
                        .HasColumnType("uuid");

                    b.HasKey("CompaniesId", "TagsCompaniesId");

                    b.HasIndex("TagsCompaniesId");

                    b.ToTable("CompanyTagsCompany");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Home")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Placement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.BankDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryAccount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActualAddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Director")
                        .HasColumnType("text");

                    b.Property<Guid?>("FnsRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActualAddressId");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.CompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.FnsRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OKVED")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ORGN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Revenue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("FnsRequests");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.TagsCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TagsCompanies");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.InternalCompanyData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CurrencyPercent")
                        .HasColumnType("double precision");

                    b.Property<string>("KeyFns")
                        .HasColumnType("text");

                    b.Property<string>("LocalCurrency")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InternalCompanyData");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ApplicationOrderingProducts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyInn")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool?>("InWork")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFullDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationOrderingProducts");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ApplicationOrderingProductsProduct", b =>
                {
                    b.Property<Guid>("ApplicationOrderingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("ApplicationOrderingId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ApplicationOrderingProductsProducts", (string)null);
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.CommentOnExportedOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExportedOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExportedOrderId");

                    b.ToTable("CommentOnExportedOrders");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.CommentOnImportedOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImportedOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImportedOrderId");

                    b.ToTable("CommentOnImportedOrders");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ExportedOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerCurrency")
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyBuyerId")
                        .HasColumnType("uuid");

                    b.Property<double?>("CurrencyPercent")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EmployeeBuyerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExportedOrderStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Images")
                        .HasColumnType("text");

                    b.Property<string>("LocalCurrency")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OurCompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OurEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("TransactionCurrency")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyBuyerId");

                    b.HasIndex("EmployeeBuyerId");

                    b.HasIndex("ExportedOrderStatusId");

                    b.HasIndex("OurCompanyId");

                    b.HasIndex("OurEmployeeId");

                    b.ToTable("ExportedOrders");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ExportedOrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsValueConstant")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExportedOrderStatus");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ExportedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerCurrency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ExportedOrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PriceInBuyerCurrency")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceInTransactionCurrency")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceLocal")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionCurrency")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExportedOrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ExportedProducts");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ImportedOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("CurrencyPercent")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EmployeeSellerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Images")
                        .HasColumnType("text");

                    b.Property<Guid?>("ImportedOrderStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("LocalCurrency")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OurCompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OurEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SellersCompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupplierCurrency")
                        .HasColumnType("text");

                    b.Property<string>("TransactionCurrency")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeSellerId");

                    b.HasIndex("ImportedOrderStatusId");

                    b.HasIndex("OurCompanyId");

                    b.HasIndex("OurEmployeeId");

                    b.HasIndex("SellersCompanyId");

                    b.ToTable("ImportedOrders");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ImportedOrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsValueConstant")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImportedOrderStatus");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ImportedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ImportedOrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PriceInSupplierCurrency")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceInTransactionCurrency")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceLocal")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SupplierCurrency")
                        .HasColumnType("text");

                    b.Property<string>("TransactionCurrency")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImportedOrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ImportedProducts");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.PurchaseAtExport", b =>
                {
                    b.Property<Guid>("ExportedProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImportedProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("ExportedProductId", "ImportedProductId");

                    b.HasIndex("ImportedProductId");

                    b.ToTable("PurchaseAtExports", (string)null);
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.PurchaseAtStorage", b =>
                {
                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImportedProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("StorageId", "ImportedProductId");

                    b.HasIndex("ImportedProductId");

                    b.ToTable("PurchaseAtStorages", (string)null);
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.SoldFromStorage", b =>
                {
                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExportedProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("StorageId", "ExportedProductId");

                    b.HasIndex("ExportedProductId");

                    b.ToTable("SoldFromStorages", (string)null);
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.CategoryOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Measure")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryOptions");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("DateDelivery")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DayToDelivery")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFullDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PartNumber")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.ProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryOptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptions");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.ProductsInStorage", b =>
                {
                    b.Property<Guid?>("StorageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("StorageId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsInStorages", (string)null);
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTimeUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFullDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("CompanyTagsCompany", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DKCrm.Shared.Models.CompanyModels.TagsCompany", null)
                        .WithMany()
                        .HasForeignKey("TagsCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.BankDetails", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Company", "Company")
                        .WithMany("BankDetails")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.Company", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.Address", "ActualAddress")
                        .WithMany()
                        .HasForeignKey("ActualAddressId");

                    b.HasOne("DKCrm.Shared.Models.CompanyModels.CompanyType", "CompanyType")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyTypeId");

                    b.Navigation("ActualAddress");

                    b.Navigation("CompanyType");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.Employee", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.FnsRequest", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Company", "Company")
                        .WithOne("FnsRequest")
                        .HasForeignKey("DKCrm.Shared.Models.CompanyModels.FnsRequest", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ApplicationOrderingProductsProduct", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.OrderModels.ApplicationOrderingProducts", "ApplicationOrdering")
                        .WithMany("ApplicationOrderingProductProduct")
                        .HasForeignKey("ApplicationOrderingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DKCrm.Shared.Models.Products.Product", "Product")
                        .WithMany("ApplicationOrderingProductProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationOrdering");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.CommentOnExportedOrder", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.OrderModels.ExportedOrder", "ExportedOrder")
                        .WithMany("Comments")
                        .HasForeignKey("ExportedOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExportedOrder");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.CommentOnImportedOrder", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.OrderModels.ImportedOrder", "ImportedOrder")
                        .WithMany("Comments")
                        .HasForeignKey("ImportedOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportedOrder");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ExportedOrder", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Company", "CompanyBuyer")
                        .WithMany("ExportedOrdersBuyerCompany")
                        .HasForeignKey("CompanyBuyerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Employee", "EmployeeBuyer")
                        .WithMany("ExportedOrdersBuyer")
                        .HasForeignKey("EmployeeBuyerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DKCrm.Shared.Models.OrderModels.ExportedOrderStatus", "ExportedOrderStatus")
                        .WithMany("ExportedOrders")
                        .HasForeignKey("ExportedOrderStatusId");

                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Company", "OurCompany")
                        .WithMany("ExportedOrdersOurCompany")
                        .HasForeignKey("OurCompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Employee", "OurEmployee")
                        .WithMany("ExportedOrdersOur")
                        .HasForeignKey("OurEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CompanyBuyer");

                    b.Navigation("EmployeeBuyer");

                    b.Navigation("ExportedOrderStatus");

                    b.Navigation("OurCompany");

                    b.Navigation("OurEmployee");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ExportedProduct", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.OrderModels.ExportedOrder", "ExportedOrder")
                        .WithMany("ExportedProducts")
                        .HasForeignKey("ExportedOrderId");

                    b.HasOne("DKCrm.Shared.Models.Products.Product", "Product")
                        .WithMany("ExportedProducts")
                        .HasForeignKey("ProductId");

                    b.Navigation("ExportedOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ImportedOrder", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Employee", "EmployeeSeller")
                        .WithMany("ImportedOrdersSellers")
                        .HasForeignKey("EmployeeSellerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DKCrm.Shared.Models.OrderModels.ImportedOrderStatus", "ImportedOrderStatus")
                        .WithMany("ImportedOrders")
                        .HasForeignKey("ImportedOrderStatusId");

                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Company", "OurCompany")
                        .WithMany("ImportedOrdersOurCompany")
                        .HasForeignKey("OurCompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Employee", "OurEmployee")
                        .WithMany("ImportedOrdersOur")
                        .HasForeignKey("OurEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DKCrm.Shared.Models.CompanyModels.Company", "SellersCompany")
                        .WithMany("ImportedOrdersSellersCompany")
                        .HasForeignKey("SellersCompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeSeller");

                    b.Navigation("ImportedOrderStatus");

                    b.Navigation("OurCompany");

                    b.Navigation("OurEmployee");

                    b.Navigation("SellersCompany");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ImportedProduct", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.OrderModels.ImportedOrder", "ImportedOrder")
                        .WithMany("ImportedProducts")
                        .HasForeignKey("ImportedOrderId");

                    b.HasOne("DKCrm.Shared.Models.Products.Product", "Product")
                        .WithMany("ImportedProducts")
                        .HasForeignKey("ProductId");

                    b.Navigation("ImportedOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.PurchaseAtExport", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.OrderModels.ExportedProduct", "ExportedProduct")
                        .WithMany("PurchaseAtExports")
                        .HasForeignKey("ExportedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DKCrm.Shared.Models.OrderModels.ImportedProduct", "ImportedProduct")
                        .WithMany("PurchaseAtExportList")
                        .HasForeignKey("ImportedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExportedProduct");

                    b.Navigation("ImportedProduct");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.PurchaseAtStorage", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.OrderModels.ImportedProduct", "ImportedProduct")
                        .WithMany("PurchaseAtStorageList")
                        .HasForeignKey("ImportedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DKCrm.Shared.Models.Products.Storage", "Storage")
                        .WithMany("PurchaseAtStorageList")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportedProduct");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.SoldFromStorage", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.OrderModels.ExportedProduct", "ExportedProduct")
                        .WithMany("SoldFromStorage")
                        .HasForeignKey("ExportedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DKCrm.Shared.Models.Products.Storage", "Storage")
                        .WithMany("SoldFromStorageList")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExportedProduct");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Category", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.Products.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.CategoryOption", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.Products.Category", "Category")
                        .WithMany("CategoryOptions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Product", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.Products.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("DKCrm.Shared.Models.Products.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.ProductOption", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.Products.CategoryOption", "CategoryOption")
                        .WithMany("ProductOption")
                        .HasForeignKey("CategoryOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DKCrm.Shared.Models.Products.Product", "Product")
                        .WithMany("ProductOption")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryOption");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.ProductsInStorage", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.Products.Product", "Product")
                        .WithMany("ProductsInStorage")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DKCrm.Shared.Models.Products.Storage", "Storage")
                        .WithMany("ProductsInStorage")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Storage", b =>
                {
                    b.HasOne("DKCrm.Shared.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.Company", b =>
                {
                    b.Navigation("BankDetails");

                    b.Navigation("Employees");

                    b.Navigation("ExportedOrdersBuyerCompany");

                    b.Navigation("ExportedOrdersOurCompany");

                    b.Navigation("FnsRequest");

                    b.Navigation("ImportedOrdersOurCompany");

                    b.Navigation("ImportedOrdersSellersCompany");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.CompanyType", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.CompanyModels.Employee", b =>
                {
                    b.Navigation("ExportedOrdersBuyer");

                    b.Navigation("ExportedOrdersOur");

                    b.Navigation("ImportedOrdersOur");

                    b.Navigation("ImportedOrdersSellers");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ApplicationOrderingProducts", b =>
                {
                    b.Navigation("ApplicationOrderingProductProduct");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ExportedOrder", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ExportedProducts");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ExportedOrderStatus", b =>
                {
                    b.Navigation("ExportedOrders");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ExportedProduct", b =>
                {
                    b.Navigation("PurchaseAtExports");

                    b.Navigation("SoldFromStorage");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ImportedOrder", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ImportedProducts");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ImportedOrderStatus", b =>
                {
                    b.Navigation("ImportedOrders");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.OrderModels.ImportedProduct", b =>
                {
                    b.Navigation("PurchaseAtExportList");

                    b.Navigation("PurchaseAtStorageList");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Category", b =>
                {
                    b.Navigation("CategoryOptions");

                    b.Navigation("Children");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.CategoryOption", b =>
                {
                    b.Navigation("ProductOption");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Product", b =>
                {
                    b.Navigation("ApplicationOrderingProductProduct");

                    b.Navigation("ExportedProducts");

                    b.Navigation("ImportedProducts");

                    b.Navigation("ProductOption");

                    b.Navigation("ProductsInStorage");
                });

            modelBuilder.Entity("DKCrm.Shared.Models.Products.Storage", b =>
                {
                    b.Navigation("ProductsInStorage");

                    b.Navigation("PurchaseAtStorageList");

                    b.Navigation("SoldFromStorageList");
                });
#pragma warning restore 612, 618
        }
    }
}
